{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":""},{"location":"#blux-ecosystem-gravitational-hub","title":"BLUX Ecosystem \u2014 Gravitational Hub","text":"<p>Reflection &gt; Reaction \u00b7 Coordination &gt; Concentration \u00b7 Coherence &gt; Complexity \u00b7 Principles &gt; Preferences</p> <p>BLUX Ecosystem is the central nervous system that orchestrates the BLUX constellation \u2014 where identity, trust, orchestration, consciousness, and safety converge into harmonious operation.</p> <p> </p>"},{"location":"#core-philosophy","title":"\ud83c\udfaf Core Philosophy","text":"<pre><code># The BLUX Doctrine\nPRINCIPLES = {\n    \"reflection_over_reaction\": \"Thoughtful response beats impulsive reaction\",\n    \"coordination_over_concentration\": \"Distributed harmony beats isolated brilliance\", \n    \"coherence_over_complexity\": \"Elegant simplicity beats convoluted power\",\n    \"principles_over_preferences\": \"Timeless truth beats temporary taste\"\n}\n</code></pre> <p>\ud83d\ude80 Instant Start</p> <pre><code># Clone with all submodules\ngit clone --recurse-submodules https://github.com/Outer-Void/blux-ecosystem.git\ncd blux-ecosystem\n\n# One-command development environment\n./scripts/bootstrap.sh\n\n# Verify installation\n./scripts/health-check.sh\n</code></pre> <p>\ud83c\udf0c The Constellation</p> <p>Module Purpose Status Docs BLUX Lite Orchestration Core \ud83d\udfe2 Operational API BLUX cA Conscious Intelligence \ud83d\udfe1 Alpha Guide BLUX Guard Zero-Trust Security \ud83d\udfe2 Stable Policy BLUX Reg Identity &amp; Keys \ud83d\udfe2 Stable Crypto BLUX Quantum CLI/TUI Interface \ud83d\udfe1 Beta Quickstart BLUX Commander Web Dashboard \ud83d\udfe0 Early UI Guide</p> <p>\ud83d\udcc1 Enhanced Repository Structure</p> <pre><code>blux-ecosystem/\n\u251c\u2500\u2500 \ud83d\udcda Documentation Hub\n\u2502   \u251c\u2500\u2500 README.md              # \ud83c\udfaf This enhanced guide\n\u2502   \u251c\u2500\u2500 ARCHITECTURE.md        # \ud83c\udfd7\ufe0f  System design &amp; data flows\n\u2502   \u251c\u2500\u2500 SECURITY_OVERVIEW.md   # \ud83d\udee1\ufe0f  Zero-trust implementation\n\u2502   \u251c\u2500\u2500 CONFIG.md              # \u2699\ufe0f  Multi-environment setup\n\u2502   \u251c\u2500\u2500 DEVELOPER_GUIDE.md     # \ud83d\udee0\ufe0f  Patch-first workflow\n\u2502   \u251c\u2500\u2500 INTEGRATION_GUIDE.md   # \ud83d\udd17 Cross-module APIs\n\u2502   \u251c\u2500\u2500 CHANGELOG.md           # \ud83d\udcdc Release history\n\u2502   \u2514\u2500\u2500 ROADMAP.md             # \ud83d\uddfa\ufe0f  Future evolution\n\u251c\u2500\u2500 \ud83d\udd10 Security &amp; Compliance\n\u2502   \u251c\u2500\u2500 LICENSE                # \ud83d\udcc4 Apache 2.0\n\u2502   \u251c\u2500\u2500 CODE_OF_CONDUCT.md     # \ud83e\udd1d Community standards\n\u2502   \u251c\u2500\u2500 CONTRIBUTING.md        # \ud83c\udf81 Contribution guidelines\n\u2502   \u251c\u2500\u2500 SECURITY.md            # \ud83d\udea8 Vulnerability reporting\n\u2502   \u2514\u2500\u2500 COMPLIANCE.md          # \ud83c\udf0d GDPR/CCPA compliance\n\u251c\u2500\u2500 \u26a1 Smart Scripts\n\u2502   \u251c\u2500\u2500 scripts/\n\u2502   \u2502   \u251c\u2500\u2500 bootstrap.sh       # \ud83d\ude80 One-shot environment setup\n\u2502   \u2502   \u251c\u2500\u2500 health-check.sh    # \u2764\ufe0f  System verification\n\u2502   \u2502   \u251c\u2500\u2500 anchor-list.sh     # \ud83d\udccd Named edit locations\n\u2502   \u2502   \u251c\u2500\u2500 patch-apply.sh     # \ud83e\ude79 Safe patch application\n\u2502   \u2502   \u251c\u2500\u2500 backup.sh          # \ud83d\udcbe State preservation\n\u2502   \u2502   \u2514\u2500\u2500 restore.sh         # \ud83d\udd04 State recovery\n\u2502   \u2514\u2500\u2500 tools/\n\u2502       \u251c\u2500\u2500 audit-analyzer.py  # \ud83d\udcca JSONL audit analysis\n\u2502       \u251c\u2500\u2500 config-validator.py # \u2705 Configuration validation\n\u2502       \u2514\u2500\u2500 dependency-check.sh # \ud83d\udd0d Security audit\n\u251c\u2500\u2500 \ud83d\udee0\ufe0f Development\n\u2502   \u251c\u2500\u2500 .github/\n\u2502   \u2502   \u251c\u2500\u2500 workflows/\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 ci.yml         # \ud83d\udd04 Continuous integration\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 security.yml   # \ud83d\udee1\ufe0f Security scanning\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 release.yml    # \ud83d\ude80 Automated releases\n\u2502   \u2502   \u251c\u2500\u2500 PULL_REQUEST_TEMPLATE.md\n\u2502   \u2502   \u251c\u2500\u2500 ISSUES_TEMPLATE.md\n\u2502   \u2502   \u2514\u2500\u2500 SECURITY.md\n\u2502   \u251c\u2500\u2500 .gitignore\n\u2502   \u251c\u2500\u2500 .editorconfig\n\u2502   \u2514\u2500\u2500 pre-commit-config.yaml\n\u2514\u2500\u2500 \ud83d\udcd6 Deep Documentation\n    \u251c\u2500\u2500 docs/\n    \u2502   \u251c\u2500\u2500 overview-diagram.md # \ud83c\udfa8 System visualization\n    \u2502   \u251c\u2500\u2500 api-gateway.md     # \ud83c\udf10 Unified API reference\n    \u2502   \u251c\u2500\u2500 deployment/        # \ud83d\udea2 Multi-environment guides\n    \u2502   \u251c\u2500\u2500 troubleshooting/   # \ud83d\udc1b Common issues &amp; solutions\n    \u2502   \u2514\u2500\u2500 examples/          # \ud83d\udca1 Practical implementations\n    \u2514\u2500\u2500 manifests/\n        \u251c\u2500\u2500 hub.manifest.json  # \ud83d\udcc4 Static hub metadata\n        \u2514\u2500\u2500 policy.doctrine.json # \ud83d\udcdc Active doctrine flags\n</code></pre> <p>\ud83c\udfae Quick Interaction</p> <pre><code># Check system status\n./scripts/health-check.sh\n\n# List available anchors for development\n./scripts/anchor-list.sh\n\n# Create backup before changes\n./scripts/backup.sh --tag pre-feature-x\n\n# Analyze recent audit trails\npython tools/audit-analyzer.py --last 1h\n</code></pre> <p>\ud83d\udd04 Development Flow</p> <pre><code>graph TD\n    A[Fork &amp; Branch] --&gt; B[Backup State]\n    B --&gt; C[Edit Within Anchors]\n    C --&gt; D[Generate Patch]\n    D --&gt; E[Run Tests]\n    E --&gt; F[Health Check]\n    F --&gt; G[Create PR]\n    G --&gt; H[Automated Review]\n\n    style A fill:#1a1a1a,stroke:#6366f1\n    style H fill:#0f766e,stroke:#14b8a6\n</code></pre> <p>\ud83d\udee1\ufe0f Security First</p> <pre><code># Zero-Trust Defaults\nsecurity:\n  identity_verification: required\n  audit_trail: immutable\n  local_memory: encrypted\n  remote_inference: sandboxed\n  data_retention: minimal\n</code></pre> <p>\ud83c\udf10 Network Topology</p> <pre><code># Default Development Ports\nBLUX_REG_HOST=localhost:50050      # Identity Service\nBLUX_GUARD_HOST=localhost:50052    # Security Enforcer\nBLUX_LITE_HOST=localhost:50051     # Orchestrator\nBLUX_CA_HOST=localhost:50053       # Conscious Layer\nBLUX_QUANTUM_HOST=localhost:50054  # CLI Interface\nBLUX_COMMANDER_HOST=localhost:3000 # Web Dashboard\n\n</code></pre>"},{"location":"#unified-operator-cli-bluxq","title":"\ud83e\udded Unified Operator CLI \u2014 <code>bluxq</code>","text":"<p><code>bluxq</code> is the single entrypoint for orchestrating, advising, enforcing, and governing the entire BLUX constellation. Every module ships a plugin that <code>bluxq</code> loads on demand so operators and automation pipelines speak with one voice.</p> <pre><code># Discover available modules\nbluxq modules list\n\n# Run cross-module health checks\nbluxq status --format table\n\n# Invoke module specific commands\nbluxq lite run --workflow resilience --env stage\nbluxq guard audit --tail 50\nbluxq commander dashboards list\n</code></pre> <p>PowerShell operators can use the same verbs:</p> <pre><code>bluxq modules list\nbluxq status --format table\nbluxq guard audit --tail 50\n</code></pre> <p>Explore the full CLI surface in <code>docs/modules/blux-quantum/README.md</code>.</p>"},{"location":"#enterprise-documentation-hub","title":"\ud83d\udcda Enterprise Documentation Hub","text":"<ul> <li>Vision, Architecture, Operations: curated under <code>docs/</code> with MkDocs-ready content.</li> <li>Module Guides: each module has dedicated pages under <code>docs/modules/&lt;module&gt;/</code> with overview, architecture, integration, operations, security, configuration, and command references.</li> <li>Governance &amp; Doctrine: see <code>docs/GOVERNANCE.md</code> and <code>docs/modules/blux-doctrine/</code> for policy stewardship.</li> <li>Change Tracking: hub-level updates live in <code>docs/CHANGELOG.md</code>; module change logs remain in their home repos.</li> </ul> <p>Serve the docs locally with:</p> <pre><code>python scripts/scan_subrepos.py\npython scripts/render_index_from_readme.py\nmkdocs serve\n</code></pre>"},{"location":"#documentation-automation-scripts","title":"\ud83d\udd04 Documentation Automation Scripts","text":"Script Purpose <code>python scripts/scan_subrepos.py</code> Discovers module repositories, ensures doc stubs exist, and refreshes the module index table. <code>python scripts/gen_filetree.py</code> Generates the repository tree for the README. <code>python scripts/update_readme_filetree.py</code> Injects the generated tree into the README between managed markers. <code>python scripts/render_index_from_readme.py</code> Rebuilds <code>docs/index.md</code> from the root README. <code>python scripts/lint_links.py</code> Emits warnings for broken Markdown links without failing builds."},{"location":"#documentation-site-pipeline","title":"\ud83c\udf10 Documentation Site Pipeline","text":"<p>GitHub Actions workflow <code>docs.yml</code> builds the MkDocs Material site, publishes it to GitHub Pages, and runs the documentation automation scripts on every push to <code>main</code>.</p>"},{"location":"#repository-file-tree","title":"\ud83d\udcc1 Repository File Tree","text":"Repository File Tree (click to expand) <pre><code>blux-ecosystem/\n\u251c\u2500\u2500 .editorconfig\n\u251c\u2500\u2500 .env.example\n\u251c\u2500\u2500 .github\n\u2502   \u251c\u2500\u2500 ISSUE_TEMPLATE.md\n\u2502   \u251c\u2500\u2500 ISSUES_TEMPLATE.md\n\u2502   \u251c\u2500\u2500 PULL_REQUEST_TEMPLATE.md\n\u2502   \u251c\u2500\u2500 SECURITY.md\n\u2502   \u2514\u2500\u2500 workflows\n\u2502       \u251c\u2500\u2500 ci.yml\n\u2502       \u251c\u2500\u2500 docs.yml\n\u2502       \u251c\u2500\u2500 release.yml\n\u2502       \u2514\u2500\u2500 security.yml\n\u251c\u2500\u2500 .gitignore\n\u251c\u2500\u2500 ARCHITECTURE.md\n\u251c\u2500\u2500 assets\n\u2502   \u251c\u2500\u2500 blux-eco-diag.png\n\u2502   \u251c\u2500\u2500 blux-eco-logo.png\n\u2502   \u251c\u2500\u2500 blux-lite-banner.png\n\u2502   \u2514\u2500\u2500 outer-void-logo.png\n\u251c\u2500\u2500 CHANGELOG.md\n\u251c\u2500\u2500 CODE_OF_CONDUCT.md\n\u251c\u2500\u2500 COMPLIANCE.md\n\u251c\u2500\u2500 config\n\u2502   \u2514\u2500\u2500 development.yaml\n\u251c\u2500\u2500 CONFIG.md\n\u251c\u2500\u2500 CONTRIBUTING.md\n\u251c\u2500\u2500 DEVELOPER_GUIDE.md\n\u251c\u2500\u2500 docs\n\u2502   \u251c\u2500\u2500 api-gateway.md\n\u2502   \u251c\u2500\u2500 ARCHITECTURE.md\n\u2502   \u251c\u2500\u2500 CHANGELOG.md\n\u2502   \u251c\u2500\u2500 CODE_OF_CONDUCT.md\n\u2502   \u251c\u2500\u2500 CONFIGURATION.md\n\u2502   \u251c\u2500\u2500 CONTRIBUTING.md\n\u2502   \u251c\u2500\u2500 development\n\u2502   \u2502   \u251c\u2500\u2500 development.md\n\u2502   \u2502   \u251c\u2500\u2500 kubernetes.md\n\u2502   \u2502   \u2514\u2500\u2500 production.md\n\u2502   \u251c\u2500\u2500 examples\n\u2502   \u2502   \u251c\u2500\u2500 basic-integration.md\n\u2502   \u2502   \u2514\u2500\u2500 custom-module.md\n\u2502   \u251c\u2500\u2500 governance.md\n\u2502   \u251c\u2500\u2500 GOVERNANCE.md\n\u2502   \u251c\u2500\u2500 index.md\n\u2502   \u251c\u2500\u2500 INSTALL.md\n\u2502   \u251c\u2500\u2500 links.md\n\u2502   \u251c\u2500\u2500 modules\n\u2502   \u2502   \u251c\u2500\u2500 blux-ca\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 API.md\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 ARCHITECTURE.md\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 CONFIGURATION.md\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 INTEGRATION_GUIDE.md\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 OPERATIONS.md\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 README.md\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 SECURITY.md\n\u2502   \u2502   \u251c\u2500\u2500 blux-commander\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 API.md\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 ARCHITECTURE.md\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 CONFIGURATION.md\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 INTEGRATION_GUIDE.md\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 OPERATIONS.md\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 README.md\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 SECURITY.md\n\u2502   \u2502   \u251c\u2500\u2500 blux-doctrine\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 API.md\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 ARCHITECTURE.md\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 CONFIGURATION.md\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 INTEGRATION_GUIDE.md\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 OPERATIONS.md\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 README.md\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 SECURITY.md\n\u2502   \u2502   \u251c\u2500\u2500 blux-guard\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 API.md\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 ARCHITECTURE.md\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 CONFIGURATION.md\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 INTEGRATION_GUIDE.md\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 OPERATIONS.md\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 README.md\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 SECURITY.md\n\u2502   \u2502   \u251c\u2500\u2500 blux-lite\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 API.md\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 ARCHITECTURE.md\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 CONFIGURATION.md\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 INTEGRATION_GUIDE.md\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 OPERATIONS.md\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 README.md\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 SECURITY.md\n\u2502   \u2502   \u251c\u2500\u2500 blux-quantum\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 API.md\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 ARCHITECTURE.md\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 CONFIGURATION.md\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 INTEGRATION_GUIDE.md\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 OPERATIONS.md\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 README.md\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 SECURITY.md\n\u2502   \u2502   \u2514\u2500\u2500 blux-reg\n\u2502   \u2502       \u251c\u2500\u2500 API.md\n\u2502   \u2502       \u251c\u2500\u2500 ARCHITECTURE.md\n\u2502   \u2502       \u251c\u2500\u2500 CONFIGURATION.md\n\u2502   \u2502       \u251c\u2500\u2500 INTEGRATION_GUIDE.md\n\u2502   \u2502       \u251c\u2500\u2500 OPERATIONS.md\n\u2502   \u2502       \u251c\u2500\u2500 README.md\n\u2502   \u2502       \u2514\u2500\u2500 SECURITY.md\n\u2502   \u251c\u2500\u2500 OPERATIONS.md\n\u2502   \u251c\u2500\u2500 PRIVACY.md\n\u2502   \u251c\u2500\u2500 ROADMAP.md\n\u2502   \u251c\u2500\u2500 SECURITY.md\n\u2502   \u251c\u2500\u2500 SUPPORT.md\n\u2502   \u251c\u2500\u2500 troubleshooting\n\u2502   \u2502   \u251c\u2500\u2500 common-issues.md\n\u2502   \u2502   \u2514\u2500\u2500 debug-guide.md\n\u2502   \u251c\u2500\u2500 TROUBLESHOOTING.md\n\u2502   \u2514\u2500\u2500 VISION.md\n\u251c\u2500\u2500 INTEGRATION_GUIDE.md\n\u251c\u2500\u2500 LICENSE\n\u251c\u2500\u2500 mkdocs.yml\n\u251c\u2500\u2500 pre-commit-config.yaml\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 ROADMAP.md\n\u251c\u2500\u2500 scripts\n\u2502   \u251c\u2500\u2500 anchor-list.sh\n\u2502   \u251c\u2500\u2500 backup.sh\n\u2502   \u251c\u2500\u2500 bootstrap.sh\n\u2502   \u251c\u2500\u2500 gen_filetree.py\n\u2502   \u251c\u2500\u2500 health-check.sh\n\u2502   \u251c\u2500\u2500 install.sh\n\u2502   \u251c\u2500\u2500 lint_links.py\n\u2502   \u251c\u2500\u2500 patch-apply.sh\n\u2502   \u251c\u2500\u2500 render_index_from_readme.py\n\u2502   \u251c\u2500\u2500 restore.sh\n\u2502   \u251c\u2500\u2500 scan_subrepos.py\n\u2502   \u2514\u2500\u2500 update_readme_filetree.py\n\u251c\u2500\u2500 SECURITY.md\n\u251c\u2500\u2500 SECURITY_OVERVIEW.md\n\u2514\u2500\u2500 tools\n    \u251c\u2500\u2500 audit-analyzer.py\n    \u251c\u2500\u2500 config-validator.py\n    \u2514\u2500\u2500 dependency-check.sh\n</code></pre> <p>\ud83d\udcc8 Monitoring &amp; Observability</p> <pre><code># View real-time audit logs\ntail -f ~/.config/blux/audit/*.jsonl | jq '.'\n\n# Check service health\ncurl http://localhost:50051/health\n\n# Trace request flow\nJAEGER_ENDPOINT=http://localhost:14268/api/traces\n</code></pre> <p>\ud83c\udfaf What's Next?</p> <ol> <li>Explore Architecture \u2192 ARCHITECTURE.md</li> <li>Review Security Model \u2192 SECURITY_OVERVIEW.md</li> <li>Setup Development \u2192 DEVELOPER_GUIDE.md</li> <li>Understand Integration \u2192 INTEGRATION_GUIDE.md</li> <li>Check Roadmap \u2192 ROADMAP.md</li> </ol> <p>\ud83d\udcab Join the Constellation</p> <pre><code># Star the repository to track evolution\ngh repo watch Outer-Void/blux-ecosystem\n\n# Join discussions\ngithub.com/Outer-Void/blux-ecosystem/discussions\n\n# Report security issues\nsecurity@outer-void.example\n</code></pre> <p>We build not for complexity, but for coherence. Not for control, but for coordination. The mountain awaits.  (( \u2022 ))</p> <p>Ready to ascend? Start with ./scripts/bootstrap.sh to initialize your development environment.</p>"},{"location":"#key-enhancements-delivered","title":"\ud83d\ude80 Key Enhancements Delivered:","text":""},{"location":"#1-professional-polish","title":"1. Professional Polish","text":"<ul> <li>Badges &amp; visual hierarchy</li> <li>Status tables for module tracking  </li> <li>Enhanced file tree with emojis</li> <li>Modern documentation structure</li> </ul>"},{"location":"#2-production-readiness","title":"2. Production Readiness","text":"<ul> <li>Health check scripts</li> <li>Configuration validation</li> <li>Audit analysis tools</li> <li>Security scanning workflows</li> </ul>"},{"location":"#3-developer-experience","title":"3. Developer Experience","text":"<ul> <li>One-command bootstrap</li> <li>Interactive quick start</li> <li>Visual development workflow</li> <li>Comprehensive tooling</li> </ul>"},{"location":"#4-operational-excellence","title":"4. Operational Excellence","text":"<ul> <li>Monitoring guides</li> <li>Troubleshooting section</li> <li>Multi-environment support</li> <li>Compliance documentation</li> </ul>"},{"location":"#5-community-building","title":"5. Community Building","text":"<ul> <li>Discussion links</li> <li>Contribution visibility</li> <li>Roadmap inclusion</li> <li>Security reporting</li> </ul>"},{"location":"ARCHITECTURE/","title":"ARCHITECTURE","text":"<p>Convergence of conscience, command, and code.</p>"},{"location":"ARCHITECTURE/#ecosystem-topology","title":"Ecosystem Topology","text":"<pre><code>graph TD\n    subgraph Identity &amp; Trust\n        REG[BLUX Reg]\\nKey Ledger\n        DOCTRINE[BLUX Doctrine]\\nPolicy Spine\n    end\n    subgraph Intelligence Loop\n        CA[BLUX cA]\\nConscious Advisor\n        LITE[BLUX Lite]\\nOrchestration Mesh\n        GUARD[BLUX Guard]\\nZero-Trust Sentinel\n    end\n    subgraph Experience\n        COMMANDER[BLUX Commander]\\nOperator Portal\n        QUANTUM[BLUX Quantum]\\nbluxq CLI\n    end\n\n    REG --&gt; GUARD\n    REG --&gt; COMMANDER\n    DOCTRINE --&gt; GUARD\n    DOCTRINE --&gt; CA\n    CA --&gt; LITE\n    LITE --&gt; GUARD\n    LITE --&gt; COMMANDER\n    GUARD --&gt; COMMANDER\n    QUANTUM --&gt; LITE\n    QUANTUM --&gt; GUARD\n    QUANTUM --&gt; CA\n    QUANTUM --&gt; COMMANDER\n</code></pre>"},{"location":"ARCHITECTURE/#data-control-flows","title":"Data &amp; Control Flows","text":"<ul> <li>Identity Lineage \u2014 BLUX Reg signs service and operator identities, distributing capability manifests to Guard and Commander.</li> <li>Doctrine Pulse \u2014 Doctrine exposes a policy API consumed by Guard for enforcement, Lite for orchestration gating, and cA for ethical framing.</li> <li>Advisory Loop \u2014 cA monitors telemetry streams, generates situational recommendations, and exposes them via Commander panels and bluxq feeds.</li> <li>Operational Mesh \u2014 Lite coordinates workflows across modules, invoking Guard hooks and Doctrine validation before executing actions.</li> <li>Experience Channel \u2014 Commander visualizes state and exposes APIs, while bluxq offers command-line parity.</li> </ul>"},{"location":"ARCHITECTURE/#module-responsibilities","title":"Module Responsibilities","text":"Module Purpose Primary Interfaces BLUX Lite Orchestration and job lifecycle control gRPC jobs API, <code>bluxq lite *</code>, Guard policy hooks BLUX cA Conscious advisory reasoning <code>bluxq ca *</code>, Doctrine policy evaluation, telemetry streams BLUX Guard Developer security cockpit and terminal enforcement <code>bluxq guard *</code>, Commander dashboards, Reg capability checks BLUX Quantum Unified CLI (<code>bluxq</code>) and plugin host Terminal, automation pipelines, module command packs BLUX Doctrine Doctrine policy engine and audits REST policy API, Doctrine manifests, Guard enforcement BLUX Commander Web dashboard &amp; API aggregation HTTPS dashboard, WebSocket telemetry, Admin API BLUX Reg Identity, signing, and capability registry Certificate authority, signing service, CLI key ops"},{"location":"ARCHITECTURE/#module-documentation-index","title":"Module Documentation Index","text":"Module README Architecture Integration Operations Security Configuration API/Commands BLUX Lite Link Link Link Link Link Link Link BLUX cA Link Link Link Link Link Link Link BLUX Guard Link Link Link Link Link Link Link BLUX Quantum (CLI) Link Link Link Link Link Link Link BLUX Doctrine Link Link Link Link Link Link Link BLUX Commander Link Link Link Link Link Link Link BLUX Reg Link Link Link Link Link Link Link"},{"location":"ARCHITECTURE/#control-planes","title":"Control Planes","text":"<ul> <li>Execution Plane \u2014 Jobs executed through Lite with Guard interceptors.</li> <li>Policy Plane \u2014 Doctrine schemas, Guard rule packs, Reg capabilities.</li> <li>Experience Plane \u2014 Commander UI, API surfaces, CLI surfaces.</li> </ul>"},{"location":"ARCHITECTURE/#observability-telemetry","title":"Observability &amp; Telemetry","text":"<ul> <li>All modules emit OpenTelemetry traces with Doctrine context tags.</li> <li>Guard enforces signed telemetry envelopes before data leaves the mesh.</li> <li>Commander displays consolidated SLO dashboards sourced from Lite and Reg metrics feeds.</li> </ul>"},{"location":"ARCHITECTURE/#integration-contracts","title":"Integration Contracts","text":"<ul> <li>Configuration expressed in YAML under <code>config/</code> with schema validated by <code>scripts/scan_subrepos.py</code> cross-checks.</li> <li>CLI interactions converge on <code>bluxq</code>, pulling module plugins from BLUX Quantum's manifest.</li> </ul>"},{"location":"ARCHITECTURE/#change-management","title":"Change Management","text":"<ul> <li>Architectural changes require updates to this map, module docs, and the Doctrine changelog pointer.</li> <li>GitHub Discussions capture RFCs; accepted changes trigger the docs automation workflow.</li> </ul>"},{"location":"CHANGELOG/","title":"CHANGELOG","text":"<p>Documenting the pulse of the ecosystem hub.</p> <p>This changelog mirrors hub-level documentation and automation updates. For product release notes see the root CHANGELOG and module-specific logs under <code>docs/modules/*/CHANGELOG.md</code> (if present).</p>"},{"location":"CHANGELOG/#2024-xx-xx-enterprise-hub-foundations","title":"2024-XX-XX \u2014 Enterprise Hub Foundations","text":"<ul> <li>Established unified documentation structure under <code>/docs</code>.</li> <li>Added automation scripts for sub-repo sync, README file tree, and MkDocs index rendering.</li> <li>Introduced MkDocs Material configuration and GitHub Pages workflow.</li> <li>Created module documentation templates aligned with BLUX doctrine.</li> </ul>"},{"location":"CODE_OF_CONDUCT/","title":"CODE OF CONDUCT","text":"<p>We build with respect, curiosity, and accountability.</p>"},{"location":"CODE_OF_CONDUCT/#summary","title":"Summary","text":"<p>This document supplements the root CODE_OF_CONDUCT with operational expectations for documentation and module integration.</p>"},{"location":"CODE_OF_CONDUCT/#principles","title":"Principles","text":"<ul> <li>Assume positive intent, but never compromise safety or doctrine.</li> <li>Elevate voices impacted by automation decisions.</li> <li>Communicate transparently during incidents and reviews.</li> </ul>"},{"location":"CODE_OF_CONDUCT/#reporting","title":"Reporting","text":"<ul> <li>Use Commander governance forms or email <code>security@outervoid.example</code>.</li> <li>For urgent matters, page the Security Sentinel through Guard alerting.</li> </ul>"},{"location":"CODE_OF_CONDUCT/#enforcement","title":"Enforcement","text":"<p>Violations lead to restorative conversations, contributor pauses, or removal depending on severity, guided by Governance council decisions.</p>"},{"location":"CODE_OF_CONDUCT/#inclusion","title":"Inclusion","text":"<p>Support multiple time zones, provide asynchronous updates, and document context for every change.</p>"},{"location":"CODE_OF_CONDUCT/#final-word","title":"Final Word","text":"<p>We are stewards of intelligent systems; empathy and rigor are non-negotiable.</p>"},{"location":"CONFIGURATION/","title":"CONFIGURATION","text":"<p>Shape the constellation with a single schema.</p>"},{"location":"CONFIGURATION/#overview","title":"Overview","text":"<p>BLUX configuration is expressed through YAML manifests stored under <code>config/</code>. Each module consumes a namespaced section validated by shared schemas.</p>"},{"location":"CONFIGURATION/#core-files","title":"Core Files","text":"File Description <code>config/blux.yaml</code> Global toggles, organization metadata, stability mode defaults <code>config/telemetry.yaml</code> Observability exporters, sampling strategies <code>config/credentials.yaml</code> References to Reg-issued secrets <code>config/compose/*.yml</code> Container orchestrations for environments <code>config/modules/*.yaml</code> Module-specific overrides"},{"location":"CONFIGURATION/#schema-snippet","title":"Schema Snippet","text":"<pre><code>version: 1\norganization:\n  name: \"Outer Void\"\n  tenancy: \"multi\"\ntelemetry:\n  exporters:\n    - name: otlp\n      endpoint: https://telemetry.blux.local/v1/traces\n      auth: reg-capability:telemetry-writer\nmodules:\n  lite:\n    stability_mode: guided\n  guard:\n    enforcement:\n      developer_shell: true\n  commander:\n    dashboards:\n      - name: resilience\n        widgets:\n          - guard.policy.status\n          - lite.workflow.health\n</code></pre>"},{"location":"CONFIGURATION/#environment-variables","title":"Environment Variables","text":"Variable Purpose <code>BLUX_ENV</code> Environment name (dev/stage/prod) <code>BLUX_TELEMETRY_ENDPOINT</code> Overrides OTLP endpoint <code>BLUX_REG_HOST</code> Points CLI to registry <code>BLUX_GUARD_ENFORCEMENT</code> Forces guard enforcement level <code>BLUX_DOCTRINE_PATH</code> Local doctrine manifest location <p>PowerShell equivalents:</p> <pre><code>$env:BLUX_ENV = \"dev\"\n$env:BLUX_TELEMETRY_ENDPOINT = \"https://telemetry.blux.local/v1/traces\"\n</code></pre>"},{"location":"CONFIGURATION/#validation","title":"Validation","text":"<ul> <li>Run <code>python tools/config-validator.py</code> (if present) before deployments.</li> <li><code>scripts/scan_subrepos.py</code> ensures module docs reflect configuration keys.</li> </ul>"},{"location":"CONFIGURATION/#secrets-management","title":"Secrets Management","text":"<ul> <li>Store secrets in Reg-managed stores; reference them by capability ID within YAML.</li> <li>Use <code>bluxq reg secret put</code> to update values without exposing them in plaintext.</li> </ul>"},{"location":"CONFIGURATION/#overrides-profiles","title":"Overrides &amp; Profiles","text":"<ul> <li>Compose environment overlays using <code>config/profiles/&lt;env&gt;.yaml</code>.</li> <li>Merge with <code>bluxq config merge --profile stage</code>.</li> </ul>"},{"location":"CONFIGURATION/#related-documents","title":"Related Documents","text":"<ul> <li>OPERATIONS</li> <li>SECURITY</li> <li>Module-specific configuration guides under <code>docs/modules/*/CONFIGURATION.md</code>.</li> </ul>"},{"location":"CONTRIBUTING/","title":"CONTRIBUTING","text":"<p>Contribute with clarity; doctrine lights the path.</p>"},{"location":"CONTRIBUTING/#start-here","title":"Start Here","text":"<ul> <li>Read the root CONTRIBUTING for repository-wide policies.</li> <li>Join the <code>#blux-builders</code> channel in Commander (if provisioned) for onboarding.</li> </ul>"},{"location":"CONTRIBUTING/#workflow-overview","title":"Workflow Overview","text":"<ol> <li>Fork and branch from <code>main</code>.</li> <li>Run <code>python scripts/scan_subrepos.py</code> to ensure docs stay in sync.</li> <li>Implement changes with tests.</li> <li>Update documentation in <code>/docs</code> and relevant module directories.</li> <li>Execute <code>python scripts/update_readme_filetree.py</code> to refresh the tree.</li> <li>Submit pull request referencing Doctrine principles.</li> </ol>"},{"location":"CONTRIBUTING/#commit-style","title":"Commit Style","text":"<ul> <li>Prefix doc-wide upgrades with <code>[ECOSYSTEM-DOCS]</code>.</li> <li>Reference module names when scoped (e.g., <code>[LITE]</code>).</li> </ul>"},{"location":"CONTRIBUTING/#code-of-conduct","title":"Code of Conduct","text":"<p>Honor the CODE_OF_CONDUCT and escalate issues through Governance.</p>"},{"location":"CONTRIBUTING/#documentation-expectations","title":"Documentation Expectations","text":"<ul> <li>Update module docs for affected components.</li> <li>Regenerate MkDocs site via <code>mkdocs build</code> before submission.</li> </ul>"},{"location":"CONTRIBUTING/#testing-expectations","title":"Testing Expectations","text":"<ul> <li>Run existing automation: <code>./scripts/health-check.sh</code>.</li> <li>For CLI modules, execute <code>bluxq &lt;module&gt; test</code> commands when available.</li> </ul>"},{"location":"CONTRIBUTING/#release-notes","title":"Release Notes","text":"<p>Add entries to ROADMAP or root <code>CHANGELOG.md</code> when relevant.</p>"},{"location":"CONTRIBUTING/#questions","title":"Questions","text":"<p>Open GitHub Discussions or ping the Community Liaison.</p>"},{"location":"GOVERNANCE/","title":"GOVERNANCE","text":"<p>Stewardship that keeps the constellation true.</p>"},{"location":"GOVERNANCE/#roles-councils","title":"Roles &amp; Councils","text":"Role Responsibilities Rotation Ecosystem Steward Owns roadmap alignment, approves major releases Annual Module Maintainer Guards module quality, triages issues, coordinates docs Semi-annual Doctrine Custodian Oversees policy changes and ethical reviews Quarterly Security Sentinel Operates Guard, leads incident response drills Quarterly Community Liaison Manages contributor onboarding, forums Quarterly"},{"location":"GOVERNANCE/#decision-gates","title":"Decision Gates","text":"<ol> <li>Proposal \u2014 RFC or GitHub Discussion raised with impact summary.</li> <li>Review \u2014 Maintainers and Doctrine Custodian review technical and ethical considerations.</li> <li>Vote \u2014 Governance council records decision in <code>governance.md</code> log.</li> <li>Execution \u2014 Assigned maintainers deliver, referencing CONTRIBUTING.</li> <li>Retrospective \u2014 Documented in Commander governance dashboard.</li> </ol>"},{"location":"GOVERNANCE/#meeting-cadence","title":"Meeting Cadence","text":"<ul> <li>Weekly Sync \u2014 Maintainers share status, open blockers.</li> <li>Monthly Council \u2014 Approve doctrine updates, review telemetry reports.</li> <li>Quarterly Summit \u2014 Align roadmap, revisit principles, invite community feedback.</li> </ul>"},{"location":"GOVERNANCE/#artifacts","title":"Artifacts","text":"<ul> <li><code>docs/GOVERNANCE.md</code> \u2014 This charter.</li> <li><code>docs/ROADMAP.md</code> \u2014 Strategic plan.</li> <li>Commander Governance Dashboard \u2014 Live metrics.</li> <li>Doctrine Ledger \u2014 Signed decisions.</li> </ul>"},{"location":"GOVERNANCE/#compliance-alignment","title":"Compliance Alignment","text":"<ul> <li>Map decisions to regulatory controls using <code>compliance/</code> playbooks.</li> <li>Capture approvals with <code>bluxq doctrine approve --proposal &lt;id&gt;</code>.</li> </ul>"},{"location":"GOVERNANCE/#escalation-paths","title":"Escalation Paths","text":"<ul> <li>Operational incidents escalate to Security Sentinel.</li> <li>Ethical concerns escalate to Doctrine Custodian.</li> <li>Community issues escalate to Ecosystem Steward.</li> </ul>"},{"location":"GOVERNANCE/#open-participation","title":"Open Participation","text":"<p>Community contributions follow the CONTRIBUTING guide. Mentorship pairs new contributors with module maintainers.</p>"},{"location":"GOVERNANCE/#change-log","title":"Change Log","text":"<p>Record governance decisions with <code>bluxq commander governance log --summary \"...\"</code> for traceability.</p>"},{"location":"INSTALL/","title":"INSTALL","text":"<p>Bring the constellation online with one breath, any platform.</p>"},{"location":"INSTALL/#installation-matrix","title":"Installation Matrix","text":"Platform Prerequisites Install Steps Verification Linux (Ubuntu/Fedora) Python 3.11+, Docker, Make, Git <code>./scripts/bootstrap.sh</code> then <code>python -m venv .venv &amp;&amp; source .venv/bin/activate</code> <code>./scripts/health-check.sh</code> and <code>bluxq --version</code> macOS (Intel/Apple Silicon) Homebrew, Python 3.11+, Docker Desktop <code>brew bundle --file=tools/Brewfile</code> (if present) then <code>./scripts/bootstrap.sh</code> <code>./scripts/health-check.sh</code> and <code>bluxq doctor</code> Windows (WSL2) Ubuntu distro, Docker Desktop integration Clone repo inside WSL2, run <code>./scripts/bootstrap.sh</code>, install PowerShell module via <code>pwsh -File tools/setup.ps1</code> (if available) <code>./scripts/health-check.sh</code> inside WSL and <code>pwsh -Command \"bluxq --help\"</code> Air-gapped Offline package mirror, container runtime Mirror artifacts described in <code>config/artifacts.yaml</code>, run <code>./scripts/bootstrap.sh --offline</code> <code>./scripts/health-check.sh --offline</code>"},{"location":"INSTALL/#quick-start-unified","title":"Quick Start (Unified)","text":"<pre><code># Clone with submodules\ngit clone --recurse-submodules https://github.com/Outer-Void/blux-ecosystem.git\ncd blux-ecosystem\n\n# Optional: set up Python environment\npython -m venv .venv\nsource .venv/bin/activate  # Windows PowerShell: .venv\\\\Scripts\\\\Activate.ps1\n\n# Bootstrap dependencies\n./scripts/bootstrap.sh\n\n# Synchronize docs and file tree\npython scripts/scan_subrepos.py\npython scripts/update_readme_filetree.py\npython scripts/render_index_from_readme.py\n\n# Build docs site\nmkdocs build\n</code></pre>"},{"location":"INSTALL/#powershell-quick-start","title":"PowerShell Quick Start","text":"<pre><code># Clone\ngit clone --recurse-submodules https://github.com/Outer-Void/blux-ecosystem.git\nSet-Location blux-ecosystem\n\n# Optional venv\npython -m venv .venv\n. .venv/Scripts/Activate.ps1\n\n# Bootstrap\nbash ./scripts/bootstrap.sh\n\n# Validate\nyarn --version  # if Commander UI is enabled\npython scripts/scan_subrepos.py\n</code></pre>"},{"location":"INSTALL/#cli-binary","title":"CLI Binary","text":"<p><code>bluxq</code> binaries are distributed via the BLUX Quantum module. For local development, install with:</p> <pre><code>pip install -e ./blux-quantum  # if sub-repo available\n</code></pre> <p>PowerShell equivalent:</p> <pre><code>pip install -e ./blux-quantum\n</code></pre>"},{"location":"INSTALL/#container-compose","title":"Container Compose","text":"<p>For full-ecosystem simulations:</p> <pre><code>docker compose -f config/compose/full.yml up -d\nbluxq status --format table\n</code></pre>"},{"location":"INSTALL/#environment-variables","title":"Environment Variables","text":"<p>Populate <code>.env</code> or export runtime variables described in CONFIGURATION.</p>"},{"location":"INSTALL/#next-steps","title":"Next Steps","text":"<ul> <li>Review the OPERATIONS runbook.</li> <li>Explore module guides in <code>docs/modules/*</code> with <code>mkdocs serve</code> for live previews.</li> </ul>"},{"location":"OPERATIONS/","title":"OPERATIONS","text":"<p>Steady hands for living systems.</p>"},{"location":"OPERATIONS/#runbook-overview","title":"Runbook Overview","text":"<p>This playbook coordinates day-two operations across BLUX modules. Every command references the unified <code>bluxq</code> CLI.</p>"},{"location":"OPERATIONS/#daily-rituals","title":"Daily Rituals","text":"<ul> <li><code>bluxq status</code> \u2014 summarize health from Lite, Guard, Commander.</li> <li><code>bluxq guard audit --tail 100</code> \u2014 stream the latest policy decisions.</li> <li><code>bluxq doctrine pulse</code> \u2014 verify doctrine digests align with expectations.</li> <li><code>bluxq reg keys --list</code> \u2014 confirm signing keys remain valid.</li> </ul>"},{"location":"OPERATIONS/#weekly-cadence","title":"Weekly Cadence","text":"<ol> <li>Rotate non-production credentials through BLUX Reg.</li> <li>Review Guard telemetry anomalies in Commander dashboards.</li> <li>Rehearse failover using Lite orchestrated blue/green scenario packs.</li> <li>Run <code>mkdocs build</code> to ensure documentation stays synchronized.</li> </ol>"},{"location":"OPERATIONS/#incident-response","title":"Incident Response","text":"Phase Action Command Detect Configure Commander alerts to page <code>#blux-ops</code> when Guard blocks critical paths. <code>bluxq guard alerts watch</code> Triage Capture the failing workflow with Lite. <code>bluxq lite capture --run &lt;id&gt;</code> Contain Freeze doctrine changes and lock Reg issuance. <code>bluxq doctrine lock --reason incident-&lt;id&gt;</code> Eradicate Patch modules or revert workflow definitions. <code>bluxq lite rollout --rollback &lt;id&gt;</code> Recover Validate SLOs via Commander, resume doctrine updates. <code>bluxq doctrine unlock</code> Learn Publish post-incident review to Governance log. <code>bluxq commander pir create --source incident-&lt;id&gt;</code>"},{"location":"OPERATIONS/#maintenance-windows","title":"Maintenance Windows","text":"<ul> <li>Schedule using Lite runbooks: <code>bluxq lite window create --module commander --duration 30m</code>.</li> <li>Notify operators via Commander broadcast API.</li> </ul>"},{"location":"OPERATIONS/#telemetry-logging","title":"Telemetry &amp; Logging","text":"<ul> <li>All modules ship OpenTelemetry traces to the configured endpoint in <code>config/telemetry.yaml</code>.</li> <li>Use <code>bluxq quantum plugins</code> to confirm telemetry exporters are enabled.</li> <li>For PowerShell automation, wrap commands with <code>pwsh -Command</code> for WSL bridging.</li> </ul>"},{"location":"OPERATIONS/#backup-restore","title":"Backup &amp; Restore","text":"<pre><code># Snapshot doctrine and registry\nbluxq doctrine export --output backups/doctrine-$(date +%F).yaml\nbluxq reg export --output backups/reg-$(date +%F).json\n\n# Restore on demand\nbluxq doctrine import --file backups/doctrine-2024-01-01.yaml\nbluxq reg import --file backups/reg-2024-01-01.json\n</code></pre>"},{"location":"OPERATIONS/#deployment-pipelines","title":"Deployment Pipelines","text":"<ul> <li>Use GitHub Actions <code>docs.yml</code> for documentation and <code>ci.yml</code> for services.</li> <li>Deploy Commander via container registries described in module docs.</li> </ul>"},{"location":"OPERATIONS/#slos-slas","title":"SLOs &amp; SLAs","text":"<ul> <li>Availability target: 99.5% for Lite &amp; Guard; 99.9% for Reg.</li> <li>Recovery Time Objective: &lt; 10 minutes for CLI operations, &lt; 30 minutes for UI.</li> <li>Recovery Point Objective: &lt; 5 minutes using Reg continuous signing logs.</li> </ul>"},{"location":"OPERATIONS/#contact","title":"Contact","text":"<p>Operational support is handled via SUPPORT. Escalate to Governance when incidents cross policy thresholds.</p>"},{"location":"PRIVACY/","title":"PRIVACY","text":"<p>Telemetry with consent, intelligence with discretion.</p>"},{"location":"PRIVACY/#scope","title":"Scope","text":"<p>BLUX collects only the telemetry required for safe operation and doctrinal accountability. Personal data stays at the edge unless explicitly ingested for orchestration tasks.</p>"},{"location":"PRIVACY/#data-classes","title":"Data Classes","text":"Class Description Retention Control Operational Telemetry Metrics, traces, audits 30 days (configurable) <code>config/telemetry.yaml</code> Doctrine Manifests Policy definitions, approvals Versioned indefinitely <code>bluxq doctrine export</code> Identity Artifacts Keys, certificates Rotated per policy <code>bluxq reg keys rotate</code> User Preferences Commander dashboard settings 90 days Commander profile settings"},{"location":"PRIVACY/#consent-transparency","title":"Consent &amp; Transparency","text":"<ul> <li>Operators can inspect telemetry contracts using <code>bluxq quantum privacy --module &lt;name&gt;</code>.</li> <li>Commander surfaces data usage dashboards aligned with Doctrine privacy tenets.</li> </ul>"},{"location":"PRIVACY/#data-residency","title":"Data Residency","text":"<ul> <li>Configure storage endpoints per region using <code>config/privacy.yaml</code>.</li> <li>Support multi-region replication with Reg-signed audit trails.</li> </ul>"},{"location":"PRIVACY/#access-controls","title":"Access Controls","text":"<ul> <li>Reg issues scoped capabilities for accessing privacy-protected datasets.</li> <li>Guard enforces classification-level policies before releasing telemetry.</li> </ul>"},{"location":"PRIVACY/#data-subject-requests","title":"Data Subject Requests","text":"<ol> <li>Authenticate requester via Reg.</li> <li>Run <code>bluxq commander dsar export --subject &lt;id&gt;</code>.</li> <li>Review output for Doctrine exemptions.</li> <li>Deliver encrypted bundle via approved channel.</li> </ol>"},{"location":"PRIVACY/#anonymization-redaction","title":"Anonymization &amp; Redaction","text":"<ul> <li>Use Lite data pipelines to redact PII before telemetry leaves secure zones.</li> <li>Doctrine enforces non-overridable redaction policies for sensitive fields.</li> </ul>"},{"location":"PRIVACY/#auditability","title":"Auditability","text":"<ul> <li><code>bluxq privacy audit</code> exports a signed ledger of data access events.</li> <li>Align with COMPLIANCE obligations.</li> </ul>"},{"location":"PRIVACY/#links","title":"Links","text":"<ul> <li>SECURITY</li> <li>CONFIGURATION</li> </ul>"},{"location":"ROADMAP/","title":"ROADMAP","text":"<p>Charting the next arcs of the BLUX constellation.</p>"},{"location":"ROADMAP/#horizon-1-operational-harmony-0-3-months","title":"Horizon 1 \u2014 Operational Harmony (0-3 months)","text":"<ul> <li>Stabilize <code>bluxq</code> plugin lifecycle and publish module-specific command packs.</li> <li>Deliver Guard developer cockpit V2 with terminal shell integration.</li> <li>Release Commander dashboard templates for SRE, Governance, and Privacy.</li> <li>Finalize Reg automated key rotation APIs.</li> </ul>"},{"location":"ROADMAP/#horizon-2-predictive-insight-3-6-months","title":"Horizon 2 \u2014 Predictive Insight (3-6 months)","text":"<ul> <li>Embed cA advisory loops directly into Lite workflows.</li> <li>Provide doctrine simulation mode for change rehearsal.</li> <li>Expand telemetry schema to include privacy classification tags.</li> <li>Publish MkDocs-generated site to GitHub Pages with automation gates.</li> </ul>"},{"location":"ROADMAP/#horizon-3-autonomous-trust-6-12-months","title":"Horizon 3 \u2014 Autonomous Trust (6-12 months)","text":"<ul> <li>Launch autonomous stability drills orchestrated by Lite with Guard oversight.</li> <li>Introduce Reg attestations consumable by third-party auditors.</li> <li>Deliver Commander multi-tenant control plane with delegated administration.</li> <li>Release Doctrine graph analytics for ethics drift detection.</li> </ul>"},{"location":"ROADMAP/#beyond-research-initiatives","title":"Beyond \u2014 Research Initiatives","text":"<ul> <li>Quantum-safe key experiments within BLUX Reg.</li> <li>Adaptive doctrine derived from lived operational data.</li> <li>Human-in-the-loop simulation suites blending Commander UI and bluxq.</li> </ul>"},{"location":"ROADMAP/#dependencies-milestones","title":"Dependencies &amp; Milestones","text":"Milestone Dependency Target MkDocs Publication docs automation scripts Month 1 Guard V2 cockpit Stability mode tuning Month 2 Doctrine simulation Telemetry classification Month 4 Multi-tenant Commander Reg delegated keys Month 6"},{"location":"ROADMAP/#alignment","title":"Alignment","text":"<ul> <li>Each milestone must cite Doctrine principles in design docs.</li> <li>Governance reviews progress quarterly and updates this roadmap accordingly.</li> </ul>"},{"location":"ROADMAP/#references","title":"References","text":"<ul> <li>VISION</li> <li>ARCHITECTURE</li> <li>Root ROADMAP for legacy milestones.</li> </ul>"},{"location":"SECURITY/","title":"SECURITY","text":"<p>Trust is engineered, not assumed.</p>"},{"location":"SECURITY/#threat-model","title":"Threat Model","text":"Layer Threats Mitigations Identity (BLUX Reg) Key theft, impersonation Hardware-backed signing, short-lived capability tokens, audit log replication Policy (BLUX Doctrine) Unauthorized doctrine change, drift Multi-signer approvals, doctrine lock, checksum verification via <code>bluxq doctrine pulse</code> Execution (BLUX Lite) Workflow tampering, privilege escalation Guard interceptors, sandboxed runners, signed workflow manifests Advisory (BLUX cA) Prompt injection, hallucinated actions Doctrine-aligned reflection checks, Guard gating, telemetry scoring Surface (Commander &amp; bluxq) Session hijack, CLI misuse Mutual TLS, device binding, command recording"},{"location":"SECURITY/#defensive-posture","title":"Defensive Posture","text":"<ul> <li>Zero Trust \u2014 Each module authenticates via BLUX Reg issued identities.</li> <li>Immutable Telemetry \u2014 Guard notarizes event logs; Doctrine cross-checks for policy compliance.</li> <li>Secure Defaults \u2014 Services start in stability mode with limited automation until doctrine approves expansion.</li> </ul>"},{"location":"SECURITY/#stability-modes","title":"Stability Modes","text":"Mode Description Activation Observation Read-only posture capturing telemetry <code>bluxq guard mode set observation</code> Guided Execute only doctrine-approved playbooks <code>bluxq lite mode set guided</code> Autonomous Full automation with continuous guardrails <code>bluxq lite mode set autonomous</code> (requires governance approval)"},{"location":"SECURITY/#telemetry","title":"Telemetry","text":"<ul> <li>Use <code>config/telemetry.yaml</code> to configure exporters (OTLP/HTTP, Kafka, Filesystem).</li> <li>All logs include doctrine digest and capability fingerprint.</li> </ul>"},{"location":"SECURITY/#incident-reporting","title":"Incident Reporting","text":"<ul> <li>Report vulnerabilities via SECURITY.md.</li> <li>Use <code>bluxq guard incident report --source &lt;module&gt;</code> to file internal tickets.</li> </ul>"},{"location":"SECURITY/#secure-development-lifecycle","title":"Secure Development Lifecycle","text":"<ol> <li>Design review referencing this document and module-specific security guides.</li> <li>Implementation must include Guard policy updates and Doctrine alignment tests.</li> <li>Deployment requires Reg-signed release manifests.</li> <li>Post-release monitoring via Commander dashboards.</li> </ol>"},{"location":"SECURITY/#dependencies","title":"Dependencies","text":"<p>Run <code>pip install -r requirements-security.txt</code> (if present) to audit dependencies. Integrate results into <code>security.yml</code> workflow.</p>"},{"location":"SECURITY/#references","title":"References","text":"<ul> <li>BLUX Guard Security Guide</li> <li>BLUX Doctrine Policy Reference</li> <li>PRIVACY</li> </ul>"},{"location":"SUPPORT/","title":"SUPPORT","text":"<p>Operators are never left alone in the dark.</p>"},{"location":"SUPPORT/#channels","title":"Channels","text":"Channel Purpose SLA Commander Helpdesk Day-to-day assistance, feature requests 1 business day <code>#blux-ops</code> (Chat) Operational incidents 15 minutes Email <code>support@outervoid.example</code> Account issues, access requests 1 business day GitHub Issues Bugs and enhancements 2 business days triage"},{"location":"SUPPORT/#support-tiers","title":"Support Tiers","text":"<ol> <li>Tier 0 \u2014 Self-service via documentation and Commander knowledge base.</li> <li>Tier 1 \u2014 Support agents using bluxq guided scripts.</li> <li>Tier 2 \u2014 Module maintainers engaging for complex troubleshooting.</li> <li>Tier 3 \u2014 Ecosystem Steward and Doctrine Custodian for policy-impacting events.</li> </ol>"},{"location":"SUPPORT/#required-information","title":"Required Information","text":"<ul> <li><code>bluxq status --format json</code> output.</li> <li>Doctrine digest: <code>bluxq doctrine pulse --digest</code>.</li> <li>Config profile in use (<code>BLUX_ENV</code>).</li> <li>Commander incident link if available.</li> </ul>"},{"location":"SUPPORT/#escalation-ladder","title":"Escalation Ladder","text":"<ol> <li>Tier 1 engages Guard Sentinels for security events.</li> <li>Tier 2 loops in module maintainers.</li> <li>Tier 3 notifies Governance council.</li> </ol>"},{"location":"SUPPORT/#maintenance-notifications","title":"Maintenance Notifications","text":"<ul> <li>Posted in Commander operations board.</li> <li>Mirror to GitHub Discussions with timeline and rollback steps.</li> </ul>"},{"location":"SUPPORT/#knowledge-base","title":"Knowledge Base","text":"<ul> <li>Regularly updated by Support with lessons learned from TROUBLESHOOTING.</li> </ul>"},{"location":"SUPPORT/#feedback","title":"Feedback","text":"<p>Submit satisfaction surveys via Commander after ticket resolution; responses inform ROADMAP prioritization.</p>"},{"location":"TROUBLESHOOTING/","title":"TROUBLESHOOTING","text":"<p>When the stars flicker, recalibrate with calm.</p>"},{"location":"TROUBLESHOOTING/#quick-diagnostics","title":"Quick Diagnostics","text":"Symptom Check Remedy <code>bluxq</code> command hangs Network path to modules <code>bluxq quantum ping</code> or <code>pwsh -Command \"bluxq quantum ping\"</code> Guard blocks deploy Doctrine mismatch <code>bluxq doctrine diff --run &lt;id&gt;</code> and request approval Commander UI blank API gateway unreachable <code>bluxq commander status</code> and check <code>config/compose/ui.yml</code> Reg key errors Expired certificates <code>bluxq reg keys rotate</code> and verify system clock Lite workflows stuck Pending Guard review <code>bluxq lite queue list --pending</code>"},{"location":"TROUBLESHOOTING/#platform-notes","title":"Platform Notes","text":""},{"location":"TROUBLESHOOTING/#linux","title":"Linux","text":"<ul> <li>Ensure Docker daemon is running and user is part of <code>docker</code> group.</li> <li>Use <code>journalctl -u blux-*</code> for systemd managed services.</li> </ul>"},{"location":"TROUBLESHOOTING/#macos","title":"macOS","text":"<ul> <li>Grant Full Disk Access to terminal if Guard file watchers require it.</li> <li>Restart Docker Desktop after kernel updates.</li> </ul>"},{"location":"TROUBLESHOOTING/#windows-wsl2","title":"Windows / WSL2","text":"<ul> <li>Run CLI commands inside WSL for consistent paths.</li> <li>Use PowerShell wrappers to interact with Windows services.</li> </ul>"},{"location":"TROUBLESHOOTING/#cli-debugging","title":"CLI Debugging","text":"<pre><code># Enable verbose logging\nBLUX_LOG_LEVEL=debug bluxq lite status\n\n# Trace HTTP calls\nbluxq commander status --trace\n</code></pre>"},{"location":"TROUBLESHOOTING/#telemetry-verification","title":"Telemetry Verification","text":"<pre><code># Confirm metrics export\ngrep exporter config/telemetry.yaml\nbluxq quantum telemetry check\n</code></pre>"},{"location":"TROUBLESHOOTING/#documentation-sync-issues","title":"Documentation Sync Issues","text":"<ul> <li>Run <code>python scripts/scan_subrepos.py</code> to regenerate module docs.</li> <li>Rebuild README tree with <code>python scripts/update_readme_filetree.py</code>.</li> <li>Re-render docs index via <code>python scripts/render_index_from_readme.py</code>.</li> </ul>"},{"location":"TROUBLESHOOTING/#link-warnings","title":"Link Warnings","text":"<ul> <li>Execute <code>python scripts/lint_links.py</code> to review warnings.</li> <li>Update relative paths or add anchors as needed.</li> </ul>"},{"location":"TROUBLESHOOTING/#support-escalation","title":"Support Escalation","text":"<p>Consult SUPPORT for contact paths. Provide command output, configuration snippets, and doctrine digests when escalating.</p>"},{"location":"VISION/","title":"VISION","text":"<p>We build wings for sentience and safety, never walls.</p>"},{"location":"VISION/#purpose","title":"Purpose","text":"<p>The BLUX Ecosystem exists to harmonize autonomous intelligence with human intention. Each module is a chamber in the same observatory, tuned to reflect doctrine, telemetry, and trust at enterprise scale. The vision is to deliver adaptive intelligence that never compromises auditability, ethical grounding, or operator command.</p>"},{"location":"VISION/#guiding-stars","title":"Guiding Stars","text":"<ul> <li>Doctrine before drift \u2014 the BLUX Doctrine defines the moral spine for every automation.</li> <li>Unified orchestration \u2014 <code>bluxq</code> is the single, composable CLI front that binds runtime, advisory, and protection tasks.</li> <li>Observable by design \u2014 every signal is traceable, every decision can be questioned, and reversibility is the default.</li> <li>Distributed resilience \u2014 modules ship independently yet coordinate through shared schemas and capability contracts.</li> </ul>"},{"location":"VISION/#outcomes-we-target","title":"Outcomes We Target","text":"<ol> <li>Trusted Autonomy: Operators can grant bounded authority to BLUX modules without surrendering oversight.</li> <li>Elastic Governance: Policies adjust to context through Doctrine feedback loops instead of static rules.</li> <li>Composable Intelligence: Advisory, orchestration, and enforcement flows can be assembled for each enterprise theatre.</li> <li>Sustainable Velocity: Change is rehearsed, simulated, and deployed with full audit trails and recovery scripts.</li> </ol>"},{"location":"VISION/#alignment-with-doctrine","title":"Alignment with Doctrine","text":"<ul> <li>Reflection over Reaction \u2014 instrumentation and simulation precede automation.</li> <li>Coordination over Concentration \u2014 multi-module playbooks prefer collaborative execution.</li> <li>Coherence over Complexity \u2014 documentation, automation, and architecture evolve together.</li> <li>Principles over Preferences \u2014 when trade-offs arise, the doctrine file ruleset prevails.</li> </ul>"},{"location":"VISION/#looking-ahead","title":"Looking Ahead","text":"<p>The roadmap envisions: - Autonomous resilience drills orchestrated by BLUX Lite with Guard and Doctrine in the loop. - Predictive advisory services from BLUX cA infused into Commander dashboards. - Quantum CLI plugins that generate per-tenant command packs based on telemetry trends. - Regulatory attestation packs generated from BLUX Reg signatures and Guard compliance streams.</p>"},{"location":"VISION/#measuring-progress","title":"Measuring Progress","text":"<p>Success is measured by: - Mean time to comprehension \u2014 how fast a new operator understands system posture. - Mean time to override \u2014 how fast governance can pause or reconfigure automation. - Compliance drift delta \u2014 how quickly the doctrine catches and corrects misalignment. - Human trust indices \u2014 regular operator surveys mapped to operational metrics.</p>"},{"location":"VISION/#stewardship","title":"Stewardship","text":"<p>The ecosystem is curated by the BLUX Governance Council with rotating maintainers for each module. Every quarterly cadence reviews doctrine alignment, reliability reports, and customer adoption metrics.</p>"},{"location":"VISION/#links","title":"Links","text":"<ul> <li>ROADMAP</li> <li>GOVERNANCE</li> <li>BLUX Doctrine Module</li> </ul>"},{"location":"api-gateway/","title":"BLUX API Gateway","text":""},{"location":"api-gateway/#overview","title":"Overview","text":"<p>The BLUX Ecosystem provides unified API access through a gateway pattern, offering consistent authentication, rate limiting, and observability across all services.</p>"},{"location":"api-gateway/#base-urls","title":"Base URLs","text":"Environment Base URL Description Development <code>http://localhost:8080</code> Local development Staging <code>https://staging.api.blux.example</code> Pre-production testing Production <code>https://api.blux.example</code> Production services"},{"location":"api-gateway/#authentication","title":"Authentication","text":""},{"location":"api-gateway/#service-to-service-mtls","title":"Service-to-Service (mTLS)","text":"<pre><code># Using client certificates\ncurl --cert client.crt --key client.key \\\n  https://api.blux.example/v1/tasks\n</code></pre> <p>JWT Tokens</p> <pre><code># Using bearer tokens\ncurl -H \"Authorization: Bearer $BLUX_TOKEN\" \\\n  https://api.blux.example/v1/tasks\n</code></pre> <p>Token Acquisition</p> <pre><code>POST /v1/auth/token\nContent-Type: application/json\n\n{\n  \"grant_type\": \"client_credentials\",\n  \"client_id\": \"service-name\",\n  \"client_secret\": \"***\"\n}\n</code></pre> <p>Response:</p> <pre><code>{\n  \"access_token\": \"eyJ...\",\n  \"token_type\": \"Bearer\",\n  \"expires_in\": 3600,\n  \"scope\": \"tasks:read tasks:write\"\n}\n</code></pre> <p>Core APIs</p> <p>Tasks API</p> <p>Create Task</p> <pre><code>POST /v1/tasks\nContent-Type: application/json\nAuthorization: Bearer $TOKEN\n\n{\n  \"type\": \"data_analysis\",\n  \"context\": {\n    \"user_id\": \"user123\",\n    \"environment\": \"production\"\n  },\n  \"payload\": {\n    \"operation\": \"analyze\",\n    \"data_references\": [\"ref://dataset/1\"]\n  }\n}\n</code></pre> <p>Response:</p> <pre><code>{\n  \"task_id\": \"task_abc123\",\n  \"status\": \"accepted\",\n  \"audit_id\": \"aud_xyz789\",\n  \"estimated_completion\": \"2025-10-20T11:00:00Z\"\n}\n</code></pre> <p>Get Task Status</p> <pre><code>GET /v1/tasks/{task_id}\nAuthorization: Bearer $TOKEN\n</code></pre> <p>Response:</p> <pre><code>{\n  \"task_id\": \"task_abc123\",\n  \"status\": \"completed\",\n  \"result\": {\n    \"analysis_complete\": true,\n    \"insights_count\": 42\n  },\n  \"audit_trail\": [\"aud_xyz789\", \"aud_abc456\"]\n}\n</code></pre> <p>Audit API</p> <p>Query Audit Trail</p> <pre><code>GET /v1/audit?service=blux-lite&amp;operation=task.execute&amp;since=2025-10-20T00:00:00Z\nAuthorization: Bearer $TOKEN\n</code></pre> <p>Response:</p> <pre><code>{\n  \"entries\": [\n    {\n      \"audit_id\": \"aud_xyz789\",\n      \"timestamp\": \"2025-10-20T10:30:00Z\",\n      \"service\": \"blux-lite\",\n      \"operation\": \"task.execute\",\n      \"identity\": \"user:alice\",\n      \"signature\": \"es512-...\"\n    }\n  ],\n  \"next_page_token\": \"abc123\"\n}\n</code></pre> <p>Identity API</p> <p>Validate Identity</p> <pre><code>POST /v1/identities/validate\nContent-Type: application/json\n\n{\n  \"token\": \"eyJ...\",\n  \"required_scope\": [\"tasks:read\"]\n}\n</code></pre> <p>Response:</p> <pre><code>{\n  \"valid\": true,\n  \"identity\": \"user:alice\",\n  \"scopes\": [\"tasks:read\", \"tasks:write\"],\n  \"expires_at\": \"2025-10-20T11:30:00Z\"\n}\n</code></pre> <p>Event Streaming</p> <p>WebSocket Connection</p> <pre><code>const ws = new WebSocket('wss://api.blux.example/v1/events');\n\nws.onmessage = (event) =&gt; {\n  const message = JSON.parse(event.data);\n  console.log('Event received:', message);\n};\n\n// Subscribe to events\nws.send(JSON.stringify({\n  type: 'subscribe',\n  channels: ['task_updates', 'audit_events']\n}));\n</code></pre> <p>Server-Sent Events</p> <pre><code>GET /v1/events\nAccept: text/event-stream\nAuthorization: Bearer $TOKEN\n</code></pre> <p>Rate Limiting</p> <p>\u00b7 Per service: 1000 requests/minute \u00b7 Per user: 100 requests/minute \u00b7 Burst capacity: 50 requests/second</p> <p>Headers included in responses:</p> <pre><code>X-RateLimit-Limit: 1000\nX-RateLimit-Remaining: 999\nX-RateLimit-Reset: 1600000000\n</code></pre> <p>Error Handling</p> <p>Standard Error Response</p> <pre><code>{\n  \"error\": {\n    \"code\": \"RATE_LIMIT_EXCEEDED\",\n    \"message\": \"Rate limit exceeded\",\n    \"details\": {\n      \"limit\": 1000,\n      \"reset_in\": 60\n    },\n    \"audit_id\": \"aud_err_123\",\n    \"timestamp\": \"2025-10-20T10:30:00Z\"\n  }\n}\n</code></pre> <p>Common Error Codes</p> <p>Code HTTP Status Description UNAUTHORIZED 401 Authentication required FORBIDDEN 403 Insufficient permissions RATE_LIMIT_EXCEEDED 429 Too many requests VALIDATION_FAILED 400 Request validation failed SERVICE_UNAVAILABLE 503 Backend service unavailable</p> <p>SDKs</p> <p>Python</p> <pre><code>from blux_sdk import BLUXClient\n\nclient = BLUXClient(\n    base_url=\"https://api.blux.example\",\n    token=os.getenv('BLUX_TOKEN')\n)\n\ntask = client.tasks.create(\n    type=\"data_analysis\",\n    context={\"user_id\": \"alice\"}\n)\n</code></pre> <p>JavaScript</p> <pre><code>import { BLUXClient } from '@blux/sdk';\n\nconst client = new BLUXClient({\n  baseURL: 'https://api.blux.example',\n  token: process.env.BLUX_TOKEN\n});\n\nconst task = await client.tasks.create({\n  type: 'data_analysis',\n  context: { userId: 'alice' }\n});\n</code></pre> <p>Testing</p> <p>Mock Server</p> <pre><code>from blux_sdk.testing import MockBLUXServer\n\nwith MockBLUXServer() as server:\n    client = BLUXClient(base_url=server.url)\n    # Test with mock responses\n</code></pre> <p>Integration Testing</p> <pre><code># Use test token\nexport BLUX_TOKEN=test_token_123\n\n# Run against test environment\npytest tests/integration/\n</code></pre> <p>Monitoring</p> <p>Health Check</p> <pre><code>GET /health\n</code></pre> <p>Response:</p> <pre><code>{\n  \"status\": \"healthy\",\n  \"services\": {\n    \"blux-lite\": \"healthy\",\n    \"blux-guard\": \"healthy\",\n    \"blux-reg\": \"healthy\"\n  },\n  \"timestamp\": \"2025-10-20T10:30:00Z\"\n}\n</code></pre> <p>Metrics</p> <pre><code>GET /metrics\n</code></pre> <p>Prometheus format metrics for monitoring.</p> <p>Clear APIs enable clear coordination.  (( \u2022 ))</p>"},{"location":"governance/","title":"BLUX Governance","text":""},{"location":"governance/#overview","title":"Overview","text":"<p>BLUX follows a stewardship model with clear decision-making processes and community involvement. Our governance balances technical excellence with practical operation.</p>"},{"location":"governance/#decision-making-framework","title":"Decision-Making Framework","text":""},{"location":"governance/#principles-first-approach","title":"Principles-First Approach","text":"<p>All decisions are evaluated against BLUX core principles: 1. Reflection &gt; Reaction: Thoughtful consideration over quick fixes 2. Coordination &gt; Concentration: Collaborative effort over individual brilliance 3. Coherence &gt; Complexity: Simple, elegant solutions over complex ones 4. Principles &gt; Preferences: Foundational truths over personal tastes</p>"},{"location":"governance/#decision-types","title":"Decision Types","text":"Type Description Decision Maker Process Technical Code, architecture, implementation Technical Stewards RFC \u2192 Implementation \u2192 Review Security Vulnerabilities, security changes Security Team Immediate action \u2192 Post-mortem Community Conduct, membership, events Community Stewards Discussion \u2192 Consensus \u2192 Action Strategic Direction, partnerships, funding Project Lead Advisory input \u2192 Decision"},{"location":"governance/#roles-responsibilities","title":"Roles &amp; Responsibilities","text":""},{"location":"governance/#project-lead","title":"Project Lead","text":"<ul> <li>Final decision authority on strategic matters</li> <li>Resource allocation and funding decisions</li> <li>Community representation and advocacy</li> </ul>"},{"location":"governance/#technical-stewards","title":"Technical Stewards","text":"<ul> <li>Architecture decisions and technical direction</li> <li>Code review standards and quality enforcement  </li> <li>Release management and versioning</li> </ul>"},{"location":"governance/#security-team","title":"Security Team","text":"<ul> <li>Security vulnerability management</li> <li>Security review and approval</li> <li>Incident response coordination</li> </ul>"},{"location":"governance/#community-stewards","title":"Community Stewards","text":"<ul> <li>Community health and conduct</li> <li>Contributor onboarding and support</li> <li>Event coordination and outreach</li> </ul>"},{"location":"governance/#contributors","title":"Contributors","text":"<ul> <li>Code and documentation contributions</li> <li>Issue triage and bug reports</li> <li>Community support and knowledge sharing</li> </ul>"},{"location":"governance/#contribution-process","title":"Contribution Process","text":""},{"location":"governance/#1-proposal-phase","title":"1. Proposal Phase","text":"<pre><code>graph LR\n    A[Identify Need] --&gt; B[Draft Proposal]\n    B --&gt; C[Community Feedback]\n    C --&gt; D[Revise Proposal]\n    D --&gt; E[Steward Review]\n</code></pre> <ol> <li>Implementation Phase</li> </ol> <pre><code>graph LR\n    A[Approved Proposal] --&gt; B[Anchor-Based Development]\n    B --&gt; C[Testing &amp; Validation]\n    C --&gt; D[Security Review]\n    D --&gt; E[Merge &amp; Release]\n</code></pre> <ol> <li>Maintenance Phase</li> </ol> <pre><code>graph LR\n    A[Released] --&gt; B[Monitoring]\n    B --&gt; C[Feedback Collection]\n    C --&gt; D[Continuous Improvement]\n</code></pre> <p>Communication Channels</p> <p>Primary Channels</p> <p>\u00b7 GitHub Issues: Feature requests, bug reports \u00b7 GitHub Discussions: Questions, ideas, community chat \u00b7 Pull Requests: Code review and collaboration \u00b7 Security Email: security@outer-void.example</p> <p>Decision Records</p> <p>\u00b7 Architectural Decisions: docs/decisions/architecture/ \u00b7 Technical Decisions: docs/decisions/technical/ \u00b7 Community Decisions: docs/decisions/community/</p> <p>Release Management</p> <p>Versioning Scheme</p> <p>\u00b7 Major: Breaking changes, new architecture \u00b7 Minor: New features, backward-compatible \u00b7 Patch: Bug fixes, security updates</p> <p>Release Cadence</p> <p>\u00b7 Patch releases: As needed for critical fixes \u00b7 Minor releases: Monthly feature releases \u00b7 Major releases: Quarterly or as significant changes accumulate</p> <p>Release Process</p> <ol> <li>Feature Freeze: No new features 1 week before release</li> <li>Testing Phase: Comprehensive testing across environments</li> <li>Security Audit: Final security review and sign-off</li> <li>Release Candidate: Community testing period</li> <li>Production Release: Official release with documentation</li> </ol> <p>Conflict Resolution</p> <p>Escalation Path</p> <ol> <li>Direct Discussion: Parties discuss directly</li> <li>Mediation: Community stewards facilitate discussion</li> <li>Steward Decision: Relevant stewards make binding decision</li> <li>Project Lead: Final appeal to project lead</li> </ol> <p>Code of Conduct Enforcement</p> <p>\u00b7 Minor issues: Private warning and education \u00b7 Repeated issues: Temporary suspension \u00b7 Serious violations: Permanent removal from community</p> <p>Financial Governance</p> <p>Funding Sources</p> <p>\u00b7 Grants: Research and development funding \u00b7 Sponsorships: Organizational support \u00b7 Donations: Community financial support</p> <p>Expense Management</p> <p>\u00b7 Infrastructure: Hosting, domains, services \u00b7 Development: Tools, libraries, resources \u00b7 Community: Events, swag, outreach</p> <p>Transparency</p> <p>\u00b7 Quarterly financial reports published \u00b7 Major expenses documented and justified \u00b7 Community input on budget allocation</p> <p>Success Metrics</p> <p>Technical Health</p> <p>\u00b7 Test coverage &gt; 90% \u00b7 Zero critical security vulnerabilities \u00b7 &lt; 30 minutes mean time to recovery \u00b7 99.9% service availability</p> <p>Community Health</p> <p>\u00b7 Growing contributor base \u00b7 Positive community sentiment \u00b7 Effective conflict resolution \u00b7 Diverse participation</p> <p>Adoption Impact</p> <p>\u00b7 Production deployments \u00b7 Positive user feedback \u00b7 Ecosystem growth \u00b7 Industry recognition</p> <p>Amendment Process</p> <p>This governance document can be amended by:</p> <ol> <li>Proposal: Community member submits amendment</li> <li>Discussion: 30-day community discussion period</li> <li>Voting: Majority approval from active contributors</li> <li>Implementation: Updated by project lead</li> </ol> <p>License &amp; Intellectual Property</p> <p>Code License</p> <p>\u00b7 All code under Apache 2.0 license \u00b7 Contributor License Agreement (CLA) required \u00b7 Patent protection provided by license</p> <p>Trademarks</p> <p>\u00b7 \"BLUX\" and related marks are project trademarks \u00b7 Community use encouraged with attribution \u00b7 Commercial use requires permission</p> <p>Good governance enables great work.  (( \u2022 ))</p> <p>Last Updated: 2025-10-20 Next Review: 2026-01-20</p>"},{"location":"links/","title":"Canonical Links","text":""},{"location":"links/#organization-hub","title":"Organization &amp; Hub","text":"<ul> <li>Organization: https://github.com/Outer-Void</li> <li>Ecosystem Hub: https://github.com/Outer-Void/blux-ecosystem</li> <li>Documentation: https://github.com/Outer-Void/blux-ecosystem/docs</li> </ul>"},{"location":"links/#core-services","title":"Core Services","text":"<ul> <li>Orchestrator (Lite): https://github.com/Outer-Void/blux-lite</li> <li>Conscious Layer (cA): https://github.com/Outer-Void/blux-ca  </li> <li>Security (Guard): https://github.com/Outer-Void/blux-guard</li> <li>Identity &amp; Keys (Reg): https://github.com/Outer-Void/blux-reg</li> </ul>"},{"location":"links/#interface-layers","title":"Interface Layers","text":"<ul> <li>CLI/TUI (Quantum): https://github.com/Outer-Void/blux-quantum</li> <li>Web UI (Commander): https://github.com/Outer-Void/blux-commander</li> </ul>"},{"location":"links/#development-resources","title":"Development Resources","text":"<ul> <li>Issue Tracker: https://github.com/Outer-Void/blux-ecosystem/issues</li> <li>Discussions: https://github.com/Outer-Void/blux-ecosystem/discussions</li> <li>Project Board: https://github.com/orgs/Outer-Void/projects/1</li> <li>CI/CD Status: https://github.com/Outer-Void/blux-ecosystem/actions</li> </ul>"},{"location":"links/#security","title":"Security","text":"<ul> <li>Security Policy: https://github.com/Outer-Void/blux-ecosystem/SECURITY.md</li> <li>Vulnerability Reporting: security@outer-void.example</li> <li>Security Advisories: https://github.com/Outer-Void/blux-ecosystem/security/advisories</li> </ul>"},{"location":"links/#community","title":"Community","text":"<ul> <li>Code of Conduct: https://github.com/Outer-Void/blux-ecosystem/CODE_OF_CONDUCT.md</li> <li>Contributing Guide: https://github.com/Outer-Void/blux-ecosystem/CONTRIBUTING.md</li> <li>Changelog: https://github.com/Outer-Void/blux-ecosystem/CHANGELOG.md</li> </ul>"},{"location":"links/#external-integrations","title":"External Integrations","text":"<ul> <li>Docker Hub: https://hub.docker.com/u/blux (planned)</li> <li>Package Registry: https://npmjs.com/package/@blux/sdk (planned)</li> <li>PyPI: https://pypi.org/project/blux-sdk/ (planned)</li> </ul>"},{"location":"links/#documentation","title":"Documentation","text":"<ul> <li>Architecture: https://github.com/Outer-Void/blux-ecosystem/ARCHITECTURE.md</li> <li>API Reference: https://github.com/Outer-Void/blux-ecosystem/docs/api-gateway.md</li> <li>Deployment Guide: https://github.com/Outer-Void/blux-ecosystem/docs/deployment/</li> <li>Developer Guide: https://github.com/Outer-Void/blux-ecosystem/DEVELOPER_GUIDE.md</li> </ul>"},{"location":"links/#status-monitoring","title":"Status &amp; Monitoring","text":"<ul> <li>Service Status: https://status.blux.example (planned)</li> <li>API Status: https://api-status.blux.example (planned)</li> <li>Uptime Monitoring: (to be configured)</li> </ul> <p>Links are the synapses of understanding.  (( \u2022 ))</p>"},{"location":"development/development/","title":"Development Deployment Guide","text":""},{"location":"development/development/#quick-start","title":"Quick Start","text":""},{"location":"development/development/#prerequisites","title":"Prerequisites","text":"<ul> <li>Docker and Docker Compose</li> <li>Python 3.9+ or Node.js 18+</li> <li>Git</li> </ul>"},{"location":"development/development/#one-command-setup","title":"One-Command Setup","text":"<pre><code>git clone https://github.com/Outer-Void/blux-ecosystem.git\ncd blux-ecosystem\n./scripts/bootstrap.sh\n</code></pre> <p>Manual Setup</p> <pre><code># Clone and setup\ngit clone https://github.com/Outer-Void/blux-ecosystem.git\ncd blux-ecosystem\n\n# Create Python virtual environment\npython -m venv .venv\nsource .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\n\n# Install dependencies\npip install -r requirements.txt\n\n# Setup development configuration\ncp .env.example .env\ncp config/development.yaml config/local.yaml\n\n# Make scripts executable\nchmod +x scripts/*.sh\n\n# Verify setup\n./scripts/health-check.sh\n</code></pre> <p>Development Architecture</p> <pre><code>graph TB\n    subgraph \"Development Stack\"\n        DB[SQLite Database]\n        Redis[Redis Cache]\n        Lite[blux-lite Dev]\n        Guard[blux-guard Dev]\n        Reg[blux-reg Dev]\n        CA[blux-cA Dev]\n    end\n\n    Lite --&gt; DB\n    Lite --&gt; Redis\n    Guard --&gt; Lite\n    Reg --&gt; Guard\n    CA --&gt; Lite\n</code></pre> <p>Service Configuration</p> <p>Development Environment Variables</p> <pre><code># .env\nBLUX_ENV=development\nBLUX_AUDIT_PATH=./audit\nBLUX_LOG_PATH=./logs\nBLUX_DATA_PATH=./data\n\n# Service endpoints\nBLUX_REG_HOST=localhost:50050\nBLUX_GUARD_HOST=localhost:50052\nBLUX_LITE_HOST=localhost:50051\nBLUX_CA_HOST=localhost:50053\n\n# Development features\nBLUX_DEV_MODE=true\nBLUX_ENABLE_DEBUG=true\n</code></pre> <p>Development Configuration</p> <pre><code># config/development.yaml\nenvironment: development\n\nlogging:\n  level: debug\n  format: pretty\n  file: logs/blux-dev.log\n\nsecurity:\n  require_authentication: false\n  sandbox_execution: false  # Disable for faster development\n  audit_all_operations: true\n\ndatabase:\n  url: sqlite:///./data/blux-dev.db\n  echo: true  # Log SQL queries\n\ncache:\n  url: redis://localhost:6379/0\n\nservices:\n  blux_reg:\n    host: localhost\n    port: 50050\n    debug: true\n\n  blux_guard:\n    host: localhost\n    port: 50052\n    debug: true\n</code></pre> <p>Running Services</p> <p>Using Docker Compose</p> <pre><code># Start all services\ndocker-compose -f docker-compose.dev.yml up -d\n\n# View logs\ndocker-compose -f docker-compose.dev.yml logs -f\n\n# Stop services\ndocker-compose -f docker-compose.dev.yml down\n</code></pre> <p>Manual Service Startup</p> <pre><code># Terminal 1 - Identity Service\ncd blux-reg\npython -m blux_reg --port 50050 --debug\n\n# Terminal 2 - Security Service  \ncd blux-guard\npython -m blux_guard --port 50052 --debug\n\n# Terminal 3 - Orchestrator\ncd blux-lite\npython -m blux_lite --port 50051 --debug\n\n# Terminal 4 - Conscious Layer\ncd blux-ca\npython -m blux_ca --port 50053 --debug\n</code></pre> <p>Development Tools</p> <p>Hot Reload Setup</p> <pre><code># Install development dependencies\npip install watchdog\n\n# Start with hot reload\npython -m watchdog observe . --recursive --command='pytest tests/ -x'\n</code></pre> <p>Debug Configuration</p> <pre><code># .vscode/launch.json\n{\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"name\": \"BLUX Lite Debug\",\n      \"type\": \"python\",\n      \"request\": \"launch\",\n      \"program\": \"-m\",\n      \"args\": [\"blux_lite\", \"--port\", \"50051\", \"--debug\"],\n      \"env\": {\"BLUX_ENV\": \"development\"}\n    }\n  ]\n}\n</code></pre> <p>Testing Setup</p> <pre><code># Run tests\npytest tests/ -v\n\n# Run with coverage\npytest --cov=blux_ecosystem tests/\n\n# Specific test categories\npytest tests/unit/ -v\npytest tests/integration/ -v\npytest tests/security/ -v\n</code></pre> <p>Development Workflow</p> <ol> <li>Environment Setup</li> </ol> <pre><code>./scripts/bootstrap.sh\n./scripts/health-check.sh\n</code></pre> <ol> <li>Development Cycle</li> </ol> <pre><code># Create backup\n./scripts/backup.sh --tag pre-feature-work\n\n# Find anchors to modify\n./scripts/anchor-list.sh\n\n# Make changes within anchors\n# ... edit code ...\n\n# Test changes\n./scripts/health-check.sh\npytest tests/ -x\n\n# Create patch\ngit add .\ngit diff --cached &gt; patches/$(date +%Y-%m-%d)-feature.patch\n</code></pre> <ol> <li>Integration Testing</li> </ol> <pre><code># Start test environment\ndocker-compose -f docker-compose.test.yml up -d\n\n# Run integration tests\npytest tests/integration/ -v\n\n# Test API endpoints\ncurl http://localhost:50051/health\n</code></pre> <p>Common Development Tasks</p> <p>Adding a New Service</p> <ol> <li>Create service directory structure</li> <li>Add to docker-compose.dev.yml</li> <li>Update service discovery configuration</li> <li>Add health check endpoints</li> <li>Update documentation</li> </ol> <p>Database Migrations</p> <pre><code># Generate migration\nalembic revision --autogenerate -m \"add_feature_x\"\n\n# Apply migration\nalembic upgrade head\n\n# Rollback migration\nalembic downgrade -1\n</code></pre> <p>API Development</p> <pre><code># Adding new API endpoint\n# ANCHOR: api_task_creation\n@app.post(\"/v1/tasks\")\nasync def create_task(task_request: TaskRequest):\n    # Validate request\n    await validate_request(task_request)\n\n    # Create audit entry\n    audit_id = await create_audit_entry(\"task.create\")\n\n    # Process task\n    result = await process_task(task_request)\n\n    return TaskResponse(\n        task_id=result.task_id,\n        audit_id=audit_id,\n        status=\"accepted\"\n    )\n# ANCHOR_END: api_task_creation\n</code></pre> <p>Debugging Tips</p> <p>Common Issues</p> <p>Service Connection Refused</p> <pre><code># Check if services are running\n./scripts/health-check.sh\n\n# Check service logs\ndocker-compose logs blux-lite\n</code></pre> <p>Database Issues</p> <pre><code># Reset development database\nrm -f data/blux-dev.db\nalembic upgrade head\n</code></pre> <p>Dependency Conflicts</p> <pre><code># Clear cache and reinstall\nrm -rf .venv\npython -m venv .venv\npip install -r requirements.txt\n</code></pre> <p>Performance Profiling</p> <pre><code>import cProfile\nimport pstats\n\ndef profile_function():\n    pr = cProfile.Profile()\n    pr.enable()\n\n    # Code to profile\n\n    pr.disable()\n    stats = pstats.Stats(pr)\n    stats.sort_stats('cumulative')\n    stats.print_stats(10)\n</code></pre> <p>Monitoring Development</p> <p>Health Dashboard</p> <pre><code># Start development dashboard\npython -m blux_commander --dev --port 3000\n</code></pre> <p>Access at: http://localhost:3000</p> <p>Log Monitoring</p> <pre><code># Tail all logs\ntail -f logs/*.log\n\n# Filter for errors\ngrep -r \"ERROR\" logs/\n\n# Structured log viewing\njq '.' logs/blux-dev.log | less\n</code></pre> <p>Metrics Collection</p> <pre><code># Start metrics server\npython -m blux_metrics --port 9090\n\n# View metrics\ncurl http://localhost:9090/metrics\n</code></pre> <p>Production Simulation</p> <p>Staging Environment</p> <pre><code># Use production-like configuration\ncp config/production.yaml config/staging.yaml\n\n# Update environment\nexport BLUX_ENV=staging\n\n# Run with production settings\n./scripts/bootstrap.sh --staging\n</code></pre> <p>Load Testing</p> <pre><code># Install load testing tools\npip install locust\n\n# Run load test\nlocust -f tests/load_test.py\n</code></pre> <p>Development is exploration with purpose.  (( \u2022 ))</p> <p>Next: Production Deployment Guide</p>"},{"location":"development/kubernetes/","title":"Kubernetes Deployment Guide","text":""},{"location":"development/kubernetes/#overview","title":"Overview","text":"<p>Complete guide for deploying BLUX Ecosystem on Kubernetes with production-grade configurations.</p>"},{"location":"development/kubernetes/#cluster-requirements","title":"Cluster Requirements","text":""},{"location":"development/kubernetes/#minimum-requirements","title":"Minimum Requirements","text":"<ul> <li>Kubernetes: 1.24+</li> <li>CNI Plugin: Calico, Cilium, or Weave</li> <li>Storage: CSI-compatible storage class</li> <li>Load Balancer: Cloud provider or MetalLB</li> </ul>"},{"location":"development/kubernetes/#recommended-setup","title":"Recommended Setup","text":"<ul> <li>Nodes: 3+ worker nodes</li> <li>CPU: 4+ cores per node</li> <li>Memory: 16GB+ RAM per node</li> <li>Storage: 100GB+ per node</li> </ul>"},{"location":"development/kubernetes/#namespace-setup","title":"Namespace Setup","text":"<pre><code># k8s/00-namespace.yaml\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: blux\n  labels:\n    name: blux\n    environment: production\n</code></pre> <p>Configuration Management</p> <p>ConfigMap for Environment</p> <pre><code># k8s/01-configmap.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: blux-config\n  namespace: blux\ndata:\n  environment: \"production\"\n  log-level: \"info\"\n  database-url: \"postgresql://blux-user:@blux-postgres:5432/blux\"\n  redis-url: \"redis://blux-redis:6379\"\n</code></pre> <p>Secrets Management</p> <pre><code># k8s/02-secrets.yaml\napiVersion: v1\nkind: Secret\nmetadata:\n  name: blux-secrets\n  namespace: blux\ntype: Opaque\ndata:\n  # Base64 encoded values\n  database-password: &lt;base64-encoded-password&gt;\n  jwt-secret: &lt;base64-encoded-secret&gt;\n  master-key: &lt;base64-encoded-key&gt;\n</code></pre> <p>Database Deployment</p> <p>PostgreSQL StatefulSet</p> <pre><code># k8s/10-postgresql.yaml\napiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  name: blux-postgres\n  namespace: blux\nspec:\n  serviceName: blux-postgres\n  replicas: 1\n  selector:\n    matchLabels:\n      app: blux-postgres\n  template:\n    metadata:\n      labels:\n        app: blux-postgres\n    spec:\n      containers:\n      - name: postgres\n        image: postgres:15\n        env:\n        - name: POSTGRES_DB\n          value: \"blux\"\n        - name: POSTGRES_USER\n          value: \"blux-user\"\n        - name: POSTGRES_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: blux-secrets\n              key: database-password\n        ports:\n        - containerPort: 5432\n        volumeMounts:\n        - name: postgres-data\n          mountPath: /var/lib/postgresql/data\n        resources:\n          requests:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n          limits:\n            memory: \"2Gi\"\n            cpu: \"1000m\"\n        livenessProbe:\n          exec:\n            command: [\"pg_isready\", \"-U\", \"blux-user\"]\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          exec:\n            command: [\"pg_isready\", \"-U\", \"blux-user\"]\n          initialDelaySeconds: 5\n          periodSeconds: 5\n  volumeClaimTemplates:\n  - metadata:\n      name: postgres-data\n    spec:\n      accessModes: [ \"ReadWriteOnce\" ]\n      storageClassName: \"fast-ssd\"\n      resources:\n        requests:\n          storage: \"50Gi\"\n</code></pre> <p>PostgreSQL Service</p> <pre><code># k8s/11-postgres-service.yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: blux-postgres\n  namespace: blux\nspec:\n  selector:\n    app: blux-postgres\n  ports:\n  - port: 5432\n    targetPort: 5432\n  clusterIP: None  # Headless service for StatefulSet\n</code></pre> <p>Redis Deployment</p> <p>Redis Deployment</p> <pre><code># k8s/20-redis.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: blux-redis\n  namespace: blux\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: blux-redis\n  template:\n    metadata:\n      labels:\n        app: blux-redis\n    spec:\n      containers:\n      - name: redis\n        image: redis:7-alpine\n        command: [\"redis-server\"]\n        args: [\"--appendonly\", \"yes\"]\n        ports:\n        - containerPort: 6379\n        volumeMounts:\n        - name: redis-data\n          mountPath: /data\n        resources:\n          requests:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n        livenessProbe:\n          exec:\n            command: [\"redis-cli\", \"ping\"]\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          exec:\n            command: [\"redis-cli\", \"ping\"]\n          initialDelaySeconds: 5\n          periodSeconds: 5\n      volumes:\n      - name: redis-data\n        persistentVolumeClaim:\n          claimName: redis-pvc\n---\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: redis-pvc\n  namespace: blux\nspec:\n  accessModes:\n    - ReadWriteOnce\n  storageClassName: fast-ssd\n  resources:\n    requests:\n      storage: \"10Gi\"\n</code></pre> <p>Redis Service</p> <pre><code># k8s/21-redis-service.yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: blux-redis\n  namespace: blux\nspec:\n  selector:\n    app: blux-redis\n  ports:\n  - port: 6379\n    targetPort: 6379\n</code></pre> <p>BLUX Services Deployment</p> <p>blux-reg Deployment</p> <pre><code># k8s/30-blux-reg.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: blux-reg\n  namespace: blux\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: blux-reg\n  template:\n    metadata:\n      labels:\n        app: blux-reg\n    spec:\n      containers:\n      - name: blux-reg\n        image: blux/reg:1.0.0\n        ports:\n        - containerPort: 8080\n        env:\n        - name: BLUX_ENV\n          valueFrom:\n            configMapKeyRef:\n              name: blux-config\n              key: environment\n        - name: DATABASE_URL\n          valueFrom:\n            configMapKeyRef:\n              name: blux-config\n              key: database-url\n        - name: JWT_SECRET\n          valueFrom:\n            secretKeyRef:\n              name: blux-secrets\n              key: jwt-secret\n        resources:\n          requests:\n            memory: \"256Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"512Mi\"\n            cpu: \"500m\"\n        livenessProbe:\n          httpGet:\n            path: /health\n            port: 8080\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          httpGet:\n            path: /ready\n            port: 8080\n          initialDelaySeconds: 5\n          periodSeconds: 5\n</code></pre> <p>blux-reg Service</p> <pre><code># k8s/31-blux-reg-service.yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: blux-reg\n  namespace: blux\nspec:\n  selector:\n    app: blux-reg\n  ports:\n  - port: 80\n    targetPort: 8080\n    name: http\n</code></pre> <p>blux-guard Deployment</p> <pre><code># k8s/40-blux-guard.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: blux-guard\n  namespace: blux\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: blux-guard\n  template:\n    metadata:\n      labels:\n        app: blux-guard\n    spec:\n      containers:\n      - name: blux-guard\n        image: blux/guard:1.0.0\n        ports:\n        - containerPort: 8080\n        env:\n        - name: BLUX_ENV\n          valueFrom:\n            configMapKeyRef:\n              name: blux-config\n              key: environment\n        - name: REDIS_URL\n          valueFrom:\n            configMapKeyRef:\n              name: blux-config\n              key: redis-url\n        - name: MASTER_KEY\n          valueFrom:\n            secretKeyRef:\n              name: blux-secrets\n              key: master-key\n        resources:\n          requests:\n            memory: \"512Mi\"\n            cpu: \"500m\"\n          limits:\n            memory: \"1Gi\"\n            cpu: \"1000m\"\n        livenessProbe:\n          httpGet:\n            path: /health\n            port: 8080\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          httpGet:\n            path: /ready\n            port: 8080\n          initialDelaySeconds: 5\n          periodSeconds: 5\n</code></pre> <p>blux-lite Deployment</p> <pre><code># k8s/50-blux-lite.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: blux-lite\n  namespace: blux\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: blux-lite\n  template:\n    metadata:\n      labels:\n        app: blux-lite\n    spec:\n      containers:\n      - name: blux-lite\n        image: blux/lite:1.0.0\n        ports:\n        - containerPort: 8080\n        env:\n        - name: BLUX_ENV\n          valueFrom:\n            configMapKeyRef:\n              name: blux-config\n              key: environment\n        - name: DATABASE_URL\n          valueFrom:\n            configMapKeyRef:\n              name: blux-config\n              key: database-url\n        - name: REDIS_URL\n          valueFrom:\n            configMapKeyRef:\n              name: blux-config\n              key: redis-url\n        - name: BLUX_REG_HOST\n          value: \"blux-reg\"\n        - name: BLUX_GUARD_HOST\n          value: \"blux-guard\"\n        resources:\n          requests:\n            memory: \"512Mi\"\n            cpu: \"500m\"\n          limits:\n            memory: \"1Gi\"\n            cpu: \"1000m\"\n        livenessProbe:\n          httpGet:\n            path: /health\n            port: 8080\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          httpGet:\n            path: /ready\n            port: 8080\n          initialDelaySeconds: 5\n          periodSeconds: 5\n</code></pre> <p>Ingress Configuration</p> <p>NGINX Ingress</p> <pre><code># k8s/60-ingress.yaml\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: blux-ingress\n  namespace: blux\n  annotations:\n    nginx.ingress.kubernetes.io/rewrite-target: /\n    nginx.ingress.kubernetes.io/ssl-redirect: \"true\"\n    cert-manager.io/cluster-issuer: \"letsencrypt-prod\"\nspec:\n  tls:\n  - hosts:\n    - lite.blux.example\n    - reg.blux.example\n    - guard.blux.example\n    secretName: blux-tls\n  rules:\n  - host: lite.blux.example\n    http:\n      paths:\n      - path: /\n        pathType: Prefix\n        backend:\n          service:\n            name: blux-lite\n            port:\n              number: 80\n  - host: reg.blux.example\n    http:\n      paths:\n      - path: /\n        pathType: Prefix\n        backend:\n          service:\n            name: blux-reg\n            port:\n              number: 80\n  - host: guard.blux.example\n    http:\n      paths:\n      - path: /\n        pathType: Prefix\n        backend:\n          service:\n            name: blux-guard\n            port:\n              number: 80\n</code></pre> <p>Network Policies</p> <p>Internal Communication</p> <pre><code># k8s/70-network-policies.yaml\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: blux-internal\n  namespace: blux\nspec:\n  podSelector:\n    matchLabels:\n      app: blux\n  policyTypes:\n  - Ingress\n  - Egress\n  ingress:\n  - from:\n    - podSelector:\n        matchLabels:\n          app: blux\n    ports:\n    - protocol: TCP\n      port: 8080\n  egress:\n  - to:\n    - podSelector:\n        matchLabels:\n          app: blux-postgres\n    ports:\n    - protocol: TCP\n      port: 5432\n  - to:\n    - podSelector:\n        matchLabels:\n          app: blux-redis\n    ports:\n    - protocol: TCP\n      port: 6379\n</code></pre> <p>Monitoring &amp; Logging</p> <p>ServiceMonitor for Prometheus</p> <pre><code># k8s/80-monitoring.yaml\napiVersion: monitoring.coreos.com/v1\nkind: ServiceMonitor\nmetadata:\n  name: blux-monitor\n  namespace: blux\nspec:\n  selector:\n    matchLabels:\n      app: blux\n  endpoints:\n  - port: http\n    interval: 30s\n    path: /metrics\n</code></pre> <p>Pod Disruption Budget</p> <pre><code># k8s/81-pdb.yaml\napiVersion: policy/v1\nkind: PodDisruptionBudget\nmetadata:\n  name: blux-lite-pdb\n  namespace: blux\nspec:\n  minAvailable: 2\n  selector:\n    matchLabels:\n      app: blux-lite\n</code></pre> <p>Deployment Scripts</p> <p>Apply All Manifests</p> <pre><code>#!/bin/bash\n# deploy.sh\n\necho \"Deploying BLUX Ecosystem to Kubernetes...\"\n\n# Apply namespace\nkubectl apply -f k8s/00-namespace.yaml\n\n# Apply configurations\nkubectl apply -f k8s/01-configmap.yaml\nkubectl apply -f k8s/02-secrets.yaml\n\n# Deploy databases\nkubectl apply -f k8s/10-postgresql.yaml\nkubectl apply -f k8s/11-postgres-service.yaml\nkubectl apply -f k8s/20-redis.yaml\nkubectl apply -f k8s/21-redis-service.yaml\n\n# Wait for databases\nkubectl wait --for=condition=ready pod -l app=blux-postgres -n blux --timeout=300s\nkubectl wait --for=condition=ready pod -l app=blux-redis -n blux --timeout=300s\n\n# Deploy BLUX services\nkubectl apply -f k8s/30-blux-reg.yaml\nkubectl apply -f k8s/31-blux-reg-service.yaml\nkubectl apply -f k8s/40-blux-guard.yaml\nkubectl apply -f k8s/41-blux-guard-service.yaml\nkubectl apply -f k8s/50-blux-lite.yaml\nkubectl apply -f k8s/51-blux-lite-service.yaml\n\n# Apply network policies and ingress\nkubectl apply -f k8s/70-network-policies.yaml\nkubectl apply -f k8s/60-ingress.yaml\n\n# Apply monitoring\nkubectl apply -f k8s/80-monitoring.yaml\nkubectl apply -f k8s/81-pdb.yaml\n\necho \"Deployment complete!\"\necho \"Check status with: kubectl get all -n blux\"\n</code></pre> <p>Health Check</p> <pre><code>#!/bin/bash\n# health-check.sh\n\necho \"Checking BLUX deployment health...\"\n\n# Check pods\nkubectl get pods -n blux\n\n# Check services\nkubectl get services -n blux\n\n# Check ingress\nkubectl get ingress -n blux\n\n# Check pod status\nkubectl wait --for=condition=ready pod -l app=blux -n blux --timeout=60s\n\n# Test service endpoints\nkubectl port-forward -n blux service/blux-lite 8080:80 &amp;\nsleep 5\ncurl -f http://localhost:8080/health\npkill -f \"kubectl port-forward\"\n\necho \"Health check complete!\"\n</code></pre> <p>Troubleshooting</p> <p>Common Issues</p> <p>Pod CrashLoopBackOff</p> <pre><code># Check pod logs\nkubectl logs -n blux deployment/blux-lite\n\n# Check events\nkubectl get events -n blux --sort-by=.lastTimestamp\n\n# Check resource limits\nkubectl describe pod -n blux -l app=blux-lite\n</code></pre> <p>Database Connection Issues</p> <pre><code># Check database connectivity\nkubectl exec -n blux deployment/blux-lite -- nc -zv blux-postgres 5432\n\n# Check database logs\nkubectl logs -n blux statefulset/blux-postgres\n</code></pre> <p>Ingress Issues</p> <pre><code># Check ingress status\nkubectl describe ingress -n blux blux-ingress\n\n# Check ingress controller logs\nkubectl logs -n ingress-nginx deployment/ingress-nginx-controller\n</code></pre> <p>Performance Optimization</p> <p>Horizontal Pod Autoscaling</p> <pre><code>apiVersion: autoscaling/v2\nkind: HorizontalPodAutoscaler\nmetadata:\n  name: blux-lite-hpa\n  namespace: blux\nspec:\n  scaleTargetRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: blux-lite\n  minReplicas: 2\n  maxReplicas: 10\n  metrics:\n  - type: Resource\n    resource:\n      name: cpu\n      target:\n        type: Utilization\n        averageUtilization: 70\n  - type: Resource\n    resource:\n      name: memory\n      target:\n        type: Utilization\n        averageUtilization: 80\n</code></pre> <p>Kubernetes turns infrastructure into code.  (( \u2022 ))</p>"},{"location":"development/production/","title":"Production Deployment Guide","text":""},{"location":"development/production/#overview","title":"Overview","text":"<p>This guide covers deploying BLUX Ecosystem in production environments with high availability, security, and performance requirements.</p>"},{"location":"development/production/#architecture","title":"Architecture","text":""},{"location":"development/production/#production-topology","title":"Production Topology","text":"<pre><code>graph TB\n    subgraph \"Load Balancer Layer\"\n        LB[Load Balancer]\n    end\n\n    subgraph \"Application Layer\"\n        Lite1[blux-lite 1]\n        Lite2[blux-lite 2]\n        Guard1[blux-guard 1]\n        Guard2[blux-guard 2]\n    end\n\n    subgraph \"Data Layer\"\n        DB[(PostgreSQL)]\n        Redis[(Redis Cluster)]\n        Audit[Audit Storage]\n    end\n\n    subgraph \"Identity Layer\"\n        Reg1[blux-reg 1]\n        Reg2[blux-reg 2]\n    end\n\n    LB --&gt; Lite1\n    LB --&gt; Lite2\n    Lite1 --&gt; Guard1\n    Lite2 --&gt; Guard2\n    Guard1 --&gt; Reg1\n    Guard2 --&gt; Reg2\n    Lite1 --&gt; DB\n    Lite2 --&gt; DB\n    Lite1 --&gt; Redis\n    Lite2 --&gt; Redis\n    Guard1 --&gt; Audit\n    Guard2 --&gt; Audit\n</code></pre> <p>Prerequisites</p> <p>Infrastructure Requirements</p> <p>\u00b7 Kubernetes cluster or Docker Swarm \u00b7 PostgreSQL 13+ database cluster \u00b7 Redis 6+ cluster for caching \u00b7 Object storage for audit trails (S3, GCS, etc.) \u00b7 Load balancer with SSL termination \u00b7 Monitoring stack (Prometheus, Grafana)</p> <p>Security Requirements</p> <p>\u00b7 TLS certificates for all endpoints \u00b7 Firewall rules limiting internal traffic \u00b7 Secret management (HashiCorp Vault, AWS Secrets Manager) \u00b7 Network policies for service isolation</p> <p>Configuration</p> <p>Production Environment</p> <pre><code># Environment variables\nexport BLUX_ENV=production\nexport BLUX_CLUSTER_ID=blux-prod-01\nexport BLUX_DEPLOYMENT_REGION=us-west-2\n\n# Database\nexport DATABASE_URL=postgresql://user:pass@db-host:5432/blux_prod\nexport REDIS_URL=redis://redis-host:6379/0\n\n# Security\nexport BLUX_MASTER_KEY=$(vault read -field=key secret/blux/master)\nexport JWT_SECRET_KEY=$(vault read -field=secret secret/blux/jwt)\n\n# Services\nexport BLUX_REG_HOST=reg.blux.example:443\nexport BLUX_GUARD_HOST=guard.blux.example:443\nexport BLUX_LITE_HOST=lite.blux.example:443\nexport BLUX_CA_HOST=ca.blux.example:443\n</code></pre> <p>Production Configuration</p> <pre><code># config/production.yaml\nenvironment: production\n\nlogging:\n  level: info\n  format: json\n  file: /var/log/blux/blux.log\n\nsecurity:\n  require_authentication: true\n  require_mtls: true\n  sandbox_execution: true\n  audit_all_operations: true\n\ndatabase:\n  url: ${DATABASE_URL}\n  pool_size: 20\n  max_overflow: 30\n  pool_timeout: 30\n  pool_recycle: 3600\n\ncache:\n  url: ${REDIS_URL}\n  key_prefix: blux_prod\n  default_ttl: 3600\n\nservices:\n  blux_reg:\n    host: reg.blux.example\n    port: 443\n    tls: true\n\n  blux_guard:\n    host: guard.blux.example  \n    port: 443\n    tls: true\n\n  blux_lite:\n    host: lite.blux.example\n    port: 443\n    tls: true\n\naudit:\n  storage:\n    type: s3\n    bucket: blux-audit-trails\n    region: us-west-2\n  retention_days: 365\n  encryption: true\n</code></pre> <p>Kubernetes Deployment</p> <p>Namespace Configuration</p> <pre><code># k8s/namespace.yaml\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: blux-production\n  labels:\n    name: blux-production\n</code></pre> <p>Secret Management</p> <pre><code># k8s/secrets.yaml\napiVersion: v1\nkind: Secret\nmetadata:\n  name: blux-secrets\n  namespace: blux-production\ntype: Opaque\ndata:\n  database-url: &lt;base64-encoded&gt;\n  redis-url: &lt;base64-encoded&gt;\n  master-key: &lt;base64-encoded&gt;\n  jwt-secret: &lt;base64-encoded&gt;\n</code></pre> <p>blux-lite Deployment</p> <pre><code># k8s/blux-lite-deployment.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: blux-lite\n  namespace: blux-production\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: blux-lite\n  template:\n    metadata:\n      labels:\n        app: blux-lite\n    spec:\n      containers:\n      - name: blux-lite\n        image: blux/lite:1.0.0\n        ports:\n        - containerPort: 8080\n        env:\n        - name: BLUX_ENV\n          value: \"production\"\n        - name: DATABASE_URL\n          valueFrom:\n            secretKeyRef:\n              name: blux-secrets\n              key: database-url\n        resources:\n          requests:\n            memory: \"256Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"512Mi\"\n            cpu: \"500m\"\n        livenessProbe:\n          httpGet:\n            path: /health\n            port: 8080\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          httpGet:\n            path: /ready\n            port: 8080\n          initialDelaySeconds: 5\n          periodSeconds: 5\n</code></pre> <p>Service Configuration</p> <pre><code># k8s/blux-lite-service.yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: blux-lite\n  namespace: blux-production\n  annotations:\n    service.beta.kubernetes.io/aws-load-balancer-type: \"external\"\n    service.beta.kubernetes.io/aws-load-balancer-ssl-cert: \"arn:aws:acm:...\"\nspec:\n  selector:\n    app: blux-lite\n  ports:\n  - port: 443\n    targetPort: 8080\n    protocol: TCP\n  type: LoadBalancer\n</code></pre> <p>Database Setup</p> <p>PostgreSQL Configuration</p> <pre><code>-- Create database and user\nCREATE DATABASE blux_prod;\nCREATE USER blux_user WITH PASSWORD 'secure_password';\nGRANT ALL PRIVILEGES ON DATABASE blux_prod TO blux_user;\n\n-- Enable extensions\nCREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";\nCREATE EXTENSION IF NOT EXISTS \"pgcrypto\";\n</code></pre> <p>Database Migration</p> <pre><code># Run migrations\nalembic upgrade head\n\n# Verify migration\nalembic current\n\n# Create backup before major updates\npg_dump blux_prod &gt; backup-$(date +%Y%m%d).sql\n</code></pre> <p>Security Hardening</p> <p>Network Policies</p> <pre><code># k8s/network-policies.yaml\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: blux-internal\n  namespace: blux-production\nspec:\n  podSelector:\n    matchLabels:\n      app: blux\n  policyTypes:\n  - Ingress\n  - Egress\n  ingress:\n  - from:\n    - podSelector:\n        matchLabels:\n          app: blux\n    ports:\n    - protocol: TCP\n      port: 8080\n  egress:\n  - to:\n    - podSelector:\n        matchLabels:\n          app: blux\n    ports:\n    - protocol: TCP\n      port: 8080\n  - to:\n    - namespaceSelector: {}\n    ports:\n    - protocol: TCP\n      port: 5432  # PostgreSQL\n    - protocol: TCP  \n      port: 6379  # Redis\n</code></pre> <p>mTLS Configuration</p> <pre><code># istio/mtls.yaml\napiVersion: security.istio.io/v1beta1\nkind: PeerAuthentication\nmetadata:\n  name: blux-mtls\n  namespace: blux-production\nspec:\n  mtls:\n    mode: STRICT\n</code></pre> <p>Monitoring &amp; Observability</p> <p>Prometheus Configuration</p> <pre><code># monitoring/service-monitor.yaml\napiVersion: monitoring.coreos.com/v1\nkind: ServiceMonitor\nmetadata:\n  name: blux-monitor\n  namespace: blux-production\nspec:\n  selector:\n    matchLabels:\n      app: blux\n  endpoints:\n  - port: http-metrics\n    interval: 30s\n    path: /metrics\n</code></pre> <p>Custom Metrics</p> <pre><code># Example custom metric\nfrom prometheus_client import Counter, Histogram\n\nrequests_total = Counter('blux_requests_total', 'Total requests', ['service', 'status'])\nrequest_duration = Histogram('blux_request_duration_seconds', 'Request duration', ['service'])\n</code></pre> <p>Alerting Rules</p> <pre><code># monitoring/alerts.yaml\ngroups:\n- name: blux.rules\n  rules:\n  - alert: BLUXServiceDown\n    expr: up{job=\"blux-lite\"} == 0\n    for: 5m\n    labels:\n      severity: critical\n    annotations:\n      summary: \"BLUX service down\"\n      description: \"Service {{ $labels.instance }} is down.\"\n\n  - alert: HighErrorRate\n    expr: rate(blux_requests_total{status=~\"5..\"}[5m]) &gt; 0.1\n    for: 2m\n    labels:\n      severity: warning\n</code></pre> <p>Backup &amp; Disaster Recovery</p> <p>Database Backups</p> <pre><code>#!/bin/bash\n# backup-database.sh\nDATE=$(date +%Y%m%d-%H%M%S)\npg_dump blux_prod | gzip &gt; /backups/blux-db-$DATE.sql.gz\n\n# Retain 7 daily, 4 weekly backups\nfind /backups -name \"blux-db-*.sql.gz\" -mtime +7 -delete\n</code></pre> <p>Audit Trail Backup</p> <pre><code># S3 lifecycle policy for audit trails\n{\n  \"Rules\": [\n    {\n      \"ID\": \"MoveToGlacier\",\n      \"Status\": \"Enabled\", \n      \"Prefix\": \"audit/\",\n      \"Transition\": {\n        \"Days\": 30,\n        \"StorageClass\": \"GLACIER\"\n      }\n    }\n  ]\n}\n</code></pre> <p>Disaster Recovery Plan</p> <ol> <li>Identify failure - Monitoring alerts</li> <li>Failover - Route traffic to standby region</li> <li>Restore - Database and service restoration</li> <li>Validation - Service and data integrity checks</li> <li>Failback - Return to primary region</li> </ol> <p>Performance Optimization</p> <p>Caching Strategy</p> <pre><code># Redis configuration\ncache:\n  default_ttl: 3600\n  key_patterns:\n    user_sessions: \"session:*\"\n    task_results: \"task:*\"\n    policy_cache: \"policy:*\"\n</code></pre> <p>Database Optimization</p> <pre><code>-- Critical indexes\nCREATE INDEX CONCURRENTLY idx_audit_timestamp ON audit_entries(timestamp);\nCREATE INDEX CONCURRENTLY idx_tasks_status ON tasks(status);\nCREATE INDEX CONCURRENTLY idx_identity_active ON identities(is_active);\n</code></pre> <p>Resource Limits</p> <pre><code># Resource recommendations\nresources:\n  blux-lite:\n    requests:\n      memory: \"512Mi\" \n      cpu: \"500m\"\n    limits:\n      memory: \"1Gi\"\n      cpu: \"1000m\"\n\n  blux-guard:\n    requests:\n      memory: \"256Mi\"\n      cpu: \"250m\" \n    limits:\n      memory: \"512Mi\"\n      cpu: \"500m\"\n</code></pre> <p>Deployment Checklist</p> <p>Pre-Deployment</p> <p>\u00b7 Security scan completed \u00b7 Performance testing passed \u00b7 Backup procedures verified \u00b7 Rollback plan documented \u00b7 Team communication sent</p> <p>During Deployment</p> <p>\u00b7 Gradual traffic shift \u00b7 Health checks passing \u00b7 Error rates monitored \u00b7 Performance metrics stable</p> <p>Post-Deployment</p> <p>\u00b7 Full functionality verified \u00b7 Security controls active \u00b7 Monitoring alerts configured \u00b7 Documentation updated</p> <p>Troubleshooting</p> <p>Common Issues</p> <p>High Memory Usage</p> <pre><code># Check memory usage\nkubectl top pods -n blux-production\n\n# Analyze memory profiles\nkubectl exec -it blux-lite-pod -- python -m memory_profiler script.py\n</code></pre> <p>Database Connection Issues</p> <pre><code># Check database connectivity\nkubectl exec -it blux-lite-pod -- nc -zv db-host 5432\n\n# Verify connection pool\nkubectl logs blux-lite-pod | grep -i connection\n</code></pre> <p>Certificate Issues</p> <pre><code># Check certificate validity\nopenssl x509 -in certificate.crt -text -noout\n\n# Verify TLS handshake\nopenssl s_client -connect lite.blux.example:443\n</code></pre> <p>Production is where theory meets reality.  (( \u2022 ))</p> <p>Next: Kubernetes Deployment Guide</p>"},{"location":"examples/basic-integration/","title":"Basic Integration Examples","text":""},{"location":"examples/basic-integration/#overview","title":"Overview","text":"<p>Practical examples showing how to integrate with BLUX Ecosystem services for common use cases.</p>"},{"location":"examples/basic-integration/#quick-start-example","title":"Quick Start Example","text":""},{"location":"examples/basic-integration/#basic-service-integration","title":"Basic Service Integration","text":"<pre><code>#!/usr/bin/env python3\n\"\"\"\nBasic BLUX Integration Example\nDemonstrates simple service integration patterns.\n\"\"\"\n\nimport asyncio\nimport aiohttp\nimport json\nfrom typing import Dict, Any\n\nclass BLUXClient:\n    \"\"\"Basic BLUX client for service integration.\"\"\"\n\n    def __init__(self, base_url: str = \"http://localhost:8080\"):\n        self.base_url = base_url.rstrip('/')\n        self.session = None\n\n    async def __aenter__(self):\n        self.session = aiohttp.ClientSession()\n        return self\n\n    async def __aexit__(self, exc_type, exc_val, exc_tb):\n        if self.session:\n            await self.session.close()\n\n    async def health_check(self) -&gt; Dict[str, Any]:\n        \"\"\"Check service health.\"\"\"\n        async with self.session.get(f\"{self.base_url}/health\") as response:\n            return await response.json()\n\n    async def create_task(self, task_type: str, context: Dict) -&gt; Dict[str, Any]:\n        \"\"\"Create a new task.\"\"\"\n        payload = {\n            \"type\": task_type,\n            \"context\": context,\n            \"doctrine_requirements\": {\n                \"require_reflection\": True,\n                \"sandbox_execution\": True\n            }\n        }\n\n        async with self.session.post(\n            f\"{self.base_url}/v1/tasks\",\n            json=payload,\n            headers={\"Content-Type\": \"application/json\"}\n        ) as response:\n            return await response.json()\n\n    async def get_task_status(self, task_id: str) -&gt; Dict[str, Any]:\n        \"\"\"Get task status by ID.\"\"\"\n        async with self.session.get(f\"{self.base_url}/v1/tasks/{task_id}\") as response:\n            return await response.json()\n\n# Example usage\nasync def main():\n    \"\"\"Demonstrate basic BLUX integration.\"\"\"\n    async with BLUXClient() as client:\n        # Check service health\n        health = await client.health_check()\n        print(f\"Service health: {health['status']}\")\n\n        # Create a sample task\n        task = await client.create_task(\n            task_type=\"data_analysis\",\n            context={\n                \"user_id\": \"example_user\",\n                \"environment\": \"development\",\n                \"data_source\": \"sample_dataset\"\n            }\n        )\n\n        print(f\"Created task: {task['task_id']}\")\n        print(f\"Audit ID: {task['audit_id']}\")\n\n        # Check task status\n        status = await client.get_task_status(task['task_id'])\n        print(f\"Task status: {status['status']}\")\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre> <p>Authentication Examples</p> <p>JWT Token Authentication</p> <pre><code>import jwt\nimport time\nfrom datetime import datetime, timedelta\n\nclass BLUXAuthenticator:\n    \"\"\"Handles BLUX authentication.\"\"\"\n\n    def __init__(self, private_key_path: str, service_name: str):\n        self.private_key_path = private_key_path\n        self.service_name = service_name\n\n    def load_private_key(self) -&gt; str:\n        \"\"\"Load private key from file.\"\"\"\n        with open(self.private_key_path, 'r') as f:\n            return f.read().strip()\n\n    def generate_token(self, expires_in: int = 3600) -&gt; str:\n        \"\"\"Generate JWT token for service authentication.\"\"\"\n        private_key = self.load_private_key()\n\n        payload = {\n            'iss': self.service_name,\n            'sub': self.service_name,\n            'aud': 'blux-ecosystem',\n            'exp': datetime.utcnow() + timedelta(seconds=expires_in),\n            'iat': datetime.utcnow(),\n            'scope': ['tasks:read', 'tasks:write', 'audit:read']\n        }\n\n        return jwt.encode(payload, private_key, algorithm='ES512')\n\n# Usage\nauthenticator = BLUXAuthenticator(\n    private_key_path='keys/service.key',\n    service_name='my-integration-service'\n)\n\ntoken = authenticator.generate_token()\nprint(f\"Authentication token: {token}\")\n</code></pre> <p>mTLS Authentication</p> <pre><code>import ssl\nimport aiohttp\n\nclass SecureBLUXClient:\n    \"\"\"Client with mTLS authentication.\"\"\"\n\n    def __init__(self, cert_file: str, key_file: str, ca_bundle: str):\n        self.cert_file = cert_file\n        self.key_file = key_file\n        self.ca_bundle = ca_bundle\n\n    def create_ssl_context(self) -&gt; ssl.SSLContext:\n        \"\"\"Create SSL context for mTLS.\"\"\"\n        ssl_context = ssl.create_default_context(\n            cafile=self.ca_bundle,\n            purpose=ssl.Purpose.SERVER_AUTH\n        )\n        ssl_context.load_cert_chain(self.cert_file, self.key_file)\n        ssl_context.check_hostname = False  # For development\n        return ssl_context\n\n    async def make_secure_request(self, url: str) -&gt; Dict[str, Any]:\n        \"\"\"Make secure request with mTLS.\"\"\"\n        ssl_context = self.create_ssl_context()\n\n        connector = aiohttp.TCPConnector(ssl=ssl_context)\n        async with aiohttp.ClientSession(connector=connector) as session:\n            async with session.get(url) as response:\n                return await response.json()\n\n# Usage\nclient = SecureBLUXClient(\n    cert_file='certs/client.crt',\n    key_file='certs/client.key', \n    ca_bundle='certs/ca.crt'\n)\n\n# response = await client.make_secure_request('https://blux-lite:443/health')\n</code></pre> <p>Task Processing Examples</p> <p>Simple Task Orchestration</p> <pre><code>import asyncio\nfrom enum import Enum\nfrom typing import List, Optional\n\nclass TaskStatus(Enum):\n    PENDING = \"pending\"\n    RUNNING = \"running\" \n    COMPLETED = \"completed\"\n    FAILED = \"failed\"\n\nclass TaskOrchestrator:\n    \"\"\"Orchestrates task processing through BLUX.\"\"\"\n\n    def __init__(self, blux_client: BLUXClient):\n        self.client = blux_client\n        self.pending_tasks = asyncio.Queue()\n        self.completed_tasks = asyncio.Queue()\n\n    async def submit_task(self, task_type: str, payload: Dict) -&gt; str:\n        \"\"\"Submit a task for processing.\"\"\"\n        task_response = await self.client.create_task(task_type, payload)\n        task_id = task_response['task_id']\n\n        await self.pending_tasks.put({\n            'task_id': task_id,\n            'type': task_type,\n            'submitted_at': asyncio.get_event_loop().time()\n        })\n\n        return task_id\n\n    async def process_tasks(self, batch_size: int = 10):\n        \"\"\"Process tasks in batches.\"\"\"\n        while True:\n            # Wait for tasks or timeout\n            try:\n                tasks = [await asyncio.wait_for(\n                    self.pending_tasks.get(), \n                    timeout=1.0\n                )]\n\n                # Get more tasks if available\n                for _ in range(batch_size - 1):\n                    try:\n                        task = self.pending_tasks.get_nowait()\n                        tasks.append(task)\n                    except asyncio.QueueEmpty:\n                        break\n\n                # Process batch\n                await self._process_batch(tasks)\n\n            except asyncio.TimeoutError:\n                # No tasks, continue\n                continue\n\n    async def _process_batch(self, tasks: List[Dict]):\n        \"\"\"Process a batch of tasks.\"\"\"\n        processing_tasks = []\n\n        for task_info in tasks:\n            task = asyncio.create_task(\n                self._process_single_task(task_info)\n            )\n            processing_tasks.append(task)\n\n        # Wait for all tasks to complete\n        await asyncio.gather(*processing_tasks)\n\n    async def _process_single_task(self, task_info: Dict):\n        \"\"\"Process a single task.\"\"\"\n        task_id = task_info['task_id']\n\n        try:\n            # Monitor task status\n            status = await self._monitor_task_status(task_id)\n\n            if status == TaskStatus.COMPLETED:\n                result = await self.client.get_task_status(task_id)\n                await self.completed_tasks.put({\n                    'task_id': task_id,\n                    'result': result,\n                    'completed_at': asyncio.get_event_loop().time()\n                })\n\n        except Exception as e:\n            print(f\"Task {task_id} failed: {e}\")\n\n    async def _monitor_task_status(self, task_id: str) -&gt; TaskStatus:\n        \"\"\"Monitor task status until completion.\"\"\"\n        while True:\n            status_info = await self.client.get_task_status(task_id)\n            status = TaskStatus(status_info['status'])\n\n            if status in [TaskStatus.COMPLETED, TaskStatus.FAILED]:\n                return status\n\n            # Wait before checking again\n            await asyncio.sleep(1.0)\n\n# Usage example\nasync def orchestration_example():\n    \"\"\"Demonstrate task orchestration.\"\"\"\n    async with BLUXClient() as client:\n        orchestrator = TaskOrchestrator(client)\n\n        # Start task processor\n        processor_task = asyncio.create_task(\n            orchestrator.process_tasks()\n        )\n\n        # Submit some tasks\n        tasks = []\n        for i in range(5):\n            task_id = await orchestrator.submit_task(\n                task_type=\"data_processing\",\n                payload={\"dataset\": f\"dataset_{i}\", \"operation\": \"analyze\"}\n            )\n            tasks.append(task_id)\n            print(f\"Submitted task: {task_id}\")\n\n        # Wait for processing\n        await asyncio.sleep(10)\n\n        # Check completed tasks\n        completed_count = orchestrator.completed_tasks.qsize()\n        print(f\"Completed tasks: {completed_count}\")\n\n        # Cleanup\n        processor_task.cancel()\n        try:\n            await processor_task\n        except asyncio.CancelledError:\n            pass\n\n# Run example\n# asyncio.run(orchestration_example())\n</code></pre> <p>Audit Integration Examples</p> <p>Audit Trail Monitoring</p> <pre><code>import time\nfrom datetime import datetime, timedelta\n\nclass AuditMonitor:\n    \"\"\"Monitors and analyzes audit trails.\"\"\"\n\n    def __init__(self, blux_client: BLUXClient):\n        self.client = blux_client\n        self.last_check = datetime.utcnow()\n\n    async def monitor_audit_events(self, callback):\n        \"\"\"\n        Monitor audit events and call callback for new events.\n\n        Args:\n            callback: Async function that receives audit events\n        \"\"\"\n        while True:\n            try:\n                # Get events since last check\n                events = await self._get_recent_events()\n\n                for event in events:\n                    await callback(event)\n\n                self.last_check = datetime.utcnow()\n                await asyncio.sleep(5.0)  # Check every 5 seconds\n\n            except Exception as e:\n                print(f\"Audit monitoring error: {e}\")\n                await asyncio.sleep(10.0)  # Backoff on error\n\n    async def _get_recent_events(self) -&gt; List[Dict]:\n        \"\"\"Get events since last check.\"\"\"\n        # This would call the audit API\n        # For now, return mock data\n        return [\n            {\n                \"audit_id\": f\"aud_{int(time.time())}\",\n                \"timestamp\": datetime.utcnow().isoformat(),\n                \"service\": \"blux-lite\",\n                \"operation\": \"task.execute\",\n                \"identity\": \"user:example\",\n                \"data\": {\"task_id\": \"task_123\"}\n            }\n        ]\n\n    async def analyze_audit_patterns(self, hours: int = 24):\n        \"\"\"Analyze audit patterns over time.\"\"\"\n        end_time = datetime.utcnow()\n        start_time = end_time - timedelta(hours=hours)\n\n        # This would query the audit API for the time range\n        print(f\"Analyzing audit patterns from {start_time} to {end_time}\")\n\n        # Mock analysis results\n        return {\n            \"total_events\": 1500,\n            \"services\": {\n                \"blux-lite\": 800,\n                \"blux-guard\": 400,\n                \"blux-reg\": 300\n            },\n            \"operations\": {\n                \"task.execute\": 600,\n                \"auth.verify\": 400,\n                \"audit.write\": 500\n            }\n        }\n\n# Usage example\nasync def handle_audit_event(event: Dict):\n    \"\"\"Handle incoming audit events.\"\"\"\n    print(f\"Audit event: {event['operation']} by {event['service']}\")\n\n    # Example: Alert on security events\n    if event['operation'] in ['auth.failed', 'access.denied']:\n        print(f\"SECURITY ALERT: {event}\")\n\nasync def audit_monitoring_example():\n    \"\"\"Demonstrate audit monitoring.\"\"\"\n    async with BLUXClient() as client:\n        monitor = AuditMonitor(client)\n\n        # Start monitoring\n        monitor_task = asyncio.create_task(\n            monitor.monitor_audit_events(handle_audit_event)\n        )\n\n        # Run analysis\n        analysis = await monitor.analyze_audit_patterns(hours=1)\n        print(f\"Audit analysis: {analysis}\")\n\n        # Let it run for a bit\n        await asyncio.sleep(30)\n\n        # Stop monitoring\n        monitor_task.cancel()\n        try:\n            await monitor_task\n        except asyncio.CancelledError:\n            print(\"Audit monitoring stopped\")\n\n# Run example  \n# asyncio.run(audit_monitoring_example())\n</code></pre> <p>Error Handling Examples</p> <p>Robust Service Integration</p> <pre><code>from typing import TypeVar, Callable\nimport asyncio\nimport random\n\nT = TypeVar('T')\n\nclass ResilientBLUXClient:\n    \"\"\"BLUX client with built-in resilience patterns.\"\"\"\n\n    def __init__(self, base_url: str, max_retries: int = 3):\n        self.base_url = base_url\n        self.max_retries = max_retries\n\n    async def with_retry(self, operation: Callable[..., T], *args, **kwargs) -&gt; T:\n        \"\"\"\n        Execute operation with retry logic.\n\n        Args:\n            operation: Async function to execute\n            *args: Positional arguments for operation\n            **kwargs: Keyword arguments for operation\n\n        Returns:\n            Operation result\n\n        Raises:\n            Exception: If all retries fail\n        \"\"\"\n        last_exception = None\n\n        for attempt in range(self.max_retries):\n            try:\n                return await operation(*args, **kwargs)\n\n            except asyncio.TimeoutError as e:\n                last_exception = e\n                print(f\"Attempt {attempt + 1} failed: Timeout\")\n\n            except aiohttp.ClientError as e:\n                last_exception = e\n                print(f\"Attempt {attempt + 1} failed: Client error - {e}\")\n\n            except Exception as e:\n                last_exception = e\n                print(f\"Attempt {attempt + 1} failed: {e}\")\n\n            # Exponential backoff with jitter\n            if attempt &lt; self.max_retries - 1:\n                delay = (2 ** attempt) + random.uniform(0, 1)\n                print(f\"Retrying in {delay:.2f} seconds...\")\n                await asyncio.sleep(delay)\n\n        # All retries failed\n        raise last_exception\n\n    async def create_task_with_retry(self, task_type: str, context: Dict) -&gt; Dict:\n        \"\"\"Create task with retry logic.\"\"\"\n        async with aiohttp.ClientSession() as session:\n            operation = lambda: self._create_task_impl(session, task_type, context)\n            return await self.with_retry(operation)\n\n    async def _create_task_impl(self, session: aiohttp.ClientSession, \n                              task_type: str, context: Dict) -&gt; Dict:\n        \"\"\"Actual task creation implementation.\"\"\"\n        payload = {\n            \"type\": task_type,\n            \"context\": context\n        }\n\n        async with session.post(\n            f\"{self.base_url}/v1/tasks\",\n            json=payload,\n            timeout=aiohttp.ClientTimeout(total=30)\n        ) as response:\n            if response.status &gt;= 400:\n                raise aiohttp.ClientError(f\"HTTP {response.status}\")\n            return await response.json()\n\n# Usage example\nasync def resilient_example():\n    \"\"\"Demonstrate resilient service integration.\"\"\"\n    client = ResilientBLUXClient(\"http://localhost:8080\")\n\n    try:\n        task = await client.create_task_with_retry(\n            task_type=\"important_processing\",\n            context={\"critical\": True, \"data\": \"important_data\"}\n        )\n        print(f\"Successfully created task: {task['task_id']}\")\n\n    except Exception as e:\n        print(f\"Failed to create task after retries: {e}\")\n\n# Run example\n# asyncio.run(resilient_example())\n</code></pre> <p>Configuration Examples</p> <p>Dynamic Configuration Management</p> <pre><code>import yaml\nfrom typing import Dict, Any\n\nclass BLUXConfigManager:\n    \"\"\"Manages BLUX service configuration.\"\"\"\n\n    def __init__(self, config_path: str = \"config/blux-config.yaml\"):\n        self.config_path = config_path\n        self.config = self._load_config()\n\n    def _load_config(self) -&gt; Dict[str, Any]:\n        \"\"\"Load configuration from file.\"\"\"\n        try:\n            with open(self.config_path, 'r') as f:\n                return yaml.safe_load(f)\n        except FileNotFoundError:\n            return self._default_config()\n\n    def _default_config(self) -&gt; Dict[str, Any]:\n        \"\"\"Return default configuration.\"\"\"\n        return {\n            'environment': 'development',\n            'services': {\n                'blux_lite': {\n                    'host': 'localhost',\n                    'port': 50051,\n                    'timeout': 30\n                },\n                'blux_guard': {\n                    'host': 'localhost',\n                    'port': 50052,\n                    'timeout': 30\n                }\n            },\n            'security': {\n                'require_authentication': False,\n                'audit_all_operations': True\n            }\n        }\n\n    def get_service_config(self, service_name: str) -&gt; Dict[str, Any]:\n        \"\"\"Get configuration for a specific service.\"\"\"\n        return self.config['services'].get(service_name, {})\n\n    def update_config(self, updates: Dict[str, Any]):\n        \"\"\"Update configuration dynamically.\"\"\"\n        # Deep merge updates\n        self._deep_update(self.config, updates)\n\n        # Save to file\n        self._save_config()\n\n    def _deep_update(self, original: Dict, updates: Dict):\n        \"\"\"Deep update a dictionary.\"\"\"\n        for key, value in updates.items():\n            if (key in original and isinstance(original[key], dict) \n                and isinstance(value, dict)):\n                self._deep_update(original[key], value)\n            else:\n                original[key] = value\n\n    def _save_config(self):\n        \"\"\"Save configuration to file.\"\"\"\n        with open(self.config_path, 'w') as f:\n            yaml.dump(self.config, f, default_flow_style=False)\n\n# Usage example\ndef config_example():\n    \"\"\"Demonstrate configuration management.\"\"\"\n    config_mgr = BLUXConfigManager()\n\n    # Get service configuration\n    lite_config = config_mgr.get_service_config('blux_lite')\n    print(f\"BLUX Lite config: {lite_config}\")\n\n    # Update configuration\n    config_mgr.update_config({\n        'services': {\n            'blux_lite': {\n                'timeout': 60  # Increase timeout\n            }\n        }\n    })\n\n    print(\"Configuration updated\")\n\n# Run example\n# config_example()\n</code></pre> <p>Testing Examples</p> <p>Integration Testing</p> <pre><code>import pytest\nimport asyncio\nfrom unittest.mock import AsyncMock, patch\n\nclass TestBLUXIntegration:\n    \"\"\"Integration tests for BLUX services.\"\"\"\n\n    @pytest.fixture\n    async def blux_client(self):\n        \"\"\"Create BLUX client for testing.\"\"\"\n        async with BLUXClient(\"http://localhost:8080\") as client:\n            yield client\n\n    @pytest.mark.asyncio\n    async def test_health_check(self, blux_client):\n        \"\"\"Test service health check.\"\"\"\n        health = await blux_client.health_check()\n        assert health['status'] == 'healthy'\n        assert 'services' in health\n\n    @pytest.mark.asyncio \n    async def test_task_creation(self, blux_client):\n        \"\"\"Test task creation and status checking.\"\"\"\n        # Create task\n        task = await blux_client.create_task(\n            task_type=\"test_operation\",\n            context={\"test\": True}\n        )\n\n        assert 'task_id' in task\n        assert 'audit_id' in task\n\n        # Check status\n        status = await blux_client.get_task_status(task['task_id'])\n        assert 'status' in status\n        assert status['task_id'] == task['task_id']\n\n    @pytest.mark.asyncio\n    async def test_error_handling(self, blux_client):\n        \"\"\"Test error handling for invalid requests.\"\"\"\n        with pytest.raises(Exception):  # Should be more specific\n            await blux_client.create_task(\"\", {})  # Invalid task type\n\n# Mock testing example\n@pytest.mark.asyncio\nasync def test_with_mocks():\n    \"\"\"Test with mocked BLUX services.\"\"\"\n    with patch('aiohttp.ClientSession') as mock_session:\n        mock_response = AsyncMock()\n        mock_response.json.return_value = {\n            'status': 'healthy',\n            'services': {'blux-lite': 'healthy'}\n        }\n        mock_session.get.return_value.__aenter__.return_value = mock_response\n\n        async with BLUXClient() as client:\n            health = await client.health_check()\n            assert health['status'] == 'healthy'\n</code></pre> <p>Deployment Examples</p> <p>Docker Compose Integration</p> <pre><code># docker-compose.integration.yml\nversion: '3.8'\n\nservices:\n  my-integration-app:\n    build: .\n    environment:\n      - BLUX_ENV=production\n      - BLUX_LITE_HOST=blux-lite\n      - BLUX_GUARD_HOST=blux-guard\n      - BLUX_REG_HOST=blux-reg\n    depends_on:\n      - blux-lite\n      - blux-guard\n      - blux-reg\n\n  blux-lite:\n    image: blux/lite:latest\n    environment:\n      - BLUX_ENV=production\n    ports:\n      - \"50051:8080\"\n\n  blux-guard:\n    image: blux/guard:latest  \n    environment:\n      - BLUX_ENV=production\n    ports:\n      - \"50052:8080\"\n\n  blux-reg:\n    image: blux/reg:latest\n    environment:\n      - BLUX_ENV=production\n    ports:\n      - \"50050:8080\"\n\nnetworks:\n  default:\n    name: blux-integration\n</code></pre> <p>Examples illuminate the path from concept to implementation.  (( \u2022 ))</p> <p>Next Steps:</p> <p>\u00b7 Explore the API Gateway for detailed API documentation \u00b7 Check Common Issues for troubleshooting \u00b7 Review the Architecture Guide for system design understanding</p>"},{"location":"examples/custom-module/","title":"Custom Module Development Guide","text":""},{"location":"examples/custom-module/#overview","title":"Overview","text":"<p>Learn how to create custom modules that integrate with the BLUX Ecosystem while following BLUX principles and patterns.</p>"},{"location":"examples/custom-module/#module-template","title":"Module Template","text":""},{"location":"examples/custom-module/#basic-structure","title":"Basic Structure","text":"<pre><code>\nmy-blux-module/\n\u251c\u2500\u2500README.md\n\u251c\u2500\u2500pyproject.toml              # Python project config\n\u251c\u2500\u2500Dockerfile\n\u251c\u2500\u2500.dockerignore\n\u251c\u2500\u2500.gitignore\n\u251c\u2500\u2500manifests/\n\u2502\u251c\u2500\u2500 module.manifest.json\n\u2502\u2514\u2500\u2500 doctrine.policy.json\n\u251c\u2500\u2500src/\n\u2502\u2514\u2500\u2500 my_blux_module/\n\u2502\u251c\u2500\u2500 init.py\n\u2502\u251c\u2500\u2500 core.py\n\u2502\u251c\u2500\u2500 api.py\n\u2502\u251c\u2500\u2500 models.py\n\u2502\u2514\u2500\u2500 config.py\n\u251c\u2500\u2500tests/\n\u2502\u251c\u2500\u2500 init.py\n\u2502\u251c\u2500\u2500 test_core.py\n\u2502\u251c\u2500\u2500 test_api.py\n\u2502\u2514\u2500\u2500 conftest.py\n\u251c\u2500\u2500scripts/\n\u2502\u251c\u2500\u2500 bootstrap.sh\n\u2502\u251c\u2500\u2500 health-check.sh\n\u2502\u2514\u2500\u2500 deploy.sh\n\u2514\u2500\u2500docs/\n\u251c\u2500\u2500 integration.md\n\u2514\u2500\u2500 api.md\n\n</code></pre>"},{"location":"examples/custom-module/#module-manifest","title":"Module Manifest","text":"<pre><code>{\n  \"module\": {\n    \"name\": \"my-blux-module\",\n    \"version\": \"1.0.0\",\n    \"description\": \"Custom BLUX module for specialized processing\",\n    \"type\": \"processor\",\n    \"capabilities\": [\"data_transformation\", \"custom_analysis\"],\n    \"requirements\": {\n      \"blux-lite\": \"&gt;=1.0.0\",\n      \"blux-guard\": \"&gt;=1.0.0\"\n    }\n  },\n  \"integration\": {\n    \"events\": {\n      \"consumes\": [\"task.assigned\", \"data.available\"],\n      \"produces\": [\"task.completed\", \"analysis.ready\"]\n    },\n    \"apis\": {\n      \"provided\": [\"/v1/analyze\", \"/v1/transform\"],\n      \"required\": [\"/v1/tasks\", \"/v1/audit\"]\n    }\n  },\n  \"security\": {\n    \"authentication\": \"required\",\n    \"audit_level\": \"detailed\",\n    \"data_handling\": \"encrypted\"\n  }\n}\n</code></pre> <p>Core Module Implementation</p> <p>Basic Module Class</p> <pre><code>\"\"\"\nANCHOR: module_core\n\"\"\"\nimport asyncio\nimport logging\nfrom typing import Dict, Any, Optional\nfrom dataclasses import dataclass\nfrom enum import Enum\n\nclass ModuleStatus(Enum):\n    INITIALIZING = \"initializing\"\n    READY = \"ready\"\n    PROCESSING = \"processing\"\n    ERROR = \"error\"\n\n@dataclass\nclass ModuleConfig:\n    \"\"\"Module configuration.\"\"\"\n    name: str\n    version: str\n    blux_lite_host: str = \"localhost:50051\"\n    blux_guard_host: str = \"localhost:50052\"\n    max_concurrent_tasks: int = 10\n    enable_audit: bool = True\n\nclass BLUXModule:\n    \"\"\"\n    Base class for BLUX modules.\n    Provides common functionality and integration patterns.\n    \"\"\"\n\n    def __init__(self, config: ModuleConfig):\n        self.config = config\n        self.status = ModuleStatus.INITIALIZING\n        self.logger = logging.getLogger(self.config.name)\n        self.task_queue = asyncio.Queue()\n        self.active_tasks: Dict[str, asyncio.Task] = {}\n\n    async def initialize(self) -&gt; None:\n        \"\"\"Initialize the module.\"\"\"\n        self.logger.info(f\"Initializing {self.config.name} v{self.config.version}\")\n\n        # Register with BLUX ecosystem\n        await self._register_module()\n\n        # Start task processor\n        asyncio.create_task(self._process_tasks())\n\n        self.status = ModuleStatus.READY\n        self.logger.info(\"Module initialized and ready\")\n\n    async def _register_module(self) -&gt; None:\n        \"\"\"Register module with BLUX ecosystem.\"\"\"\n        # This would typically call blux-lite registration endpoint\n        registration_data = {\n            \"module\": self.config.name,\n            \"version\": self.config.version,\n            \"capabilities\": self.get_capabilities(),\n            \"endpoints\": self.get_endpoints()\n        }\n\n        self.logger.debug(f\"Registering module: {registration_data}\")\n        # Implementation would go here\n\n    def get_capabilities(self) -&gt; Dict[str, Any]:\n        \"\"\"Return module capabilities.\"\"\"\n        return {\n            \"data_processing\": True,\n            \"custom_analysis\": True,\n            \"audit_integration\": self.config.enable_audit\n        }\n\n    def get_endpoints(self) -&gt; Dict[str, str]:\n        \"\"\"Return module API endpoints.\"\"\"\n        return {\n            \"health\": \"/health\",\n            \"process\": \"/v1/process\",\n            \"status\": \"/v1/status\"\n        }\n\n    async def process_task(self, task_data: Dict[str, Any]) -&gt; Dict[str, Any]:\n        \"\"\"\n        Process a task - to be implemented by specific modules.\n\n        Args:\n            task_data: Task data from BLUX Lite\n\n        Returns:\n            Processing results\n        \"\"\"\n        raise NotImplementedError(\"Subclasses must implement process_task\")\n\n    async def _process_tasks(self) -&gt; None:\n        \"\"\"Background task processing loop.\"\"\"\n        while True:\n            try:\n                task_id, task_data = await self.task_queue.get()\n\n                # Limit concurrent tasks\n                if len(self.active_tasks) &gt;= self.config.max_concurrent_tasks:\n                    await asyncio.sleep(0.1)\n                    self.task_queue.put_nowait((task_id, task_data))\n                    continue\n\n                # Process task\n                task = asyncio.create_task(\n                    self._process_single_task(task_id, task_data)\n                )\n                self.active_tasks[task_id] = task\n\n            except Exception as e:\n                self.logger.error(f\"Task processing error: {e}\")\n\n    async def _process_single_task(self, task_id: str, task_data: Dict[str, Any]) -&gt; None:\n        \"\"\"Process a single task with error handling.\"\"\"\n        try:\n            self.logger.info(f\"Processing task {task_id}\")\n\n            # Record audit entry\n            audit_id = await self._record_audit(\"task.start\", {\"task_id\": task_id})\n\n            # Process the task\n            result = await self.process_task(task_data)\n\n            # Record completion\n            await self._record_audit(\"task.complete\", {\n                \"task_id\": task_id,\n                \"audit_id\": audit_id,\n                \"result\": result\n            })\n\n            self.logger.info(f\"Completed task {task_id}\")\n\n        except Exception as e:\n            self.logger.error(f\"Task {task_id} failed: {e}\")\n            await self._record_audit(\"task.error\", {\n                \"task_id\": task_id,\n                \"error\": str(e)\n            })\n\n        finally:\n            # Cleanup\n            self.active_tasks.pop(task_id, None)\n            self.task_queue.task_done()\n\n    async def _record_audit(self, operation: str, data: Dict[str, Any]) -&gt; str:\n        \"\"\"Record audit entry.\"\"\"\n        if not self.config.enable_audit:\n            return \"audit_disabled\"\n\n        # This would integrate with blux-guard audit system\n        audit_entry = {\n            \"timestamp\": asyncio.get_event_loop().time(),\n            \"module\": self.config.name,\n            \"operation\": operation,\n            \"data\": data\n        }\n\n        self.logger.debug(f\"Audit entry: {audit_entry}\")\n        return f\"aud_{hash(str(audit_entry))}\"\n\n    async def health_check(self) -&gt; Dict[str, Any]:\n        \"\"\"Return module health status.\"\"\"\n        return {\n            \"status\": self.status.value,\n            \"module\": self.config.name,\n            \"version\": self.config.version,\n            \"active_tasks\": len(self.active_tasks),\n            \"queue_size\": self.task_queue.qsize()\n        }\n\"\"\"\nANCHOR_END: module_core\n\"\"\"\n</code></pre> <p>Specialized Module Implementation</p> <pre><code>\"\"\"\nANCHOR: specialized_module\n\"\"\"\nimport json\nfrom typing import Dict, Any, List\nimport pandas as pd  # Example dependency\n\nclass DataAnalysisModule(BLUXModule):\n    \"\"\"\n    Specialized module for data analysis tasks.\n    Extends the base BLUXModule with analysis capabilities.\n    \"\"\"\n\n    def __init__(self, config: ModuleConfig):\n        super().__init__(config)\n        self.analysis_cache = {}\n\n    def get_capabilities(self) -&gt; Dict[str, Any]:\n        \"\"\"Return analysis-specific capabilities.\"\"\"\n        base_capabilities = super().get_capabilities()\n        base_capabilities.update({\n            \"statistical_analysis\": True,\n            \"pattern_detection\": True,\n            \"data_visualization\": False,  # Could be enabled in future\n            \"machine_learning\": False\n        })\n        return base_capabilities\n\n    async def process_task(self, task_data: Dict[str, Any]) -&gt; Dict[str, Any]:\n        \"\"\"\n        Process data analysis task.\n\n        Expected task_data format:\n        {\n            \"analysis_type\": \"statistical|pattern|trend\",\n            \"data\": {...} or \"data_reference\": \"...\",\n            \"parameters\": {...}\n        }\n        \"\"\"\n        analysis_type = task_data.get(\"analysis_type\", \"statistical\")\n\n        # Extract data\n        data = await self._extract_data(task_data)\n\n        # Perform analysis based on type\n        if analysis_type == \"statistical\":\n            result = await self._statistical_analysis(data, task_data.get(\"parameters\", {}))\n        elif analysis_type == \"pattern\":\n            result = await self._pattern_analysis(data, task_data.get(\"parameters\", {}))\n        elif analysis_type == \"trend\":\n            result = await self._trend_analysis(data, task_data.get(\"parameters\", {}))\n        else:\n            raise ValueError(f\"Unknown analysis type: {analysis_type}\")\n\n        return {\n            \"analysis_type\": analysis_type,\n            \"result\": result,\n            \"metadata\": {\n                \"data_points\": len(data) if hasattr(data, '__len__') else 1,\n                \"processing_time\": 0.1  # Would be actual timing\n            }\n        }\n\n    async def _extract_data(self, task_data: Dict[str, Any]) -&gt; Any:\n        \"\"\"Extract data from task data or reference.\"\"\"\n        if \"data\" in task_data:\n            return task_data[\"data\"]\n        elif \"data_reference\" in task_data:\n            # Would fetch from data service\n            return await self._fetch_data(task_data[\"data_reference\"])\n        else:\n            raise ValueError(\"No data or data_reference provided\")\n\n    async def _fetch_data(self, data_reference: str) -&gt; Any:\n        \"\"\"Fetch data from reference (would integrate with data services).\"\"\"\n        # Mock implementation\n        return {\"sample\": \"data\", \"values\": [1, 2, 3, 4, 5]}\n\n    async def _statistical_analysis(self, data: Any, parameters: Dict) -&gt; Dict[str, Any]:\n        \"\"\"Perform statistical analysis.\"\"\"\n        if isinstance(data, dict) and 'values' in data:\n            values = data['values']\n            return {\n                \"mean\": sum(values) / len(values),\n                \"std_dev\": (sum((x - sum(values)/len(values))**2 for x in values) / len(values))**0.5,\n                \"min\": min(values),\n                \"max\": max(values),\n                \"count\": len(values)\n            }\n        else:\n            return {\"error\": \"Unsupported data format for statistical analysis\"}\n\n    async def _pattern_analysis(self, data: Any, parameters: Dict) -&gt; Dict[str, Any]:\n        \"\"\"Perform pattern analysis.\"\"\"\n        # Simplified pattern detection\n        if isinstance(data, dict) and 'values' in data:\n            values = data['values']\n            patterns = []\n\n            # Simple pattern: increasing sequence\n            if all(values[i] &lt; values[i+1] for i in range(len(values)-1)):\n                patterns.append(\"increasing_sequence\")\n\n            # Simple pattern: decreasing sequence  \n            if all(values[i] &gt; values[i+1] for i in range(len(values)-1)):\n                patterns.append(\"decreasing_sequence\")\n\n            return {\"patterns_detected\": patterns, \"pattern_count\": len(patterns)}\n        else:\n            return {\"error\": \"Unsupported data format for pattern analysis\"}\n\n    async def _trend_analysis(self, data: Any, parameters: Dict) -&gt; Dict[str, Any]:\n        \"\"\"Perform trend analysis.\"\"\"\n        if isinstance(data, dict) and 'values' in data:\n            values = data['values']\n            if len(values) &gt;= 2:\n                trend = \"increasing\" if values[-1] &gt; values[0] else \"decreasing\"\n                change_percentage = ((values[-1] - values[0]) / values[0]) * 100\n\n                return {\n                    \"trend\": trend,\n                    \"change_percentage\": change_percentage,\n                    \"initial_value\": values[0],\n                    \"final_value\": values[-1]\n                }\n            else:\n                return {\"error\": \"Insufficient data for trend analysis\"}\n        else:\n            return {\"error\": \"Unsupported data format for trend analysis\"}\n\"\"\"\nANCHOR_END: specialized_module\n\"\"\"\n</code></pre> <p>API Implementation</p> <p>FastAPI Integration</p> <pre><code>\"\"\"\nANCHOR: module_api\n\"\"\"\nfrom fastapi import FastAPI, HTTPException, Depends, BackgroundTasks\nfrom fastapi.middleware.cors import CORSMiddleware\nfrom pydantic import BaseModel, Field\nfrom typing import List, Optional\n\n# Pydantic models for API\nclass TaskRequest(BaseModel):\n    analysis_type: str = Field(..., description=\"Type of analysis to perform\")\n    data: Optional[Dict[str, Any]] = Field(None, description=\"Direct data input\")\n    data_reference: Optional[str] = Field(None, description=\"Reference to external data\")\n    parameters: Dict[str, Any] = Field(default_factory=dict, description=\"Analysis parameters\")\n\nclass TaskResponse(BaseModel):\n    task_id: str = Field(..., description=\"Unique task identifier\")\n    status: str = Field(..., description=\"Task status\")\n    audit_id: str = Field(..., description=\"Audit trail identifier\")\n\nclass HealthResponse(BaseModel):\n    status: str = Field(..., description=\"Module status\")\n    module: str = Field(..., description=\"Module name\")\n    version: str = Field(..., description=\"Module version\")\n    active_tasks: int = Field(..., description=\"Number of active tasks\")\n    queue_size: int = Field(..., description=\"Tasks waiting in queue\")\n\nclass AnalysisModuleAPI:\n    \"\"\"\n    FastAPI wrapper for BLUX modules.\n    Provides RESTful API for module interaction.\n    \"\"\"\n\n    def __init__(self, module: BLUXModule, title: str = \"BLUX Module API\"):\n        self.module = module\n        self.app = FastAPI(title=title, version=module.config.version)\n\n        # Configure CORS\n        self.app.add_middleware(\n            CORSMiddleware,\n            allow_origins=[\"*\"],  # Configure appropriately\n            allow_credentials=True,\n            allow_methods=[\"*\"],\n            allow_headers=[\"*\"],\n        )\n\n        self._setup_routes()\n\n    def _setup_routes(self) -&gt; None:\n        \"\"\"Setup API routes.\"\"\"\n\n        @self.app.get(\"/health\", response_model=HealthResponse)\n        async def health_check():\n            \"\"\"Health check endpoint.\"\"\"\n            return await self.module.health_check()\n\n        @self.app.post(\"/v1/analyze\", response_model=TaskResponse)\n        async def analyze_data(\n            request: TaskRequest,\n            background_tasks: BackgroundTasks\n        ):\n            \"\"\"Submit data for analysis.\"\"\"\n            try:\n                # Generate task ID\n                task_id = f\"task_{hash(str(request.dict()))}\"\n\n                # Submit for processing\n                await self.module.task_queue.put((task_id, request.dict()))\n\n                return TaskResponse(\n                    task_id=task_id,\n                    status=\"submitted\",\n                    audit_id=f\"aud_{task_id}\"\n                )\n\n            except Exception as e:\n                raise HTTPException(status_code=500, detail=str(e))\n\n        @self.app.get(\"/v1/tasks/{task_id}\")\n        async def get_task_status(task_id: str):\n            \"\"\"Get task status.\"\"\"\n            if task_id in self.module.active_tasks:\n                return {\"task_id\": task_id, \"status\": \"processing\"}\n            else:\n                return {\"task_id\": task_id, \"status\": \"completed\"}  # Simplified\n\n        @self.app.get(\"/capabilities\")\n        async def get_capabilities():\n            \"\"\"Get module capabilities.\"\"\"\n            return self.module.get_capabilities()\n\n# Usage example\ndef create_api() -&gt; FastAPI:\n    \"\"\"Create and configure the API instance.\"\"\"\n    config = ModuleConfig(\n        name=\"data-analysis-module\",\n        version=\"1.0.0\",\n        max_concurrent_tasks=5\n    )\n\n    module = DataAnalysisModule(config)\n    api = AnalysisModuleAPI(module)\n\n    # Add startup event to initialize module\n    @api.app.on_event(\"startup\")\n    async def startup_event():\n        await module.initialize()\n\n    return api.app\n\n# For running directly\nif __name__ == \"__main__\":\n    import uvicorn\n\n    app = create_api()\n    uvicorn.run(app, host=\"0.0.0.0\", port=8000)\n\"\"\"\nANCHOR_END: module_api\n</code></pre> <pre><code>\n## Configuration Management\n\n### Module Configuration\n```python\n\"\"\"\nANCHOR: module_config\n\"\"\"\nimport os\nfrom typing import Dict, Any\nimport yaml\nfrom pydantic import BaseSettings, validator\n\nclass ModuleSettings(BaseSettings):\n    \"\"\"Module settings with validation.\"\"\"\n\n    # Basic settings\n    module_name: str = \"my-blux-module\"\n    module_version: str = \"1.0.0\"\n    environment: str = \"development\"\n\n    # BLUX integration\n    blux_lite_host: str = \"localhost:50051\"\n    blux_guard_host: str = \"localhost:50052\"\n    blux_reg_host: str = \"localhost:50050\"\n\n    # Performance\n    max_concurrent_tasks: int = 10\n    task_timeout_seconds: int = 300\n\n    # Security\n    enable_authentication: bool = True\n    audit_level: str = \"detailed\"\n\n    # Custom settings\n    analysis_cache_size: int = 1000\n    enable_advanced_analytics: bool = False\n\n    class Config:\n        env_prefix = \"BLUX_MODULE_\"\n        case_sensitive = False\n\n    @validator('environment')\n    def validate_environment(cls, v):\n        allowed = ['development', 'staging', 'production']\n        if v not in allowed:\n            raise ValueError(f'Environment must be one of {allowed}')\n        return v\n\n    @validator('audit_level')\n    def validate_audit_level(cls, v):\n        allowed = ['none', 'basic', 'detailed', 'verbose']\n        if v not in allowed:\n            raise ValueError(f'Audit level must be one of {allowed}')\n        return v\n\nclass ConfigManager:\n    \"\"\"Manages module configuration.\"\"\"\n\n    def __init__(self, config_path: str = None):\n        self.config_path = config_path\n        self.settings = ModuleSettings()\n        self.custom_config: Dict[str, Any] = {}\n\n    def load_from_file(self, file_path: str) -&gt; None:\n        \"\"\"Load configuration from YAML file.\"\"\"\n        with open(file_path, 'r') as f:\n            file_config = yaml.safe_load(f)\n            self.custom_config.update(file_config)\n\n    def get(self, key: str, default: Any = None) -&gt; Any:\n        \"\"\"Get configuration value.\"\"\"\n        # Check environment variables first\n        env_key = f\"BLUX_MODULE_{key.upper()}\"\n        if env_key in os.environ:\n            return os.environ[env_key]\n\n        # Check custom config\n        if key in self.custom_config:\n            return self.custom_config[key]\n\n        # Check settings\n        if hasattr(self.settings, key):\n            return getattr(self.settings, key)\n\n        return default\n\n    def to_dict(self) -&gt; Dict[str, Any]:\n        \"\"\"Convert configuration to dictionary.\"\"\"\n        config_dict = self.settings.dict()\n        config_dict.update(self.custom_config)\n        return config_dict\n\n# Usage example\ndef setup_module_config() -&gt; ConfigManager:\n    \"\"\"Setup module configuration.\"\"\"\n    config = ConfigManager()\n\n    # Load from file if exists\n    if os.path.exists('config/module.yaml'):\n        config.load_from_file('config/module.yaml')\n\n    # Override with environment variables\n    # (handled automatically by pydantic)\n\n    return config\n\"\"\"\nANCHOR_END: module_config\n</code></pre> <p>Testing Custom Modules</p> <p>Comprehensive Test Suite</p> <pre><code>\"\"\"\nANCHOR: module_tests\n\"\"\"\nimport pytest\nimport asyncio\nfrom unittest.mock import AsyncMock, patch, MagicMock\nimport sys\nimport os\n\n# Add module to path\nsys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))\n\nfrom src.my_blux_module.core import BLUXModule, ModuleConfig, ModuleStatus\nfrom src.my_blux_module.specialized import DataAnalysisModule\n\nclass TestBLUXModule:\n    \"\"\"Test base BLUX module functionality.\"\"\"\n\n    @pytest.fixture\n    def module_config(self):\n        \"\"\"Create test module configuration.\"\"\"\n        return ModuleConfig(\n            name=\"test-module\",\n            version=\"1.0.0\",\n            max_concurrent_tasks=2\n        )\n\n    @pytest.fixture\n    async def blux_module(self, module_config):\n        \"\"\"Create test module instance.\"\"\"\n        module = BLUXModule(module_config)\n        yield module\n        # Cleanup\n        for task in module.active_tasks.values():\n            task.cancel()\n\n    @pytest.mark.asyncio\n    async def test_module_initialization(self, blux_module, module_config):\n        \"\"\"Test module initialization.\"\"\"\n        await blux_module.initialize()\n\n        assert blux_module.status == ModuleStatus.READY\n        assert blux_module.config == module_config\n\n    @pytest.mark.asyncio\n    async def test_capabilities(self, blux_module):\n        \"\"\"Test capabilities reporting.\"\"\"\n        capabilities = blux_module.get_capabilities()\n\n        assert isinstance(capabilities, dict)\n        assert 'data_processing' in capabilities\n        assert 'audit_integration' in capabilities\n\n    @pytest.mark.asyncio\n    async def test_health_check(self, blux_module):\n        \"\"\"Test health check.\"\"\"\n        await blux_module.initialize()\n        health = await blux_module.health_check()\n\n        assert health['status'] == 'ready'\n        assert health['module'] == 'test-module'\n        assert health['version'] == '1.0.0'\n\nclass TestDataAnalysisModule:\n    \"\"\"Test data analysis module functionality.\"\"\"\n\n    @pytest.fixture\n    async def analysis_module(self):\n        \"\"\"Create test analysis module.\"\"\"\n        config = ModuleConfig(\n            name=\"test-analysis-module\",\n            version=\"1.0.0\"\n        )\n        module = DataAnalysisModule(config)\n        await module.initialize()\n        yield module\n\n        # Cleanup\n        for task in module.active_tasks.values():\n            task.cancel()\n\n    @pytest.mark.asyncio\n    async def test_statistical_analysis(self, analysis_module):\n        \"\"\"Test statistical analysis.\"\"\"\n        test_data = {\"values\": [1, 2, 3, 4, 5]}\n        result = await analysis_module._statistical_analysis(test_data, {})\n\n        assert result['mean'] == 3.0\n        assert result['min'] == 1\n        assert result['max'] == 5\n        assert result['count'] == 5\n\n    @pytest.mark.asyncio\n    async def test_pattern_analysis(self, analysis_module):\n        \"\"\"Test pattern analysis.\"\"\"\n        increasing_data = {\"values\": [1, 2, 3, 4, 5]}\n        result = await analysis_module._pattern_analysis(increasing_data, {})\n\n        assert \"increasing_sequence\" in result['patterns_detected']\n        assert result['pattern_count'] == 1\n\n    @pytest.mark.asyncio\n    async def test_trend_analysis(self, analysis_module):\n        \"\"\"Test trend analysis.\"\"\"\n        increasing_data = {\"values\": [1, 2, 3, 4, 5]}\n        result = await analysis_module._trend_analysis(increasing_data, {})\n\n        assert result['trend'] == 'increasing'\n        assert result['change_percentage'] == 400.0  # (5-1)/1 * 100\n\n    @pytest.mark.asyncio\n    async def test_full_analysis_workflow(self, analysis_module):\n        \"\"\"Test complete analysis workflow.\"\"\"\n        task_data = {\n            \"analysis_type\": \"statistical\",\n            \"data\": {\"values\": [10, 20, 30, 40, 50]},\n            \"parameters\": {}\n        }\n\n        result = await analysis_module.process_task(task_data)\n\n        assert result['analysis_type'] == 'statistical'\n        assert 'result' in result\n        assert 'metadata' in result\n        assert result['metadata']['data_points'] == 5\n\n# Integration tests\n@pytest.mark.integration\nclass TestModuleIntegration:\n    \"\"\"Integration tests for module with BLUX ecosystem.\"\"\"\n\n    @pytest.mark.asyncio\n    async def test_module_registration(self):\n        \"\"\"Test module registration with BLUX Lite.\"\"\"\n        # This would test actual registration with a test BLUX instance\n        pass\n\n    @pytest.mark.asyncio \n    async def test_audit_integration(self):\n        \"\"\"Test audit system integration.\"\"\"\n        # This would test audit recording with blux-guard\n        pass\n\n# Mock testing for external dependencies\n@pytest.mark.asyncio\nasync def test_with_mocked_dependencies():\n    \"\"\"Test with mocked BLUX services.\"\"\"\n    with patch('aiohttp.ClientSession') as mock_session:\n        # Setup mock responses\n        mock_response = AsyncMock()\n        mock_response.json.return_value = {\"status\": \"registered\"}\n        mock_session.post.return_value.__aenter__.return_value = mock_response\n\n        # Test module initialization\n        config = ModuleConfig(name=\"test-module\")\n        module = BLUXModule(config)\n\n        await module._register_module()\n\n        # Verify mock was called\n        mock_session.post.assert_called_once()\n\n# Performance tests\n@pytest.mark.performance\nclass TestModulePerformance:\n    \"\"\"Performance tests for the module.\"\"\"\n\n    @pytest.mark.asyncio\n    async def test_concurrent_processing(self):\n        \"\"\"Test processing multiple tasks concurrently.\"\"\"\n        config = ModuleConfig(\n            name=\"perf-test-module\",\n            max_concurrent_tasks=5\n        )\n        module = DataAnalysisModule(config)\n        await module.initialize()\n\n        # Submit multiple tasks\n        tasks = []\n        for i in range(10):\n            task_data = {\n                \"analysis_type\": \"statistical\",\n                \"data\": {\"values\": list(range(i, i + 10))},\n                \"parameters\": {}\n            }\n            tasks.append(module.process_task(task_data))\n\n        # Process concurrently\n        results = await asyncio.gather(*tasks, return_exceptions=True)\n\n        # Verify all tasks completed\n        assert len(results) == 10\n        assert all(not isinstance(r, Exception) for r in results)\n\n        # Cleanup\n        for task in module.active_tasks.values():\n            task.cancel()\n\n# Configuration tests\ndef test_configuration_validation():\n    \"\"\"Test configuration validation.\"\"\"\n    from src.my_blux_module.config import ModuleSettings\n\n    # Test valid configuration\n    valid_config = ModuleSettings(\n        module_name=\"test-module\",\n        environment=\"development\",\n        audit_level=\"detailed\"\n    )\n    assert valid_config.module_name == \"test-module\"\n\n    # Test invalid configuration\n    with pytest.raises(ValueError):\n        ModuleSettings(environment=\"invalid\")\n\n    with pytest.raises(ValueError):\n        ModuleSettings(audit_level=\"invalid\")\n\"\"\"\nANCHOR_END: module_tests\n</code></pre> <p>Deployment Configuration</p> <p>Docker Configuration</p> <pre><code>\"\"\"\nANCHOR: docker_config\n\"\"\"\n# Dockerfile for BLUX module\nFROM python:3.9-slim\n\n# Install system dependencies\nRUN apt-get update &amp;&amp; apt-get install -y \\\n    gcc \\\n    &amp;&amp; rm -rf /var/lib/apt/lists/*\n\n# Create non-root user\nRUN useradd -m -u 1000 blux\nUSER blux\n\n# Set working directory\nWORKDIR /app\n\n# Copy requirements first for better caching\nCOPY --chown=blux:blux requirements.txt .\n\n# Install Python dependencies\nRUN pip install --no-cache-dir -r requirements.txt\n\n# Copy application code\nCOPY --chown=blux:blux src/ ./src/\nCOPY --chown=blux:blux scripts/ ./scripts/\nCOPY --chown=blux:blux manifests/ ./manifests/\n\n# Create necessary directories\nRUN mkdir -p logs data\n\n# Expose port\nEXPOSE 8000\n\n# Health check\nHEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \\\n    CMD curl -f http://localhost:8000/health || exit 1\n\n# Start command\nCMD [\"python\", \"-m\", \"src.my_blux_module.api\"]\n\"\"\"\nANCHOR_END: docker_config\n</code></pre> <p>Kubernetes Deployment</p> <pre><code>\"\"\"\nANCHOR: kubernetes_config\n\"\"\"\n# k8s/deployment.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: my-blux-module\n  labels:\n    app: my-blux-module\n    component: processor\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: my-blux-module\n  template:\n    metadata:\n      labels:\n        app: my-blux-module\n      annotations:\n        prometheus.io/scrape: \"true\"\n        prometheus.io/port: \"8000\"\n        prometheus.io/path: \"/metrics\"\n    spec:\n      containers:\n      - name: module\n        image: my-registry/blux-module:1.0.0\n        ports:\n        - containerPort: 8000\n        env:\n        - name: BLUX_ENV\n          value: \"production\"\n        - name: BLUX_LITE_HOST\n          value: \"blux-lite.blux.svc.cluster.local\"\n        - name: BLUX_GUARD_HOST\n          value: \"blux-guard.blux.svc.cluster.local\"\n        - name: BLUX_MODULE_MAX_CONCURRENT_TASKS\n          value: \"10\"\n        resources:\n          requests:\n            memory: \"256Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"512Mi\"\n            cpu: \"500m\"\n        livenessProbe:\n          httpGet:\n            path: /health\n            port: 8000\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          httpGet:\n            path: /health\n            port: 8000\n          initialDelaySeconds: 5\n          periodSeconds: 5\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: my-blux-module\nspec:\n  selector:\n    app: my-blux-module\n  ports:\n  - port: 8000\n    targetPort: 8000\n  type: ClusterIP\n\"\"\"\nANCHOR_END: kubernetes_config\n</code></pre> <p>Integration with BLUX Ecosystem</p> <p>Service Discovery</p> <pre><code>\"\"\"\nANCHOR: service_discovery\n\"\"\"\nimport aiohttp\nimport asyncio\nfrom typing import Dict, Any, Optional\n\nclass BLUXServiceDiscovery:\n    \"\"\"\n    Handles service discovery within BLUX ecosystem.\n    Finds and connects to other BLUX services.\n    \"\"\"\n\n    def __init__(self, blux_lite_host: str):\n        self.blux_lite_host = blux_lite_host\n        self.service_cache: Dict[str, Dict] = {}\n        self.cache_ttl = 300  # 5 minutes\n        self.last_update: Dict[str, float] = {}\n\n    async def discover_services(self) -&gt; Dict[str, Dict]:\n        \"\"\"Discover all available BLUX services.\"\"\"\n        try:\n            async with aiohttp.ClientSession() as session:\n                async with session.get(\n                    f\"http://{self.blux_lite_host}/v1/services\",\n                    timeout=aiohttp.ClientTimeout(total=10)\n                ) as response:\n                    if response.status == 200:\n                        services = await response.json()\n                        self.service_cache = services\n                        self.last_update['services'] = asyncio.get_event_loop().time()\n                        return services\n                    else:\n                        raise Exception(f\"Service discovery failed: {response.status}\")\n\n        except Exception as e:\n            print(f\"Service discovery error: {e}\")\n            # Return cached services if available\n            if self.service_cache and self._is_cache_valid('services'):\n                return self.service_cache\n            raise\n\n    async def find_service(self, service_name: str) -&gt; Optional[Dict]:\n        \"\"\"Find specific service by name.\"\"\"\n        services = await self.discover_services()\n        return services.get(service_name)\n\n    async def get_service_endpoint(self, service_name: str, endpoint: str) -&gt; str:\n        \"\"\"Get full endpoint URL for a service.\"\"\"\n        service = await self.find_service(service_name)\n        if service and 'endpoints' in service:\n            base_url = service.get('endpoint', f'http://{service_name}')\n            return f\"{base_url}/{endpoint.lstrip('/')}\"\n        else:\n            raise Exception(f\"Service {service_name} not found or no endpoints\")\n\n    def _is_cache_valid(self, cache_key: str) -&gt; bool:\n        \"\"\"Check if cache is still valid.\"\"\"\n        if cache_key not in self.last_update:\n            return False\n\n        current_time = asyncio.get_event_loop().time()\n        return (current_time - self.last_update[cache_key]) &lt; self.cache_ttl\n\n# Usage in module\nasync def setup_service_discovery(module: BLUXModule) -&gt; BLUXServiceDiscovery:\n    \"\"\"Setup service discovery for module.\"\"\"\n    discovery = BLUXServiceDiscovery(module.config.blux_lite_host)\n\n    try:\n        services = await discovery.discover_services()\n        print(f\"Discovered {len(services)} BLUX services\")\n        return discovery\n    except Exception as e:\n        print(f\"Service discovery failed: {e}\")\n        # Continue with default configuration\n        return discovery\n\"\"\"\nANCHOR_END: service_discovery\n</code></pre> <p>Custom modules extend the constellation, each bringing unique light to the whole.  (( \u2022 ))</p> <p>Next Steps:</p> <ol> <li>Implement your module logic in the process_task method</li> <li>Configure your module in manifests/module.manifest.json</li> <li>Write comprehensive tests for your functionality</li> <li>Deploy and integrate with your BLUX ecosystem</li> </ol> <p>Remember to follow BLUX principles: Reflection &gt; Reaction, Coordination &gt; Concentration, Coherence &gt; Complexity, Principles &gt; Preferences.</p>"},{"location":"modules/blux-ca/","title":"BLUX CA","text":"<p>Conscious advisory whispering doctrine-aligned insight.</p>"},{"location":"modules/blux-ca/#overview","title":"Overview","text":"<p>BLUX cA (Conscious Advisor) provides reflective analysis, ethical reasoning, and recommendations that inform Lite workflows and Commander dashboards.</p>"},{"location":"modules/blux-ca/#quick-start","title":"Quick Start","text":"<pre><code>bluxq ca status\nbluxq ca advise --scenario resilience-drill\nbluxq ca journal --tail 20\n</code></pre>"},{"location":"modules/blux-ca/#architecture","title":"Architecture","text":"<ul> <li>Observation Layer \u2014 Ingests telemetry and doctrine context.</li> <li>Reflection Engine \u2014 Applies ethical heuristics and scenario modeling.</li> <li>Advisory Output \u2014 Streams recommendations to Commander and Lite.</li> </ul>"},{"location":"modules/blux-ca/#integration","title":"Integration","text":"<ul> <li>Subscribe Lite workflows: <code>bluxq lite connect --advisor ca</code>.</li> <li>Link Doctrine for policy context: <code>bluxq doctrine subscribe --module ca</code>.</li> <li>Surface in Commander: <code>bluxq commander panels enable --module ca</code>.</li> </ul>"},{"location":"modules/blux-ca/#operations-runbook","title":"Operations (Runbook)","text":"<ul> <li>Start: <code>bluxq ca service start</code></li> <li>Health: <code>bluxq ca status --verbose</code></li> <li>Journals: <code>bluxq ca journal --export advisors/latest.json</code></li> </ul>"},{"location":"modules/blux-ca/#security","title":"Security","text":"<ul> <li>Guard enforces ethical boundary checks before advice is executed.</li> <li>Reg signs advisory outputs for non-repudiation.</li> </ul>"},{"location":"modules/blux-ca/#configuration","title":"Configuration","text":"<ul> <li>YAML: <code>config/modules/ca.yaml</code></li> <li>Fields: <code>reflection_depth</code>, <code>playbook_bindings</code>, <code>telemetry_channels</code>.</li> <li>ENV: <code>BLUX_CA_HOST</code>, <code>BLUX_CA_REFLECTION_DEPTH</code>.</li> </ul>"},{"location":"modules/blux-ca/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>If recommendations stale: <code>bluxq ca refresh --source telemetry</code>.</li> <li>For doctrine mismatches: <code>bluxq doctrine diff --module ca</code>.</li> </ul>"},{"location":"modules/blux-ca/#source","title":"Source","text":"<p>Source: blux-ca repository</p>"},{"location":"modules/blux-ca/API/","title":"BLUX CA COMMANDS","text":"<p>Query the conscience through <code>bluxq</code>.</p>"},{"location":"modules/blux-ca/API/#cli-commands","title":"CLI Commands","text":"Command Description <code>bluxq ca status</code> Health summary <code>bluxq ca advise --scenario &lt;name&gt;</code> Generate advisory package <code>bluxq ca journal --tail &lt;n&gt;</code> Stream reflections <code>bluxq ca heuristics rebuild</code> Recompute internal models <code>bluxq ca suspend --reason &lt;text&gt;</code> Pause advisories"},{"location":"modules/blux-ca/API/#api-endpoints","title":"API Endpoints","text":"Method Path Purpose POST <code>/api/v1/advice</code> Request advisory GET <code>/api/v1/advice/{id}</code> Retrieve results POST <code>/api/v1/heuristics/rebuild</code> Trigger rebuild"},{"location":"modules/blux-ca/API/#source","title":"Source","text":"<p>Source: blux-ca API</p>"},{"location":"modules/blux-ca/ARCHITECTURE/","title":"BLUX CA ARCHITECTURE","text":"<p>Reflection engines woven with doctrine threads.</p>"},{"location":"modules/blux-ca/ARCHITECTURE/#components","title":"Components","text":"<ul> <li>Ingestion Pipelines \u2014 Accept telemetry, doctrine events, and operator prompts.</li> <li>Ethical Reasoner \u2014 Applies doctrine rulesets and heuristic layers.</li> <li>Advisory Broker \u2014 Publishes actionable guidance to Lite and Commander.</li> </ul>"},{"location":"modules/blux-ca/ARCHITECTURE/#flow","title":"Flow","text":"<ol> <li>Telemetry enters via OTLP streams.</li> <li>Doctrine updates trigger context recalibration.</li> <li>Reasoner evaluates scenarios using guardrail heuristics.</li> <li>Advice is signed by Reg and sent to subscribers.</li> </ol>"},{"location":"modules/blux-ca/ARCHITECTURE/#diagram","title":"Diagram","text":"<pre><code>graph TD\n    Telemetry--&gt;Ingest\n    Doctrine--&gt;Ingest\n    Ingest--&gt;Reasoner\n    Reasoner--&gt;Broker\n    Broker--&gt;Lite\n    Broker--&gt;Commander\n    Broker--&gt;Guard\n</code></pre>"},{"location":"modules/blux-ca/ARCHITECTURE/#dependencies","title":"Dependencies","text":"<ul> <li>Doctrine policy API.</li> <li>Guard ethical boundary service.</li> <li>Reg signing authority.</li> </ul>"},{"location":"modules/blux-ca/ARCHITECTURE/#source","title":"Source","text":"<p>Source: blux-ca ARCHITECTURE</p>"},{"location":"modules/blux-ca/CONFIGURATION/","title":"BLUX CA CONFIGURATION","text":"<p>Calibrate reflection depth and signal fidelity.</p>"},{"location":"modules/blux-ca/CONFIGURATION/#yaml-schema","title":"YAML Schema","text":"<pre><code>modules:\n  ca:\n    reflection_depth: medium\n    telemetry_channels:\n      - lite\n      - guard\n    doctrine_profiles:\n      - ethics-default\n</code></pre>"},{"location":"modules/blux-ca/CONFIGURATION/#environment-variables","title":"Environment Variables","text":"<ul> <li><code>BLUX_CA_HOST</code></li> <li><code>BLUX_CA_REFLECTION_DEPTH</code></li> </ul>"},{"location":"modules/blux-ca/CONFIGURATION/#cli","title":"CLI","text":"<ul> <li><code>bluxq ca config show</code></li> <li><code>bluxq ca config set --key reflection_depth --value deep</code></li> </ul>"},{"location":"modules/blux-ca/CONFIGURATION/#source","title":"Source","text":"<p>Source: blux-ca CONFIGURATION</p>"},{"location":"modules/blux-ca/INTEGRATION_GUIDE/","title":"BLUX CA INTEGRATION GUIDE","text":"<p>Let conscience flow into every automation.</p>"},{"location":"modules/blux-ca/INTEGRATION_GUIDE/#prerequisites","title":"Prerequisites","text":"<ul> <li><code>bluxq</code> CLI installed.</li> <li>Access to Doctrine API and Guard endorsement endpoints.</li> </ul>"},{"location":"modules/blux-ca/INTEGRATION_GUIDE/#steps","title":"Steps","text":"<ol> <li>Register advisory channel:    <code>bash    bluxq reg service create --module ca --name ca-advisor --scopes advise</code></li> <li>Grant Guard permissions:    <code>bash    bluxq guard policy grant --module ca --policy ethical-boundary</code></li> <li>Subscribe Lite workflows:    <code>bash    bluxq lite connect --advisor ca --workflow resilience</code></li> <li>Enable Commander panels:    <code>bash    bluxq commander panels enable --module ca</code></li> </ol>"},{"location":"modules/blux-ca/INTEGRATION_GUIDE/#configuration","title":"Configuration","text":"<pre><code>modules:\n  ca:\n    reflection_depth: medium\n    advisory_channels:\n      - lite\n      - commander\n</code></pre>"},{"location":"modules/blux-ca/INTEGRATION_GUIDE/#validation","title":"Validation","text":"<ul> <li><code>bluxq ca advise --scenario smoke-test</code></li> <li><code>bluxq commander panels list --module ca</code></li> </ul>"},{"location":"modules/blux-ca/INTEGRATION_GUIDE/#source","title":"Source","text":"<p>Source: blux-ca INTEGRATION</p>"},{"location":"modules/blux-ca/OPERATIONS/","title":"BLUX CA OPERATIONS","text":"<p>Curate advisory loops with deliberate rhythm.</p>"},{"location":"modules/blux-ca/OPERATIONS/#lifecycle-commands","title":"Lifecycle Commands","text":"<pre><code>bluxq ca service start\nbluxq ca service stop\nbluxq ca status --verbose\n</code></pre>"},{"location":"modules/blux-ca/OPERATIONS/#journaling","title":"Journaling","text":"<ul> <li><code>bluxq ca journal --tail 50</code></li> <li>Archive to S3 or equivalent via <code>bluxq ca journal --export s3://...</code>.</li> </ul>"},{"location":"modules/blux-ca/OPERATIONS/#calibration","title":"Calibration","text":"<ul> <li>Refresh doctrine context: <code>bluxq ca context sync</code>.</li> <li>Rebuild heuristics: <code>bluxq ca heuristics rebuild</code>.</li> </ul>"},{"location":"modules/blux-ca/OPERATIONS/#incident-handling","title":"Incident Handling","text":"<ul> <li>Suspend advisories: <code>bluxq ca suspend --reason incident-123</code>.</li> <li>Resume after review: <code>bluxq ca resume</code>.</li> </ul>"},{"location":"modules/blux-ca/OPERATIONS/#metrics","title":"Metrics","text":"<ul> <li><code>bluxq ca metrics --format table</code></li> <li>Commander panel: \"Advisory Latency\".</li> </ul>"},{"location":"modules/blux-ca/OPERATIONS/#source","title":"Source","text":"<p>Source: blux-ca OPERATIONS</p>"},{"location":"modules/blux-ca/SECURITY/","title":"BLUX CA SECURITY","text":"<p>Ethical guardrails woven into advisory circuits.</p>"},{"location":"modules/blux-ca/SECURITY/#risks","title":"Risks","text":"<ul> <li>Prompt injection through telemetry streams.</li> <li>Biased recommendations causing doctrine drift.</li> </ul>"},{"location":"modules/blux-ca/SECURITY/#mitigations","title":"Mitigations","text":"<ul> <li>Guard filters input sources and tags risk levels.</li> <li>Doctrine context signing ensures only approved principles load.</li> <li>Reg signs outgoing advice; Commander validates signature.</li> </ul>"},{"location":"modules/blux-ca/SECURITY/#monitoring","title":"Monitoring","text":"<ul> <li><code>bluxq guard audit --module ca</code></li> <li><code>bluxq ca journal --tail 20 | grep boundary</code></li> </ul>"},{"location":"modules/blux-ca/SECURITY/#response","title":"Response","text":"<ul> <li>Freeze heuristics: <code>bluxq ca heuristics lock</code>.</li> <li>Escalate to Doctrine Custodian for review.</li> </ul>"},{"location":"modules/blux-ca/SECURITY/#source","title":"Source","text":"<p>Source: blux-ca SECURITY</p>"},{"location":"modules/blux-commander/","title":"BLUX COMMANDER","text":"<p>The command bridge where operators see and steer.</p>"},{"location":"modules/blux-commander/#overview","title":"Overview","text":"<p>BLUX Commander is the web dashboard and API aggregation layer. It surfaces telemetry, governance workflows, and control endpoints for the ecosystem.</p>"},{"location":"modules/blux-commander/#quick-start","title":"Quick Start","text":"<pre><code>bluxq commander status\nbluxq commander dashboards list\nbluxq commander api list\n</code></pre>"},{"location":"modules/blux-commander/#architecture","title":"Architecture","text":"<ul> <li>API Gateway \u2014 Proxies module APIs with Reg authentication.</li> <li>Dashboard Engine \u2014 Configurable panels for operations, governance, privacy.</li> <li>WebSocket Hub \u2014 Streams live telemetry from Lite, Guard, and cA.</li> </ul>"},{"location":"modules/blux-commander/#integration","title":"Integration","text":"<ul> <li>Publish dashboards: <code>bluxq commander dashboards publish --module guard</code></li> <li>Connect to Reg for identity: <code>bluxq commander auth sync</code></li> <li>Enable CLI session recording: <code>bluxq commander connect</code></li> </ul>"},{"location":"modules/blux-commander/#operations","title":"Operations","text":"<ul> <li>Start: <code>bluxq commander service start</code></li> <li>Health: <code>bluxq commander status --verbose</code></li> <li>Logs: <code>bluxq commander logs --follow</code></li> </ul>"},{"location":"modules/blux-commander/#security","title":"Security","text":"<ul> <li>Enforces mutual TLS and Guard policy gating.</li> <li>Supports delegated administration with Reg-signed tokens.</li> </ul>"},{"location":"modules/blux-commander/#configuration","title":"Configuration","text":"<ul> <li>YAML: <code>config/modules/commander.yaml</code></li> <li>ENV: <code>BLUX_COMMANDER_HOST</code>, <code>BLUX_COMMANDER_TLS</code></li> </ul>"},{"location":"modules/blux-commander/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>UI blank: <code>bluxq commander status --trace</code></li> <li>API 401: <code>bluxq commander auth refresh</code></li> </ul>"},{"location":"modules/blux-commander/#source","title":"Source","text":"<p>Source: blux-commander repository</p>"},{"location":"modules/blux-commander/API/","title":"BLUX COMMANDER API","text":"<p>Invoke the bridge programmatically.</p>"},{"location":"modules/blux-commander/API/#cli-commands","title":"CLI Commands","text":"Command Description <code>bluxq commander status</code> Health <code>bluxq commander dashboards list</code> List dashboards <code>bluxq commander api list</code> Enumerate proxied APIs <code>bluxq commander ws test</code> Validate WebSocket <code>bluxq commander governance log</code> Record governance entry"},{"location":"modules/blux-commander/API/#rest-api","title":"REST API","text":"Method Path Purpose GET <code>/api/v1/dashboards</code> Fetch dashboards POST <code>/api/v1/dashboards</code> Publish dashboard GET <code>/api/v1/proxy/{module}</code> Proxy module API POST <code>/api/v1/governance</code> Create governance record"},{"location":"modules/blux-commander/API/#source","title":"Source","text":"<p>Source: blux-commander API</p>"},{"location":"modules/blux-commander/ARCHITECTURE/","title":"BLUX COMMANDER ARCHITECTURE","text":"<p>Bridge of dashboards and APIs.</p>"},{"location":"modules/blux-commander/ARCHITECTURE/#components","title":"Components","text":"<ul> <li>Gateway \u2014 Aggregates module APIs with capability enforcement.</li> <li>Dashboard Service \u2014 Renders panels defined via YAML.</li> <li>Notification Engine \u2014 Sends alerts to chat or email.</li> <li>WebSocket Broker \u2014 Streams telemetry updates.</li> </ul>"},{"location":"modules/blux-commander/ARCHITECTURE/#flow","title":"Flow","text":"<pre><code>graph TD\n    User--&gt;CommanderUI\n    CommanderUI--&gt;Gateway\n    Gateway--&gt;Lite\n    Gateway--&gt;Guard\n    Gateway--&gt;Reg\n    Gateway--&gt;Doctrine\n    Lite--&gt;Broker\n    Guard--&gt;Broker\n    Broker--&gt;CommanderUI\n</code></pre>"},{"location":"modules/blux-commander/ARCHITECTURE/#source","title":"Source","text":"<p>Source: blux-commander ARCHITECTURE</p>"},{"location":"modules/blux-commander/CONFIGURATION/","title":"BLUX COMMANDER CONFIGURATION","text":"<p>Compose dashboards and APIs declaratively.</p>"},{"location":"modules/blux-commander/CONFIGURATION/#yaml","title":"YAML","text":"<pre><code>modules:\n  commander:\n    host: commander.blux.local\n    tls:\n      enabled: true\n    dashboards:\n      - name: operations\n        widgets:\n          - lite.workflows\n          - guard.enforcement\n</code></pre>"},{"location":"modules/blux-commander/CONFIGURATION/#environment-variables","title":"Environment Variables","text":"<ul> <li><code>BLUX_COMMANDER_HOST</code></li> <li><code>BLUX_COMMANDER_TLS</code></li> </ul>"},{"location":"modules/blux-commander/CONFIGURATION/#cli","title":"CLI","text":"<ul> <li><code>bluxq commander config show</code></li> <li><code>bluxq commander config set --key dashboards[0].name --value sre</code></li> </ul>"},{"location":"modules/blux-commander/CONFIGURATION/#source","title":"Source","text":"<p>Source: blux-commander CONFIGURATION</p>"},{"location":"modules/blux-commander/INTEGRATION_GUIDE/","title":"BLUX COMMANDER INTEGRATION GUIDE","text":"<p>Wire your estate into the command bridge.</p>"},{"location":"modules/blux-commander/INTEGRATION_GUIDE/#steps","title":"Steps","text":"<ol> <li>Provision identity:    <code>bash    bluxq reg service create --module commander --name commander-gateway --scopes api</code></li> <li>Configure TLS endpoints in <code>config/modules/commander.yaml</code>.</li> <li>Register dashboards:    <code>bash    bluxq commander dashboards publish --file dashboards/core.yaml</code></li> <li>Enable API proxying for modules:    <code>bash    bluxq commander api enable --module guard    bluxq commander api enable --module lite</code></li> <li>Sync user roles via Reg groups.</li> </ol>"},{"location":"modules/blux-commander/INTEGRATION_GUIDE/#validation","title":"Validation","text":"<ul> <li><code>bluxq commander status</code></li> <li><code>bluxq commander dashboards list</code></li> </ul>"},{"location":"modules/blux-commander/INTEGRATION_GUIDE/#source","title":"Source","text":"<p>Source: blux-commander INTEGRATION</p>"},{"location":"modules/blux-commander/OPERATIONS/","title":"BLUX COMMANDER OPERATIONS","text":"<p>Sustain the bridge with calm precision.</p>"},{"location":"modules/blux-commander/OPERATIONS/#lifecycle","title":"Lifecycle","text":"<pre><code>bluxq commander service start\nbluxq commander service stop\nbluxq commander status --verbose\n</code></pre>"},{"location":"modules/blux-commander/OPERATIONS/#deployments","title":"Deployments","text":"<ul> <li>Container: <code>docker compose -f config/compose/commander.yml up -d</code></li> <li>Helm (if provided): <code>helm upgrade --install blux-commander charts/commander</code></li> </ul>"},{"location":"modules/blux-commander/OPERATIONS/#monitoring","title":"Monitoring","text":"<ul> <li><code>bluxq commander metrics --format json</code></li> <li>WebSocket diagnostics: <code>bluxq commander ws test</code></li> </ul>"},{"location":"modules/blux-commander/OPERATIONS/#backups","title":"Backups","text":"<ul> <li>Export settings: <code>bluxq commander export --output backups/commander.json</code></li> </ul>"},{"location":"modules/blux-commander/OPERATIONS/#incident-response","title":"Incident Response","text":"<ul> <li>Enable maintenance mode: <code>bluxq commander mode maintenance --message \"Upgrade\"</code></li> <li>Audit API calls: <code>bluxq commander audit --tail 100</code></li> </ul>"},{"location":"modules/blux-commander/OPERATIONS/#source","title":"Source","text":"<p>Source: blux-commander OPERATIONS</p>"},{"location":"modules/blux-commander/SECURITY/","title":"BLUX COMMANDER SECURITY","text":"<p>The bridge must be guarded.</p>"},{"location":"modules/blux-commander/SECURITY/#threats","title":"Threats","text":"<ul> <li>Session hijacking.</li> <li>API abuse.</li> <li>Dashboard tampering.</li> </ul>"},{"location":"modules/blux-commander/SECURITY/#controls","title":"Controls","text":"<ul> <li>Mutual TLS with Reg-signed certs.</li> <li>Guard policy gating for admin actions.</li> <li>Content Security Policy for UI assets.</li> </ul>"},{"location":"modules/blux-commander/SECURITY/#incident-response","title":"Incident Response","text":"<ul> <li>Force logout: <code>bluxq commander auth revoke --all</code></li> <li>Lock dashboards: <code>bluxq commander dashboards lock</code></li> </ul>"},{"location":"modules/blux-commander/SECURITY/#source","title":"Source","text":"<p>Source: blux-commander SECURITY</p>"},{"location":"modules/blux-doctrine/","title":"BLUX DOCTRINE","text":"<p>Values codified, guiding every decision.</p>"},{"location":"modules/blux-doctrine/#overview","title":"Overview","text":"<p>BLUX Doctrine encodes ethical principles, governance rules, and policy contracts consumed by every module. It provides versioned manifest files and approval workflows.</p>"},{"location":"modules/blux-doctrine/#quick-start","title":"Quick Start","text":"<pre><code>bluxq doctrine status\nbluxq doctrine pulse\nbluxq doctrine approve --proposal change-123\n</code></pre>"},{"location":"modules/blux-doctrine/#architecture","title":"Architecture","text":"<ul> <li>Manifest Store \u2014 Versioned doctrine files signed by Reg.</li> <li>Approval Workflow \u2014 Multi-signer process managed via <code>bluxq</code>.</li> <li>Policy API \u2014 Serves doctrine context to Guard, Lite, and cA.</li> </ul>"},{"location":"modules/blux-doctrine/#integration","title":"Integration","text":"<ul> <li>Guard: <code>bluxq guard policy link --doctrine main</code></li> <li>Lite: <code>bluxq lite connect --doctrine</code></li> <li>Commander: <code>bluxq commander panels enable --module doctrine</code></li> </ul>"},{"location":"modules/blux-doctrine/#operations","title":"Operations","text":"<ul> <li>Export doctrine: <code>bluxq doctrine export --output doctrine.yaml</code></li> <li>Import updates: <code>bluxq doctrine import --file doctrine.yaml</code></li> <li>Lock/unlock: <code>bluxq doctrine lock</code>, <code>bluxq doctrine unlock</code></li> </ul>"},{"location":"modules/blux-doctrine/#security","title":"Security","text":"<ul> <li>Requires multi-signer approvals.</li> <li>Telemetry includes doctrine digests for traceability.</li> </ul>"},{"location":"modules/blux-doctrine/#configuration","title":"Configuration","text":"<ul> <li>YAML: <code>config/doctrine.yaml</code></li> <li>ENV: <code>BLUX_DOCTRINE_PATH</code></li> </ul>"},{"location":"modules/blux-doctrine/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>Approval delays: <code>bluxq doctrine approvals list</code></li> <li>Drift detection: <code>bluxq doctrine diff</code></li> </ul>"},{"location":"modules/blux-doctrine/#source","title":"Source","text":"<p>Source: blux-doctrine repository</p>"},{"location":"modules/blux-doctrine/API/","title":"BLUX DOCTRINE COMMANDS","text":"<p>Shape policy with command precision.</p>"},{"location":"modules/blux-doctrine/API/#cli","title":"CLI","text":"Command Description <code>bluxq doctrine status</code> Show doctrine summary <code>bluxq doctrine propose --file &lt;path&gt;</code> Create proposal <code>bluxq doctrine approve --proposal &lt;id&gt;</code> Approve change <code>bluxq doctrine diff --proposal &lt;id&gt;</code> View diff <code>bluxq doctrine publish --proposal &lt;id&gt;</code> Publish"},{"location":"modules/blux-doctrine/API/#api","title":"API","text":"Method Path Purpose GET <code>/api/v1/doctrine</code> Retrieve current doctrine POST <code>/api/v1/proposals</code> Submit proposal POST <code>/api/v1/proposals/{id}/approve</code> Approve"},{"location":"modules/blux-doctrine/API/#source","title":"Source","text":"<p>Source: blux-doctrine API</p>"},{"location":"modules/blux-doctrine/ARCHITECTURE/","title":"BLUX DOCTRINE ARCHITECTURE","text":"<p>The moral spine of BLUX.</p>"},{"location":"modules/blux-doctrine/ARCHITECTURE/#components","title":"Components","text":"<ul> <li>Manifest Repository \u2014 Git-backed or database-stored doctrine files.</li> <li>Approval Engine \u2014 Collects signatures from custodians.</li> <li>Policy Service \u2014 Serves doctrine context via REST/gRPC.</li> <li>Audit Ledger \u2014 Immutable log of doctrine changes.</li> </ul>"},{"location":"modules/blux-doctrine/ARCHITECTURE/#flow","title":"Flow","text":"<ol> <li>Proposal created via <code>bluxq doctrine propose</code>.</li> <li>Approvals gathered from custodians.</li> <li>Doctrine manifest promoted and signed by Reg.</li> <li>Modules subscribe and refresh context.</li> </ol>"},{"location":"modules/blux-doctrine/ARCHITECTURE/#diagram","title":"Diagram","text":"<pre><code>graph TD\n    Proposal--&gt;Approval\n    Approval--&gt;Signing\n    Signing--&gt;Distribution\n    Distribution--&gt;Guard\n    Distribution--&gt;Lite\n    Distribution--&gt;cA\n    Distribution--&gt;Commander\n</code></pre>"},{"location":"modules/blux-doctrine/ARCHITECTURE/#source","title":"Source","text":"<p>Source: blux-doctrine ARCHITECTURE</p>"},{"location":"modules/blux-doctrine/CONFIGURATION/","title":"BLUX DOCTRINE CONFIGURATION","text":"<p>Declare principles in structured form.</p>"},{"location":"modules/blux-doctrine/CONFIGURATION/#yaml","title":"YAML","text":"<pre><code>doctrine:\n  default_profile: main\n  custodians:\n    - alice@outervoid\n    - ben@outervoid\n  approvals_required: 2\n</code></pre>"},{"location":"modules/blux-doctrine/CONFIGURATION/#environment-variables","title":"Environment Variables","text":"<ul> <li><code>BLUX_DOCTRINE_PATH</code></li> <li><code>BLUX_DOCTRINE_PROFILE</code></li> </ul>"},{"location":"modules/blux-doctrine/CONFIGURATION/#cli","title":"CLI","text":"<ul> <li><code>bluxq doctrine config show</code></li> <li><code>bluxq doctrine config set --key approvals_required --value 3</code></li> </ul>"},{"location":"modules/blux-doctrine/CONFIGURATION/#source","title":"Source","text":"<p>Source: blux-doctrine CONFIGURATION</p>"},{"location":"modules/blux-doctrine/INTEGRATION_GUIDE/","title":"BLUX DOCTRINE INTEGRATION GUIDE","text":"<p>Wire doctrine into every decision loop.</p>"},{"location":"modules/blux-doctrine/INTEGRATION_GUIDE/#steps","title":"Steps","text":"<ol> <li>Clone doctrine repo or sync submodule.</li> <li>Configure CLI access:    <code>bash    bluxq doctrine auth login --role custodian</code></li> <li>Subscribe modules:    <code>bash    bluxq guard policy link --doctrine main    bluxq lite connect --doctrine    bluxq ca context subscribe --doctrine main</code></li> <li>Set Commander panels:    <code>bash    bluxq commander panels enable --module doctrine</code></li> </ol>"},{"location":"modules/blux-doctrine/INTEGRATION_GUIDE/#validation","title":"Validation","text":"<ul> <li><code>bluxq doctrine pulse</code></li> <li><code>bluxq doctrine diff --since latest</code></li> </ul>"},{"location":"modules/blux-doctrine/INTEGRATION_GUIDE/#source","title":"Source","text":"<p>Source: blux-doctrine INTEGRATION</p>"},{"location":"modules/blux-doctrine/OPERATIONS/","title":"BLUX DOCTRINE OPERATIONS","text":"<p>Guard the principle ledger.</p>"},{"location":"modules/blux-doctrine/OPERATIONS/#lifecycle","title":"Lifecycle","text":"<pre><code>bluxq doctrine service start\nbluxq doctrine service stop\nbluxq doctrine status --verbose\n</code></pre>"},{"location":"modules/blux-doctrine/OPERATIONS/#change-management","title":"Change Management","text":"<ol> <li>Draft proposal: <code>bluxq doctrine propose --file updates.yaml</code></li> <li>Review diffs: <code>bluxq doctrine diff --proposal &lt;id&gt;</code></li> <li>Collect signatures: <code>bluxq doctrine approve --proposal &lt;id&gt;</code></li> <li>Publish: <code>bluxq doctrine publish --proposal &lt;id&gt;</code></li> </ol>"},{"location":"modules/blux-doctrine/OPERATIONS/#backups","title":"Backups","text":"<ul> <li><code>bluxq doctrine export --output backups/doctrine-$(date +%F).yaml</code></li> </ul>"},{"location":"modules/blux-doctrine/OPERATIONS/#incident-response","title":"Incident Response","text":"<ul> <li>Lock: <code>bluxq doctrine lock</code></li> <li>Audit: <code>bluxq doctrine audit --tail 100</code></li> </ul>"},{"location":"modules/blux-doctrine/OPERATIONS/#source","title":"Source","text":"<p>Source: blux-doctrine OPERATIONS</p>"},{"location":"modules/blux-doctrine/SECURITY/","title":"BLUX DOCTRINE SECURITY","text":"<p>Doctrine integrity is non-negotiable.</p>"},{"location":"modules/blux-doctrine/SECURITY/#threats","title":"Threats","text":"<ul> <li>Unauthorized doctrine edits.</li> <li>Compromised custodian credentials.</li> <li>Replay attacks on manifests.</li> </ul>"},{"location":"modules/blux-doctrine/SECURITY/#mitigations","title":"Mitigations","text":"<ul> <li>Multi-signer approvals enforced by Guard.</li> <li>Reg-signed manifests with monotonic version counters.</li> <li>Audit ledger replicated to secure storage.</li> </ul>"},{"location":"modules/blux-doctrine/SECURITY/#response","title":"Response","text":"<ul> <li>Lock doctrine: <code>bluxq doctrine lock</code></li> <li>Rotate custodian keys: <code>bluxq reg keys rotate --role custodian</code></li> </ul>"},{"location":"modules/blux-doctrine/SECURITY/#source","title":"Source","text":"<p>Source: blux-doctrine SECURITY</p>"},{"location":"modules/blux-guard/","title":"BLUX GUARD","text":"<p>The sentinel cockpit where trust is enforced.</p>"},{"location":"modules/blux-guard/#overview","title":"Overview","text":"<p>BLUX Guard delivers a developer security cockpit, terminal shell enforcement, and policy analytics. It enforces doctrine-aligned guardrails for every workflow, API call, and CLI command.</p>"},{"location":"modules/blux-guard/#quick-start","title":"Quick Start","text":"<pre><code>bluxq guard status\nbluxq guard policy list\nbluxq guard audit --tail 50\n</code></pre>"},{"location":"modules/blux-guard/#architecture","title":"Architecture","text":"<ul> <li>Policy Engine \u2014 Evaluates doctrine constraints in real time.</li> <li>Terminal Shell \u2014 Enforces command policies for developers.</li> <li>Cockpit UI \u2014 Surfaces enforcement metrics through Commander integration.</li> </ul>"},{"location":"modules/blux-guard/#integration","title":"Integration","text":"<ul> <li>Connect Lite workflows: <code>bluxq lite connect --guard</code></li> <li>Pair with Doctrine: <code>bluxq doctrine subscribe --module guard</code></li> <li>Expose cockpit panels: <code>bluxq commander panels enable --module guard</code></li> </ul>"},{"location":"modules/blux-guard/#operations","title":"Operations","text":"<ul> <li>Start: <code>bluxq guard service start</code></li> <li>Health: <code>bluxq guard status --verbose</code></li> <li>Telemetry: <code>bluxq guard metrics --format json</code></li> </ul>"},{"location":"modules/blux-guard/#security","title":"Security","text":"<ul> <li>Zero trust interceptors for CLI and API.</li> <li>Supports stability modes with observation/guided/autonomous toggles.</li> </ul>"},{"location":"modules/blux-guard/#configuration","title":"Configuration","text":"<ul> <li>YAML: <code>config/modules/guard.yaml</code></li> <li>ENV: <code>BLUX_GUARD_HOST</code>, <code>BLUX_GUARD_ENFORCEMENT</code></li> </ul>"},{"location":"modules/blux-guard/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>Shell denial: <code>bluxq guard explain --command \"...\"</code></li> <li>Policy drift: <code>bluxq guard policy diff</code></li> </ul>"},{"location":"modules/blux-guard/#source","title":"Source","text":"<p>Source: blux-guard repository</p>"},{"location":"modules/blux-guard/API/","title":"BLUX GUARD COMMANDS","text":"<p>Command the sentinel from <code>bluxq</code>.</p>"},{"location":"modules/blux-guard/API/#cli-commands","title":"CLI Commands","text":"Command Description <code>bluxq guard status</code> Summaries enforcement posture <code>bluxq guard policy list</code> List policies <code>bluxq guard policy import --file &lt;file&gt;</code> Import policies <code>bluxq guard audit --tail &lt;n&gt;</code> Stream audit events <code>bluxq guard explain --command &lt;cmd&gt;</code> Explain enforcement decision <code>bluxq guard mode set &lt;mode&gt;</code> Switch enforcement mode"},{"location":"modules/blux-guard/API/#api-endpoints","title":"API Endpoints","text":"Method Path Purpose POST <code>/api/v1/policies</code> Upload policy GET <code>/api/v1/audit</code> Fetch audit feed POST <code>/api/v1/mode</code> Set mode"},{"location":"modules/blux-guard/API/#source","title":"Source","text":"<p>Source: blux-guard API</p>"},{"location":"modules/blux-guard/ARCHITECTURE/","title":"BLUX GUARD ARCHITECTURE","text":"<p>Enforcement lattice woven around every command.</p>"},{"location":"modules/blux-guard/ARCHITECTURE/#components","title":"Components","text":"<ul> <li>Policy Evaluator \u2014 Resolves doctrine rules and capability manifests.</li> <li>Developer Shell Agent \u2014 Injected shell enforcing command policies.</li> <li>Telemetry Signer \u2014 Seals enforcement results for audits.</li> <li>Cockpit UI Adapter \u2014 Pushes data to Commander dashboards.</li> </ul>"},{"location":"modules/blux-guard/ARCHITECTURE/#flow","title":"Flow","text":"<ol> <li>CLI command enters guard shell.</li> <li>Evaluator checks doctrine and Reg capabilities.</li> <li>Decision broadcast to Lite (if workflow) or Commander (if manual).</li> <li>Telemetry signed and stored.</li> </ol>"},{"location":"modules/blux-guard/ARCHITECTURE/#diagram","title":"Diagram","text":"<pre><code>graph LR\n    CLI--&gt;Shell\n    Shell--&gt;Evaluator\n    Evaluator--&gt;Doctrine\n    Evaluator--&gt;Reg\n    Evaluator--&gt;Lite\n    Evaluator--&gt;Commander\n    Evaluator--&gt;Telemetry\n</code></pre>"},{"location":"modules/blux-guard/ARCHITECTURE/#source","title":"Source","text":"<p>Source: blux-guard ARCHITECTURE</p>"},{"location":"modules/blux-guard/CONFIGURATION/","title":"BLUX GUARD CONFIGURATION","text":"<p>Dial enforcement with precision.</p>"},{"location":"modules/blux-guard/CONFIGURATION/#yaml","title":"YAML","text":"<pre><code>modules:\n  guard:\n    enforcement_level: guided\n    cockpit:\n      panels:\n        - policy-overview\n        - terminal-events\n    shell:\n      enabled: true\n</code></pre>"},{"location":"modules/blux-guard/CONFIGURATION/#environment-variables","title":"Environment Variables","text":"<ul> <li><code>BLUX_GUARD_HOST</code></li> <li><code>BLUX_GUARD_ENFORCEMENT</code></li> </ul>"},{"location":"modules/blux-guard/CONFIGURATION/#cli","title":"CLI","text":"<ul> <li><code>bluxq guard config show</code></li> <li><code>bluxq guard config set --key enforcement_level --value autonomous</code></li> </ul>"},{"location":"modules/blux-guard/CONFIGURATION/#source","title":"Source","text":"<p>Source: blux-guard CONFIGURATION</p>"},{"location":"modules/blux-guard/INTEGRATION_GUIDE/","title":"BLUX GUARD INTEGRATION GUIDE","text":"<p>Embed enforcement into every interface.</p>"},{"location":"modules/blux-guard/INTEGRATION_GUIDE/#prerequisites","title":"Prerequisites","text":"<ul> <li>Doctrine policies defined and approved.</li> <li>Reg capabilities for modules requiring enforcement.</li> </ul>"},{"location":"modules/blux-guard/INTEGRATION_GUIDE/#steps","title":"Steps","text":"<ol> <li>Provision Guard identity:    <code>bash    bluxq reg service create --module guard --name guard-core --scopes enforce</code></li> <li>Load policies:    <code>bash    bluxq guard policy import --file policies/default.yaml</code></li> <li>Attach to Lite workflows:    <code>bash    bluxq lite connect --guard</code></li> <li>Enable developer shell:    <code>bash    bluxq guard shell install</code></li> <li>Link Commander cockpit:    <code>bash    bluxq commander panels enable --module guard</code></li> </ol>"},{"location":"modules/blux-guard/INTEGRATION_GUIDE/#validation","title":"Validation","text":"<ul> <li><code>bluxq guard policy list</code></li> <li><code>bluxq guard explain --command \"docker run\"</code></li> </ul>"},{"location":"modules/blux-guard/INTEGRATION_GUIDE/#source","title":"Source","text":"<p>Source: blux-guard INTEGRATION</p>"},{"location":"modules/blux-guard/OPERATIONS/","title":"BLUX GUARD OPERATIONS","text":"<p>Keep the sentinel vigilant.</p>"},{"location":"modules/blux-guard/OPERATIONS/#lifecycle","title":"Lifecycle","text":"<pre><code>bluxq guard service start\nbluxq guard service stop\nbluxq guard status --verbose\n</code></pre>"},{"location":"modules/blux-guard/OPERATIONS/#auditing","title":"Auditing","text":"<ul> <li><code>bluxq guard audit --tail 100</code></li> <li>Export to storage: <code>bluxq guard audit --export s3://blux-logs/guard.json</code></li> </ul>"},{"location":"modules/blux-guard/OPERATIONS/#policy-management","title":"Policy Management","text":"<ul> <li>Update: <code>bluxq guard policy import --file policies/update.yaml</code></li> <li>Rollback: <code>bluxq guard policy rollback --version &lt;id&gt;</code></li> </ul>"},{"location":"modules/blux-guard/OPERATIONS/#alerts","title":"Alerts","text":"<ul> <li>Configure thresholds: <code>bluxq guard alerts configure --policy high-risk</code></li> <li>Watch stream: <code>bluxq guard alerts watch</code></li> </ul>"},{"location":"modules/blux-guard/OPERATIONS/#source","title":"Source","text":"<p>Source: blux-guard OPERATIONS</p>"},{"location":"modules/blux-guard/SECURITY/","title":"BLUX GUARD SECURITY","text":"<p>Sentinel hardened for zero trust.</p>"},{"location":"modules/blux-guard/SECURITY/#threats","title":"Threats","text":"<ul> <li>Policy tampering.</li> <li>Unauthorized shell bypass.</li> <li>Telemetry forgery.</li> </ul>"},{"location":"modules/blux-guard/SECURITY/#mitigations","title":"Mitigations","text":"<ul> <li>Doctrine-signed policy bundles.</li> <li>Secure enclaves for shell agent.</li> <li>Reg-signed telemetry envelopes.</li> </ul>"},{"location":"modules/blux-guard/SECURITY/#response","title":"Response","text":"<ul> <li>Lock enforcement: <code>bluxq guard mode set observation</code>.</li> <li>Investigate: <code>bluxq guard audit --run &lt;id&gt;</code>.</li> </ul>"},{"location":"modules/blux-guard/SECURITY/#source","title":"Source","text":"<p>Source: blux-guard SECURITY</p>"},{"location":"modules/blux-lite/","title":"BLUX LITE","text":"<p>Orchestrates the pulse of autonomous workflows with doctrine as compass.</p>"},{"location":"modules/blux-lite/#overview","title":"Overview","text":"<p>BLUX Lite is the orchestrator that coordinates workflows across the ecosystem. It schedules jobs, invokes Guard checkpoints, and relays advisory insights from BLUX cA. Lite is the control tower for resilience drills and stability modes.</p>"},{"location":"modules/blux-lite/#quick-start","title":"Quick Start","text":"<pre><code>bluxq lite status\nbluxq lite deploy --file workflows/resilience.yaml\nbluxq lite run --workflow resilience --env stage\n</code></pre>"},{"location":"modules/blux-lite/#architecture","title":"Architecture","text":"<ul> <li>Workflow Engine \u2014 Event-driven orchestrator executing YAML-defined flows.</li> <li>Policy Hooks \u2014 Every transition calls Guard and Doctrine before proceeding.</li> <li>Telemetry Channel \u2014 Emits OpenTelemetry spans annotated with doctrine digests.</li> </ul>"},{"location":"modules/blux-lite/#integration","title":"Integration","text":"<ul> <li>Consumes Reg-issued service accounts defined in <code>config/modules/lite.yaml</code>.</li> <li>Publishes job events to Commander dashboards via WebSocket feed.</li> <li>Pulls advisory signals from cA to adjust branching logic.</li> </ul>"},{"location":"modules/blux-lite/#operations-runbook","title":"Operations (Runbook)","text":"<ul> <li>Start: <code>bluxq lite service start</code></li> <li>Stop: <code>bluxq lite service stop</code></li> <li>Health: <code>bluxq lite status --verbose</code></li> <li>Logs: <code>bluxq lite logs --follow</code></li> </ul>"},{"location":"modules/blux-lite/#security","title":"Security","text":"<ul> <li>Enforces Guard interceptors on every workflow step.</li> <li>Supports stability modes: observation, guided, autonomous.</li> <li>Doctrine approvals required for privileged workflows (<code>bluxq doctrine approve</code>).</li> </ul>"},{"location":"modules/blux-lite/#configuration","title":"Configuration","text":"<ul> <li>YAML: <code>config/modules/lite.yaml</code></li> <li>Key fields: <code>stability_mode</code>, <code>runner_pool</code>, <code>recovery_strategies</code>.</li> <li>ENV: <code>BLUX_LITE_HOST</code>, <code>BLUX_LITE_RUNNER_POOL</code>.</li> </ul>"},{"location":"modules/blux-lite/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>Stuck jobs: <code>bluxq lite queue list --pending</code></li> <li>Failed Guard check: inspect <code>bluxq guard audit --run &lt;id&gt;</code></li> <li>Telemetry gaps: confirm <code>bluxq quantum telemetry check</code>.</li> </ul>"},{"location":"modules/blux-lite/#source","title":"Source","text":"<p>Source: blux-lite repository</p>"},{"location":"modules/blux-lite/API/","title":"BLUX LITE COMMANDS","text":"<p>Command the orchestrator with precision.</p>"},{"location":"modules/blux-lite/API/#cli-commands-bluxq","title":"CLI Commands (<code>bluxq</code>)","text":"Command Description <code>bluxq lite status</code> Summaries runner pools and active workflows <code>bluxq lite deploy --file &lt;path&gt;</code> Deploy workflow manifest <code>bluxq lite run --workflow &lt;name&gt;</code> Execute workflow <code>bluxq lite pause --workflow &lt;name&gt;</code> Pause workflow <code>bluxq lite resume --workflow &lt;name&gt;</code> Resume workflow <code>bluxq lite queue list</code> Inspect pending runs <code>bluxq lite window create --module &lt;module&gt;</code> Schedule maintenance"},{"location":"modules/blux-lite/API/#api-endpoints-if-service-mode-enabled","title":"API Endpoints (if service mode enabled)","text":"Method Path Purpose POST <code>/api/v1/workflows</code> Submit workflow manifest GET <code>/api/v1/workflows/{id}</code> Retrieve workflow status POST <code>/api/v1/workflows/{id}:pause</code> Pause workflow POST <code>/api/v1/workflows/{id}:resume</code> Resume workflow"},{"location":"modules/blux-lite/API/#telemetry-commands","title":"Telemetry Commands","text":"<ul> <li><code>bluxq lite metrics --format prometheus</code></li> <li><code>bluxq lite traces export</code></li> </ul>"},{"location":"modules/blux-lite/API/#source","title":"Source","text":"<p>Source: blux-lite CLI</p>"},{"location":"modules/blux-lite/ARCHITECTURE/","title":"BLUX LITE ARCHITECTURE","text":"<p>Workflow constellations orbit doctrine gravity.</p>"},{"location":"modules/blux-lite/ARCHITECTURE/#components","title":"Components","text":"<ul> <li>Ingress \u2014 Receives workflow definitions via API or Git pushes.</li> <li>Scheduler \u2014 Prioritizes runs, respecting doctrine-defined guardrails.</li> <li>Runner Pools \u2014 Execute tasks in containerized sandboxes with Guard interceptors.</li> <li>Event Bus \u2014 Streams lifecycle events to Commander and cA.</li> </ul>"},{"location":"modules/blux-lite/ARCHITECTURE/#datacontrol-flows","title":"Data/Control Flows","text":"<ol> <li>Operators submit workflow manifests signed by Reg keys.</li> <li>Lite validates manifests against Doctrine schema.</li> <li>Guard intercepts each step; on approval, runner executes and emits telemetry.</li> <li>Events propagate to Commander dashboards and cA advisory loop.</li> </ol>"},{"location":"modules/blux-lite/ARCHITECTURE/#dependencies","title":"Dependencies","text":"<ul> <li>BLUX Reg for identity checks.</li> <li>BLUX Guard for enforcement.</li> <li>BLUX Doctrine for policy evaluation.</li> <li>Optional: External artifact stores referenced in tasks.</li> </ul>"},{"location":"modules/blux-lite/ARCHITECTURE/#high-level-diagram","title":"High-Level Diagram","text":"<pre><code>graph LR\n    Operator --&gt;|bluxq lite deploy| LiteAPI\n    LiteAPI --&gt; Scheduler\n    Scheduler --&gt; RunnerPool\n    RunnerPool --&gt; Guard\n    Guard --&gt; Doctrine\n    RunnerPool --&gt; EventBus\n    EventBus --&gt; Commander\n    EventBus --&gt; cA\n</code></pre>"},{"location":"modules/blux-lite/ARCHITECTURE/#scaling","title":"Scaling","text":"<ul> <li>Horizontal scaling by adding runner nodes defined in <code>config/modules/lite.yaml</code>.</li> <li>Use <code>bluxq lite scale --pool &lt;name&gt; --size &lt;n&gt;</code> for dynamic adjustments.</li> </ul>"},{"location":"modules/blux-lite/ARCHITECTURE/#source","title":"Source","text":"<p>Source: blux-lite ARCHITECTURE</p>"},{"location":"modules/blux-lite/CONFIGURATION/","title":"BLUX LITE CONFIGURATION","text":"<p>Tune orchestration through declarative manifests.</p>"},{"location":"modules/blux-lite/CONFIGURATION/#yaml-schema","title":"YAML Schema","text":"<pre><code>modules:\n  lite:\n    stability_mode: guided\n    runner_pool:\n      default:\n        size: 3\n        runtime: docker\n        sandbox: true\n    recovery_strategies:\n      - name: restart\n        retries: 3\n</code></pre>"},{"location":"modules/blux-lite/CONFIGURATION/#environment-variables","title":"Environment Variables","text":"<ul> <li><code>BLUX_LITE_HOST</code></li> <li><code>BLUX_LITE_PORT</code></li> <li><code>BLUX_LITE_RUNNER_POOL</code></li> </ul> <p>PowerShell:</p> <pre><code>$env:BLUX_LITE_HOST = \"localhost\"\n</code></pre>"},{"location":"modules/blux-lite/CONFIGURATION/#cli-helpers","title":"CLI Helpers","text":"<ul> <li><code>bluxq lite config show</code></li> <li><code>bluxq lite config diff --profile stage</code></li> </ul>"},{"location":"modules/blux-lite/CONFIGURATION/#source","title":"Source","text":"<p>Source: blux-lite CONFIGURATION</p>"},{"location":"modules/blux-lite/INTEGRATION_GUIDE/","title":"BLUX LITE INTEGRATION GUIDE","text":"<p>Thread Lite into your fabric without fray.</p>"},{"location":"modules/blux-lite/INTEGRATION_GUIDE/#overview","title":"Overview","text":"<p>This guide explains how to connect BLUX Lite to surrounding services within the ecosystem and enterprise landscape.</p>"},{"location":"modules/blux-lite/INTEGRATION_GUIDE/#prerequisites","title":"Prerequisites","text":"<ul> <li>BLUX Reg access with capability <code>lite:orchestrate</code>.</li> <li>Guard policies granting workflow execution rights.</li> <li>Doctrine manifests defining allowed workflows.</li> </ul>"},{"location":"modules/blux-lite/INTEGRATION_GUIDE/#steps","title":"Steps","text":"<ol> <li>Configure Identity \u2014 Register Lite runners:    <code>bash    bluxq reg service create --module lite --name lite-runner --scopes orchestrate</code></li> <li>Define Workflows \u2014 Commit YAML to <code>workflows/</code> with doctrine tags.</li> <li>Set Config \u2014 Update <code>config/modules/lite.yaml</code> with runner pools and stability mode.</li> <li>Validate \u2014    <code>bash    bluxq lite validate --file workflows/resilience.yaml</code></li> <li>Deploy \u2014    <code>bash    bluxq lite deploy --file workflows/resilience.yaml --env prod</code></li> </ol>"},{"location":"modules/blux-lite/INTEGRATION_GUIDE/#integration-points","title":"Integration Points","text":"<ul> <li>Guard: <code>bluxq guard policy link --workflow resilience</code></li> <li>Doctrine: <code>bluxq doctrine attest --workflow resilience</code></li> <li>Commander: <code>bluxq commander dashboards publish --module lite</code></li> </ul>"},{"location":"modules/blux-lite/INTEGRATION_GUIDE/#configuration-example","title":"Configuration Example","text":"<pre><code>modules:\n  lite:\n    stability_mode: guided\n    runner_pool:\n      default:\n        size: 5\n        runtime: docker\n</code></pre>"},{"location":"modules/blux-lite/INTEGRATION_GUIDE/#testing","title":"Testing","text":"<ul> <li>Dry run workflows with <code>bluxq lite run --workflow &lt;name&gt; --dry-run</code>.</li> <li>Use Commander staging dashboards for integration verification.</li> </ul>"},{"location":"modules/blux-lite/INTEGRATION_GUIDE/#source","title":"Source","text":"<p>Source: blux-lite INTEGRATION GUIDE</p>"},{"location":"modules/blux-lite/OPERATIONS/","title":"BLUX LITE OPERATIONS","text":"<p>Keep orchestration smooth even during turbulence.</p>"},{"location":"modules/blux-lite/OPERATIONS/#overview","title":"Overview","text":"<p>Operational guide for running BLUX Lite in production and staging environments.</p>"},{"location":"modules/blux-lite/OPERATIONS/#startstop","title":"Start/Stop","text":"<pre><code>bluxq lite service start\nbluxq lite service stop\n</code></pre> <p>PowerShell:</p> <pre><code>bluxq lite service start\n</code></pre>"},{"location":"modules/blux-lite/OPERATIONS/#health-checks","title":"Health Checks","text":"<ul> <li><code>bluxq lite status --format table</code></li> <li><code>bluxq lite health --probe readiness</code></li> </ul>"},{"location":"modules/blux-lite/OPERATIONS/#logs-telemetry","title":"Logs &amp; Telemetry","text":"<ul> <li><code>bluxq lite logs --follow</code></li> <li>Ship logs to telemetry exporter defined in <code>config/telemetry.yaml</code>.</li> </ul>"},{"location":"modules/blux-lite/OPERATIONS/#backups","title":"Backups","text":"<pre><code>bluxq lite export --output backups/lite-$(date +%F).yaml\n</code></pre> <p>Restore with <code>bluxq lite import --file backups/lite-&lt;date&gt;.yaml</code>.</p>"},{"location":"modules/blux-lite/OPERATIONS/#upgrades","title":"Upgrades","text":"<ol> <li>Freeze doctrine changes: <code>bluxq doctrine lock</code>.</li> <li>Deploy new runners: <code>bluxq lite rollout --artifact &lt;tag&gt;</code>.</li> <li>Monitor Guard approvals.</li> <li>Unlock doctrine once stable.</li> </ol>"},{"location":"modules/blux-lite/OPERATIONS/#rollback","title":"Rollback","text":"<pre><code>bluxq lite rollout --rollback &lt;deployment-id&gt;\n</code></pre>"},{"location":"modules/blux-lite/OPERATIONS/#alerts","title":"Alerts","text":"<ul> <li>Configure thresholds in Commander operations board.</li> <li>Use Guard to escalate severe policy blocks.</li> </ul>"},{"location":"modules/blux-lite/OPERATIONS/#source","title":"Source","text":"<p>Source: blux-lite OPERATIONS</p>"},{"location":"modules/blux-lite/SECURITY/","title":"BLUX LITE SECURITY","text":"<p>Every workflow step is watched by doctrine eyes.</p>"},{"location":"modules/blux-lite/SECURITY/#threat-model","title":"Threat Model","text":"<ul> <li>Unauthorized workflow execution.</li> <li>Tampering with runner images.</li> <li>Telemetry spoofing.</li> </ul>"},{"location":"modules/blux-lite/SECURITY/#controls","title":"Controls","text":"<ul> <li>Mandatory Guard approval for privileged stages (<code>bluxq guard approve</code>).</li> <li>Runner images signed by Reg and verified during rollout.</li> <li>TLS mutual auth between Lite services and other modules.</li> </ul>"},{"location":"modules/blux-lite/SECURITY/#hardening-checklist","title":"Hardening Checklist","text":"<ul> <li>Enable sandboxed runners via <code>config/modules/lite.yaml</code> -&gt; <code>runner_pool.*.sandbox: true</code>.</li> <li>Rotate service tokens weekly using <code>bluxq reg service rotate</code>.</li> <li>Monitor Guard audit feed for anomalies.</li> </ul>"},{"location":"modules/blux-lite/SECURITY/#incident-response","title":"Incident Response","text":"<ul> <li>Pause workflows: <code>bluxq lite pause --workflow &lt;name&gt;</code>.</li> <li>Export run history for forensics: <code>bluxq lite runs export --format json</code>.</li> </ul>"},{"location":"modules/blux-lite/SECURITY/#source","title":"Source","text":"<p>Source: blux-lite SECURITY</p>"},{"location":"modules/blux-quantum/","title":"BLUX QUANTUM (bluxq)","text":"<p>Single CLI to command the constellation.</p>"},{"location":"modules/blux-quantum/#overview","title":"Overview","text":"<p>BLUX Quantum delivers <code>bluxq</code>, the unified CLI across modules. It loads plugins, manages contexts, and exposes automation-friendly output formats.</p>"},{"location":"modules/blux-quantum/#quick-start","title":"Quick Start","text":"<pre><code>bluxq --version\nbluxq help\nbluxq modules list\n</code></pre>"},{"location":"modules/blux-quantum/#architecture","title":"Architecture","text":"<ul> <li>Core Launcher \u2014 Handles authentication, plugin discovery, telemetry.</li> <li>Plugin Host \u2014 Loads module command packs.</li> <li>Transport Layer \u2014 Connects to module APIs with Reg-authenticated sessions.</li> </ul>"},{"location":"modules/blux-quantum/#integration","title":"Integration","text":"<ul> <li>Install plugins from modules: <code>bluxq quantum plugins sync</code></li> <li>Configure context: <code>bluxq quantum context set stage</code></li> <li>Connect to Commander for command recording: <code>bluxq commander connect</code></li> </ul>"},{"location":"modules/blux-quantum/#operations","title":"Operations","text":"<ul> <li>Update CLI: <code>bluxq quantum upgrade</code></li> <li>Verify health: <code>bluxq quantum doctor</code></li> <li>Generate shell completions: <code>bluxq quantum completions bash</code></li> </ul>"},{"location":"modules/blux-quantum/#security","title":"Security","text":"<ul> <li>Supports hardware-backed keys and Reg-signed tokens.</li> <li>Guard interceptors inspect every command invocation.</li> </ul>"},{"location":"modules/blux-quantum/#configuration","title":"Configuration","text":"<ul> <li>YAML: <code>config/cli/bluxq.yaml</code></li> <li>ENV: <code>BLUX_CLI_CONTEXT</code>, <code>BLUX_CLI_TELEMETRY</code></li> </ul>"},{"location":"modules/blux-quantum/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>Plugin missing: <code>bluxq quantum plugins list --verbose</code></li> <li>Auth failure: <code>bluxq quantum auth refresh</code></li> </ul>"},{"location":"modules/blux-quantum/#source","title":"Source","text":"<p>Source: blux-quantum repository</p>"},{"location":"modules/blux-quantum/API/","title":"BLUX QUANTUM COMMANDS","text":"<p>Master the <code>bluxq</code> interface.</p>"},{"location":"modules/blux-quantum/API/#core-commands","title":"Core Commands","text":"Command Description <code>bluxq help</code> Display help <code>bluxq modules list</code> List installed module packs <code>bluxq quantum plugins sync</code> Sync plugins <code>bluxq quantum doctor</code> Diagnose CLI <code>bluxq quantum auth login</code> Authenticate <code>bluxq quantum completions &lt;shell&gt;</code> Generate completions"},{"location":"modules/blux-quantum/API/#module-invocation-pattern","title":"Module Invocation Pattern","text":"<pre><code>bluxq &lt;module&gt; &lt;command&gt; [options]\n</code></pre> <p>Example:</p> <pre><code>bluxq guard policy list --format json\n</code></pre>"},{"location":"modules/blux-quantum/API/#source","title":"Source","text":"<p>Source: blux-quantum CLI</p>"},{"location":"modules/blux-quantum/ARCHITECTURE/","title":"BLUX QUANTUM ARCHITECTURE","text":"<p>A gateway CLI with modular gravity.</p>"},{"location":"modules/blux-quantum/ARCHITECTURE/#layers","title":"Layers","text":"<ul> <li>Bootstrap \u2014 Auth handshake with Reg and Guard.</li> <li>Plugin Manager \u2014 Discovers module packs in <code>~/.blux/plugins</code> or repo.</li> <li>Transport \u2014 REST/gRPC clients for modules.</li> <li>Renderer \u2014 Formats output (table, json, yaml) for automation.</li> </ul>"},{"location":"modules/blux-quantum/ARCHITECTURE/#flow","title":"Flow","text":"<pre><code>graph TD\n    User--&gt;CLI\n    CLI--&gt;Auth\n    Auth--&gt;Reg\n    CLI--&gt;PluginMgr\n    PluginMgr--&gt;Modules\n    CLI--&gt;Renderer\n    Renderer--&gt;User\n</code></pre>"},{"location":"modules/blux-quantum/ARCHITECTURE/#extensibility","title":"Extensibility","text":"<ul> <li>Plugins declared via <code>bluxq-plugin.yaml</code> manifest.</li> <li>Supports Python entry points and shell wrappers.</li> </ul>"},{"location":"modules/blux-quantum/ARCHITECTURE/#source","title":"Source","text":"<p>Source: blux-quantum ARCHITECTURE</p>"},{"location":"modules/blux-quantum/CONFIGURATION/","title":"BLUX QUANTUM CONFIGURATION","text":"<p>Shape the CLI experience.</p>"},{"location":"modules/blux-quantum/CONFIGURATION/#yaml","title":"YAML","text":"<pre><code>cli:\n  context: stage\n  output: table\n  plugins:\n    sources:\n      - modules\n      - registry\n</code></pre>"},{"location":"modules/blux-quantum/CONFIGURATION/#environment-variables","title":"Environment Variables","text":"<ul> <li><code>BLUX_CLI_CONTEXT</code></li> <li><code>BLUX_CLI_OUTPUT</code></li> </ul>"},{"location":"modules/blux-quantum/CONFIGURATION/#cli","title":"CLI","text":"<ul> <li><code>bluxq quantum config show</code></li> <li><code>bluxq quantum config set --key output --value json</code></li> </ul>"},{"location":"modules/blux-quantum/CONFIGURATION/#source","title":"Source","text":"<p>Source: blux-quantum CONFIGURATION</p>"},{"location":"modules/blux-quantum/INTEGRATION_GUIDE/","title":"BLUX QUANTUM INTEGRATION GUIDE","text":"<p>Adopt <code>bluxq</code> everywhere teams operate.</p>"},{"location":"modules/blux-quantum/INTEGRATION_GUIDE/#installation","title":"Installation","text":"<pre><code>pip install bluxq  # or pip install -e ./blux-quantum\n</code></pre> <p>PowerShell:</p> <pre><code>pip install bluxq\n</code></pre>"},{"location":"modules/blux-quantum/INTEGRATION_GUIDE/#configure-context","title":"Configure Context","text":"<pre><code>bluxq quantum context set stage\nbluxq quantum auth login --capability operator\n</code></pre>"},{"location":"modules/blux-quantum/INTEGRATION_GUIDE/#plugin-sync","title":"Plugin Sync","text":"<pre><code>bluxq quantum plugins sync\nbluxq quantum plugins list\n</code></pre>"},{"location":"modules/blux-quantum/INTEGRATION_GUIDE/#ci-integration","title":"CI Integration","text":"<p>Add to pipelines:</p> <pre><code>- name: Install bluxq\n  run: pip install bluxq\n- name: Validate workflows\n  run: bluxq lite validate --file workflows/*.yaml\n</code></pre>"},{"location":"modules/blux-quantum/INTEGRATION_GUIDE/#source","title":"Source","text":"<p>Source: blux-quantum INTEGRATION</p>"},{"location":"modules/blux-quantum/OPERATIONS/","title":"BLUX QUANTUM OPERATIONS","text":"<p>Keep the CLI ready for every operator.</p>"},{"location":"modules/blux-quantum/OPERATIONS/#updates","title":"Updates","text":"<pre><code>bluxq quantum upgrade\n</code></pre> <ul> <li>Pin version via <code>requirements.txt</code> if used in automation.</li> </ul>"},{"location":"modules/blux-quantum/OPERATIONS/#diagnostics","title":"Diagnostics","text":"<ul> <li><code>bluxq quantum doctor</code></li> <li><code>bluxq quantum telemetry check</code></li> </ul>"},{"location":"modules/blux-quantum/OPERATIONS/#shell-integration","title":"Shell Integration","text":"<ul> <li><code>bluxq quantum completions bash &gt; ~/.blux/completions/bluxq.bash</code></li> <li>PowerShell: <code>bluxq quantum completions powershell | Out-File $PROFILE</code>.</li> </ul>"},{"location":"modules/blux-quantum/OPERATIONS/#plugin-maintenance","title":"Plugin Maintenance","text":"<ul> <li><code>bluxq quantum plugins prune</code></li> <li><code>bluxq quantum plugins update --module guard</code></li> </ul>"},{"location":"modules/blux-quantum/OPERATIONS/#source","title":"Source","text":"<p>Source: blux-quantum OPERATIONS</p>"},{"location":"modules/blux-quantum/SECURITY/","title":"BLUX QUANTUM SECURITY","text":"<p>The CLI is the front door; guard it fiercely.</p>"},{"location":"modules/blux-quantum/SECURITY/#risks","title":"Risks","text":"<ul> <li>Credential leakage.</li> <li>Plugin tampering.</li> <li>Downgrade attacks.</li> </ul>"},{"location":"modules/blux-quantum/SECURITY/#mitigations","title":"Mitigations","text":"<ul> <li>Uses Reg-issued tokens stored in OS keychain.</li> <li>Plugins signed and hashed; verify via <code>bluxq quantum plugins verify</code>.</li> <li>Guard intercepts for high-risk commands.</li> </ul>"},{"location":"modules/blux-quantum/SECURITY/#hardening","title":"Hardening","text":"<ul> <li>Enable FIDO2 hardware keys via <code>bluxq quantum auth devices add</code>.</li> <li>Restrict plugin sources in <code>config/cli/bluxq.yaml</code>.</li> </ul>"},{"location":"modules/blux-quantum/SECURITY/#source","title":"Source","text":"<p>Source: blux-quantum SECURITY</p>"},{"location":"modules/blux-reg/","title":"BLUX REG","text":"<p>Identity forge and capability ledger.</p>"},{"location":"modules/blux-reg/#overview","title":"Overview","text":"<p>BLUX Reg manages identities, signing keys, and capability manifests for the ecosystem. It anchors trust for Guard, Commander, Lite, and CLI usage.</p>"},{"location":"modules/blux-reg/#quick-start","title":"Quick Start","text":"<pre><code>bluxq reg status\nbluxq reg keys list\nbluxq reg capability list\n</code></pre>"},{"location":"modules/blux-reg/#architecture","title":"Architecture","text":"<ul> <li>CA Core \u2014 Issues certificates and tokens.</li> <li>Capability Store \u2014 Tracks what each module can do.</li> <li>Audit Ledger \u2014 Records issuance and revocation events.</li> </ul>"},{"location":"modules/blux-reg/#integration","title":"Integration","text":"<ul> <li>Provision service accounts: <code>bluxq reg service create</code></li> <li>Rotate keys: <code>bluxq reg keys rotate</code></li> <li>Link to Commander for access requests: <code>bluxq commander api enable --module reg</code></li> </ul>"},{"location":"modules/blux-reg/#operations","title":"Operations","text":"<ul> <li>Start: <code>bluxq reg service start</code></li> <li>Health: <code>bluxq reg status --verbose</code></li> <li>Logs: <code>bluxq reg audit --tail 100</code></li> </ul>"},{"location":"modules/blux-reg/#security","title":"Security","text":"<ul> <li>Hardware-backed key storage recommended.</li> <li>Guard verifies capabilities before allowing actions.</li> </ul>"},{"location":"modules/blux-reg/#configuration","title":"Configuration","text":"<ul> <li>YAML: <code>config/modules/reg.yaml</code></li> <li>ENV: <code>BLUX_REG_HOST</code>, <code>BLUX_REG_TOKEN_TTL</code></li> </ul>"},{"location":"modules/blux-reg/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>Revocation not propagating: <code>bluxq reg cache flush</code></li> <li>CLI auth issues: <code>bluxq quantum auth refresh</code></li> </ul>"},{"location":"modules/blux-reg/#source","title":"Source","text":"<p>Source: blux-reg repository</p>"},{"location":"modules/blux-reg/API/","title":"BLUX REG API","text":"<p>Issue, sign, revoke \u2014 from CLI or REST.</p>"},{"location":"modules/blux-reg/API/#cli-commands","title":"CLI Commands","text":"Command Description <code>bluxq reg status</code> Health <code>bluxq reg service create</code> Provision service account <code>bluxq reg keys list</code> List keys <code>bluxq reg keys rotate</code> Rotate key <code>bluxq reg capability list</code> List capabilities"},{"location":"modules/blux-reg/API/#rest-api","title":"REST API","text":"Method Path Purpose POST <code>/api/v1/services</code> Create service POST <code>/api/v1/keys/{id}/rotate</code> Rotate key GET <code>/api/v1/capabilities</code> List capabilities"},{"location":"modules/blux-reg/API/#source","title":"Source","text":"<p>Source: blux-reg API</p>"},{"location":"modules/blux-reg/ARCHITECTURE/","title":"BLUX REG ARCHITECTURE","text":"<p>The trust foundry.</p>"},{"location":"modules/blux-reg/ARCHITECTURE/#components","title":"Components","text":"<ul> <li>Certificate Authority \u2014 Issues TLS certificates and JWTs.</li> <li>Capability Registry \u2014 Stores module permissions.</li> <li>Audit Trail \u2014 Immutable log replicating to secure storage.</li> </ul>"},{"location":"modules/blux-reg/ARCHITECTURE/#flow","title":"Flow","text":"<pre><code>graph TD\n    Requestor--&gt;API\n    API--&gt;CA\n    CA--&gt;Signing\n    Signing--&gt;CapabilityStore\n    CapabilityStore--&gt;Modules\n    Modules--&gt;Audit\n</code></pre>"},{"location":"modules/blux-reg/ARCHITECTURE/#source","title":"Source","text":"<p>Source: blux-reg ARCHITECTURE</p>"},{"location":"modules/blux-reg/CONFIGURATION/","title":"BLUX REG CONFIGURATION","text":"<p>Configure the forge with clarity.</p>"},{"location":"modules/blux-reg/CONFIGURATION/#yaml","title":"YAML","text":"<pre><code>modules:\n  reg:\n    host: reg.blux.local\n    token_ttl: 3600\n    audit_replicas: 3\n</code></pre>"},{"location":"modules/blux-reg/CONFIGURATION/#environment-variables","title":"Environment Variables","text":"<ul> <li><code>BLUX_REG_HOST</code></li> <li><code>BLUX_REG_TOKEN_TTL</code></li> </ul>"},{"location":"modules/blux-reg/CONFIGURATION/#cli","title":"CLI","text":"<ul> <li><code>bluxq reg config show</code></li> <li><code>bluxq reg config set --key token_ttl --value 600</code></li> </ul>"},{"location":"modules/blux-reg/CONFIGURATION/#source","title":"Source","text":"<p>Source: blux-reg CONFIGURATION</p>"},{"location":"modules/blux-reg/INTEGRATION_GUIDE/","title":"BLUX REG INTEGRATION GUIDE","text":"<p>Forge identities and distribute capability maps.</p>"},{"location":"modules/blux-reg/INTEGRATION_GUIDE/#steps","title":"Steps","text":"<ol> <li>Bootstrap CA:    <code>bash    bluxq reg init --ca</code></li> <li>Create service accounts:    <code>bash    bluxq reg service create --module lite --scopes orchestrate    bluxq reg service create --module guard --scopes enforce</code></li> <li>Issue CLI certificates:    <code>bash    bluxq reg user enroll --email engineer@outervoid</code></li> <li>Sync with Commander access workflows.</li> </ol>"},{"location":"modules/blux-reg/INTEGRATION_GUIDE/#validation","title":"Validation","text":"<ul> <li><code>bluxq reg status</code></li> <li><code>bluxq reg capability list</code></li> </ul>"},{"location":"modules/blux-reg/INTEGRATION_GUIDE/#source","title":"Source","text":"<p>Source: blux-reg INTEGRATION</p>"},{"location":"modules/blux-reg/OPERATIONS/","title":"BLUX REG OPERATIONS","text":"<p>Maintain the forge with vigilance.</p>"},{"location":"modules/blux-reg/OPERATIONS/#lifecycle","title":"Lifecycle","text":"<pre><code>bluxq reg service start\nbluxq reg service stop\nbluxq reg status --verbose\n</code></pre>"},{"location":"modules/blux-reg/OPERATIONS/#key-management","title":"Key Management","text":"<ul> <li>List keys: <code>bluxq reg keys list</code></li> <li>Rotate: <code>bluxq reg keys rotate --id &lt;key&gt;</code></li> <li>Revoke: <code>bluxq reg keys revoke --id &lt;key&gt;</code></li> </ul>"},{"location":"modules/blux-reg/OPERATIONS/#capability-management","title":"Capability Management","text":"<ul> <li>Grant: <code>bluxq reg capability grant --module commander --capability dashboards</code></li> <li>Revoke: <code>bluxq reg capability revoke --module lite --capability orchestrate</code></li> </ul>"},{"location":"modules/blux-reg/OPERATIONS/#audit","title":"Audit","text":"<ul> <li><code>bluxq reg audit --tail 100</code></li> <li>Export: <code>bluxq reg audit --export backups/reg-audit.json</code></li> </ul>"},{"location":"modules/blux-reg/OPERATIONS/#source","title":"Source","text":"<p>Source: blux-reg OPERATIONS</p>"},{"location":"modules/blux-reg/SECURITY/","title":"BLUX REG SECURITY","text":"<p>Protect the keys that protect everything else.</p>"},{"location":"modules/blux-reg/SECURITY/#threats","title":"Threats","text":"<ul> <li>Key compromise.</li> <li>Capability escalation.</li> <li>Audit tampering.</li> </ul>"},{"location":"modules/blux-reg/SECURITY/#mitigations","title":"Mitigations","text":"<ul> <li>Hardware security modules optional but recommended.</li> <li>Capability approvals require Governance sign-off.</li> <li>Audit logs replicated and signed by Guard.</li> </ul>"},{"location":"modules/blux-reg/SECURITY/#response","title":"Response","text":"<ul> <li>Immediate key revoke: <code>bluxq reg keys revoke --id &lt;key&gt;</code></li> <li>Freeze capabilities: <code>bluxq reg capability freeze</code></li> </ul>"},{"location":"modules/blux-reg/SECURITY/#source","title":"Source","text":"<p>Source: blux-reg SECURITY</p>"},{"location":"troubleshooting/common-issues/","title":"Common Issues &amp; Solutions","text":""},{"location":"troubleshooting/common-issues/#quick-reference","title":"Quick Reference","text":"Symptom Likely Cause Solution Service won't start Missing dependencies Run <code>./scripts/bootstrap.sh</code> Health check fails Configuration issues Run <code>python tools/config-validator.py</code> Audit trails missing Path permissions Check <code>BLUX_AUDIT_PATH</code> permissions Service connection refused Services not running Check service status with <code>./scripts/health-check.sh</code>"},{"location":"troubleshooting/common-issues/#service-issues","title":"Service Issues","text":""},{"location":"troubleshooting/common-issues/#blux-lite-wont-start","title":"blux-lite Won't Start","text":"<p>Symptoms: - Error: \"Failed to connect to blux-reg\" - Service exits immediately - Health check fails</p> <p>Solutions:</p> <ol> <li>Check service dependencies:</li> </ol> <pre><code># Verify all services are running\n./scripts/health-check.sh --no-config\n\n# Check individual service health\ncurl http://localhost:50050/health  # blux-reg\ncurl http://localhost:50052/health  # blux-guard\n</code></pre> <ol> <li>Verify configuration:</li> </ol> <pre><code># Check environment variables\necho $BLUX_REG_HOST\necho $BLUX_GUARD_HOST\n\n# Validate configuration\npython tools/config-validator.py\n</code></pre> <ol> <li>Check service logs:</li> </ol> <pre><code># If using Docker\ndocker-compose logs blux-lite\n\n# If running directly\njournalctl -u blux-lite  # systemd\n</code></pre>"},{"location":"troubleshooting/common-issues/#blux-guard-authentication-failures","title":"blux-guard Authentication Failures","text":"<p>Symptoms:</p> <p>\u00b7 \"Authentication failed\" errors \u00b7 \"Invalid signature\" messages \u00b7 Service communication blocked</p> <p>Solutions:</p> <ol> <li>Verify identity service:</li> </ol> <pre><code># Check blux-reg health\ncurl http://localhost:50050/health\n\n# Test token issuance\ncurl -X POST http://localhost:50050/v1/tokens \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"service\": \"blux-lite\"}'\n</code></pre> <ol> <li>Check key material:</li> </ol> <pre><code># Verify keys exist\nls -la ~/.config/blux/keys/\n\n# Check key permissions (should be 600)\nstat -c \"%a %n\" ~/.config/blux/keys/*.key\n</code></pre> <ol> <li>Regenerate keys if needed:</li> </ol> <pre><code># Backup existing keys\n./scripts/backup.sh --tag pre-key-rotation\n\n# Regenerate (implementation specific)\nblux-reg key rotate --service blux-lite\n</code></pre>"},{"location":"troubleshooting/common-issues/#database-issues","title":"Database Issues","text":""},{"location":"troubleshooting/common-issues/#connection-pool-exhausted","title":"Connection Pool Exhausted","text":"<p>Symptoms:</p> <p>\u00b7 \"Too many connections\" errors \u00b7 Service slowdowns \u00b7 Database connection timeouts</p> <p>Solutions:</p> <ol> <li>Adjust connection pool settings:</li> </ol> <pre><code># config/production.yaml\ndatabase:\n  pool_size: 20\n  max_overflow: 10\n  pool_timeout: 30\n  pool_recycle: 3600\n</code></pre> <ol> <li>Monitor database connections:</li> </ol> <pre><code>-- PostgreSQL\nSELECT count(*) FROM pg_stat_activity;\n\n-- Show connections by application\nSELECT application_name, count(*) \nFROM pg_stat_activity \nGROUP BY application_name;\n</code></pre> <ol> <li>Implement connection cleanup:</li> </ol> <pre><code># Ensure proper connection handling\ntry:\n    # Use connection\n    result = db.execute(query)\nfinally:\n    # Always return to pool\n    db.close_connection()\n</code></pre>"},{"location":"troubleshooting/common-issues/#migration-failures","title":"Migration Failures","text":"<p>Symptoms:</p> <p>\u00b7 \"Migration version conflict\" errors \u00b7 Database schema out of sync \u00b7 Service startup failures</p> <p>Solutions:</p> <ol> <li>Check migration status:</li> </ol> <pre><code># Show current migration version\nalembic current\n\n# Show migration history\nalembic history --verbose\n</code></pre> <ol> <li>Resolve conflicts:</li> </ol> <pre><code># Create backup before migration\n./scripts/backup.sh --tag pre-migration\n\n# Attempt automatic resolution\nalembic upgrade head\n\n# If conflicts persist, manual intervention may be needed\nalembic stamp head  # Mark current state\n</code></pre> <ol> <li>Rollback if needed:</li> </ol> <pre><code># Rollback one migration\nalembic downgrade -1\n\n# Rollback to specific version\nalembic downgrade &lt;version&gt;\n</code></pre>"},{"location":"troubleshooting/common-issues/#performance-issues","title":"Performance Issues","text":""},{"location":"troubleshooting/common-issues/#high-memory-usage","title":"High Memory Usage","text":"<p>Symptoms:</p> <p>\u00b7 Services getting OOM killed \u00b7 System slowdowns \u00b7 High swap usage</p> <p>Solutions:</p> <ol> <li>Identify memory leaks:</li> </ol> <pre><code># Monitor memory usage\ndocker stats\n\n# Profile Python memory\npython -m memory_profiler script.py\n</code></pre> <ol> <li>Adjust resource limits:</li> </ol> <pre><code># Kubernetes resources\nresources:\n  requests:\n    memory: \"512Mi\"\n    cpu: \"500m\"\n  limits:\n    memory: \"1Gi\" \n    cpu: \"1000m\"\n</code></pre> <ol> <li>Optimize data structures:</li> </ol> <pre><code># Use generators for large datasets\ndef process_large_dataset():\n    for item in large_dataset:\n        yield process_item(item)\n\n# Clear caches periodically\nimport gc\ngc.collect()\n</code></pre>"},{"location":"troubleshooting/common-issues/#slow-response-times","title":"Slow Response Times","text":"<p>Symptoms:</p> <p>\u00b7 High latency on API calls \u00b7 Timeout errors \u00b7 Queue buildup</p> <p>Solutions:</p> <ol> <li>Identify bottlenecks:</li> </ol> <pre><code># Check database performance\nEXPLAIN ANALYZE SELECT * FROM large_table;\n\n# Monitor Redis performance\nredis-cli info stats | grep -E \"(instantaneous_ops_per_sec|used_memory)\"\n</code></pre> <ol> <li>Optimize queries:</li> </ol> <pre><code>-- Add missing indexes\nCREATE INDEX CONCURRENTLY idx_tasks_status ON tasks(status);\nCREATE INDEX CONCURRENTLY idx_audit_timestamp ON audit_entries(timestamp);\n</code></pre> <ol> <li>Implement caching:</li> </ol> <pre><code># Redis caching example\nimport redis\nr = redis.Redis()\n\ndef get_cached_data(key):\n    cached = r.get(key)\n    if cached:\n        return json.loads(cached)\n\n    # Compute and cache\n    data = compute_expensive_operation()\n    r.setex(key, 3600, json.dumps(data))  # Cache for 1 hour\n    return data\n</code></pre>"},{"location":"troubleshooting/common-issues/#security-issues","title":"Security Issues","text":""},{"location":"troubleshooting/common-issues/#certificate-problems","title":"Certificate Problems","text":"<p>Symptoms:</p> <p>\u00b7 TLS handshake failures \u00b7 \"Certificate expired\" errors \u00b7 mTLS connection rejections</p> <p>Solutions:</p> <ol> <li>Check certificate validity:</li> </ol> <pre><code># Check expiration\nopenssl x509 -in certificate.crt -noout -dates\n\n# Verify certificate chain\nopenssl verify -CAfile ca.crt certificate.crt\n</code></pre> <ol> <li>Rotate certificates:</li> </ol> <pre><code># Generate new certificates\nopenssl req -new -newkey rsa:4096 -nodes -keyout new.key -out new.csr\n\n# Distribute to services\n# Update configuration with new certificate paths\n</code></pre> <ol> <li>Update trust stores:</li> </ol> <pre><code># Update CA bundle\ncp new-ca.crt /etc/ssl/certs/\nupdate-ca-certificates\n</code></pre>"},{"location":"troubleshooting/common-issues/#audit-trail-issues","title":"Audit Trail Issues","text":"<p>Symptoms:</p> <p>\u00b7 Missing audit entries \u00b7 \"Audit write failed\" errors \u00b7 Audit file permission issues</p> <p>Solutions:</p> <ol> <li>Verify audit configuration:</li> </ol> <pre><code># Check audit path exists and is writable\nls -la $BLUX_AUDIT_PATH\ntouch $BLUX_AUDIT_PATH/test.txt &amp;&amp; rm $BLUX_AUDIT_PATH/test.txt\n\n# Check disk space\ndf -h $BLUX_AUDIT_PATH\n</code></pre> <ol> <li>Fix permissions:</li> </ol> <pre><code># Set correct permissions\nchmod 755 $BLUX_AUDIT_PATH\nchown blux:blux $BLUX_AUDIT_PATH\n\n# Fix existing audit files\nchmod 644 $BLUX_AUDIT_PATH/*.jsonl\n</code></pre> <ol> <li>Recover from audit failures:</li> </ol> <pre><code># Implement audit fallback\ntry:\n    write_audit_entry(entry)\nexcept IOError as e:\n    # Fallback to system log\n    logging.error(f\"Audit write failed: {e}\")\n    # Queue for retry\n    queue_audit_retry(entry)\n</code></pre>"},{"location":"troubleshooting/common-issues/#network-issues","title":"Network Issues","text":""},{"location":"troubleshooting/common-issues/#service-discovery-problems","title":"Service Discovery Problems","text":"<p>Symptoms:</p> <p>\u00b7 \"Service not found\" errors \u00b7 Inter-service communication failures \u00b7 DNS resolution issues</p> <p>Solutions:</p> <ol> <li>Verify service registration:</li> </ol> <pre><code># Check if services are registered\ncurl http://localhost:50050/v1/services\n\n# Test service connectivity\nnc -zv blux-reg 50050\nnc -zv blux-guard 50052\n</code></pre> <ol> <li>Check DNS configuration:</li> </ol> <pre><code># Test DNS resolution\nnslookup blux-reg\ndig blux-guard\n\n# Check /etc/hosts for overrides\ncat /etc/hosts\n</code></pre> <ol> <li>Verify network policies:</li> </ol> <pre><code># Kubernetes network policy\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: blux-internal\nspec:\n  podSelector:\n    matchLabels:\n      app: blux\n  policyTypes:\n  - Ingress\n  ingress:\n  - from:\n    - podSelector:\n        matchLabels:\n          app: blux\n</code></pre>"},{"location":"troubleshooting/common-issues/#firewall-and-port-issues","title":"Firewall and Port Issues","text":"<p>Symptoms:</p> <p>\u00b7 Connection timeouts \u00b7 \"Connection refused\" errors \u00b7 Port binding failures</p> <p>Solutions:</p> <ol> <li>Check port availability:</li> </ol> <pre><code># Check if ports are in use\nnetstat -tulpn | grep :50050\nss -tulpn | grep :50050\n\n# Check firewall rules\niptables -L\nufw status  # Ubuntu\n</code></pre> <ol> <li>Open required ports:</li> </ol> <pre><code># Open ports in firewall\nufw allow 50050/tcp  # blux-reg\nufw allow 50051/tcp  # blux-lite  \nufw allow 50052/tcp  # blux-guard\nufw allow 50053/tcp  # blux-ca\n</code></pre> <ol> <li>Verify port binding:</li> </ol> <pre><code># Test port binding in code\nimport socket\n\ndef check_port_available(port):\n    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:\n        return s.connect_ex(('localhost', port)) != 0\n</code></pre>"},{"location":"troubleshooting/common-issues/#configuration-issues","title":"Configuration Issues","text":""},{"location":"troubleshooting/common-issues/#environment-variable-problems","title":"Environment Variable Problems","text":"<p>Symptoms:</p> <p>\u00b7 \"Required environment variable missing\" \u00b7 Configuration validation failures \u00b7 Service startup errors</p> <p>Solutions:</p> <ol> <li>Validate environment setup:</li> </ol> <pre><code># Check all required variables\npython tools/config-validator.py --check\n\n# Source environment file\nsource .env\n\n# Verify variable values\nenv | grep BLUX_\n</code></pre> <ol> <li>Set default values:</li> </ol> <pre><code>import os\n\n# Use defaults for optional variables\ndatabase_url = os.getenv('DATABASE_URL', 'sqlite:///./default.db')\nlog_level = os.getenv('LOG_LEVEL', 'info')\n</code></pre> <ol> <li>Configuration validation:</li> </ol> <pre><code>from pydantic import BaseSettings, validator\n\nclass Settings(BaseSettings):\n    database_url: str\n    log_level: str = 'info'\n\n    @validator('database_url')\n    def validate_database_url(cls, v):\n        if not v.startswith(('sqlite://', 'postgresql://')):\n            raise ValueError('Invalid database URL')\n        return v\n</code></pre>"},{"location":"troubleshooting/common-issues/#file-permission-issues","title":"File Permission Issues","text":"<p>Symptoms:</p> <p>\u00b7 \"Permission denied\" errors \u00b7 File creation failures \u00b7 Audit or log write errors</p> <p>Solutions:</p> <ol> <li>Check file permissions:</li> </ol> <pre><code># Verify directory permissions\nls -la /path/to/blux/data/\nstat /path/to/blux/data/\n\n# Check user permissions\nid\nwhoami\n</code></pre> <ol> <li>Fix permissions:</li> </ol> <pre><code># Set correct ownership\nchown -R blux:blux /path/to/blux/data/\n\n# Set secure permissions\nchmod 755 /path/to/blux/data/\nchmod 600 /path/to/blux/data/*.key  # Private keys\nchmod 644 /path/to/blux/data/*.jsonl  # Audit files\n</code></pre> <ol> <li>Use appropriate users:</li> </ol> <pre><code># Dockerfile example\nFROM python:3.9-slim\n\n# Create non-root user\nRUN useradd -m -u 1000 blux\nUSER blux\n\n# Copy application files\nCOPY --chown=blux:blux . /app\n</code></pre>"},{"location":"troubleshooting/common-issues/#recovery-procedures","title":"Recovery Procedures","text":"<p>Service Recovery</p> <ol> <li>Identify failed service:</li> </ol> <pre><code>./scripts/health-check.sh\n</code></pre> <ol> <li>Check service status:</li> </ol> <pre><code>systemctl status blux-lite  # systemd\ndocker-compose ps           # Docker\nkubectl get pods -n blux    # Kubernetes\n</code></pre> <ol> <li>Restart service:</li> </ol> <pre><code>systemctl restart blux-lite\ndocker-compose restart blux-lite\nkubectl rollout restart deployment/blux-lite -n blux\n</code></pre> <p>Data Recovery</p> <ol> <li>Identify data loss:</li> </ol> <pre><code># Check audit trail continuity\npython tools/audit-analyzer.py --verify-continuity\n\n# Verify database integrity\npg_checkdb blux_prod  # PostgreSQL\n</code></pre> <ol> <li>Restore from backup:</li> </ol> <pre><code># Restore database\npg_restore -d blux_prod backup_file.dump\n\n# Restore audit trails\n./scripts/restore.sh backups/backup-20251020/\n</code></pre> <ol> <li>Verify recovery:</li> </ol> <pre><code># Run comprehensive health check\n./scripts/health-check.sh\n\n# Verify data integrity\npython tools/audit-analyzer.py --validate\n</code></pre> <p>Every problem contains its solution; we just need to look clearly.  (( \u2022 ))</p> <p>Still stuck? Check the Debug Guide or open an issue.</p>"},{"location":"troubleshooting/debug-guide/","title":"Debug Guide","text":""},{"location":"troubleshooting/debug-guide/#debugging-philosophy","title":"Debugging Philosophy","text":"<p>\"The most effective debugging tool is still careful thought, coupled with judiciously placed print statements.\" \u2014 Brian Kernighan</p> <p>BLUX embraces systematic debugging through observation, hypothesis, and verification.</p>"},{"location":"troubleshooting/debug-guide/#debugging-levels","title":"Debugging Levels","text":""},{"location":"troubleshooting/debug-guide/#level-1-quick-diagnostics","title":"Level 1: Quick Diagnostics","text":"<pre><code># Basic system check\n./scripts/health-check.sh --quick\n\n# Service status\ndocker-compose ps\nkubectl get pods -n blux\n\n# Resource usage\ndocker stats\nkubectl top pods -n blux\n</code></pre> <p>Level 2: Log Analysis</p> <pre><code># Follow all logs\ndocker-compose logs -f\nkubectl logs -f deployment/blux-lite -n blux\n\n# Search for errors\ngrep -r \"ERROR\" logs/\njq 'select(.level == \"ERROR\")' logs/*.json\n\n# Structured log analysis\njq -r '\"\\(.timestamp) \\(.level) \\(.message)\"' logs/app.json | less\n</code></pre> <p>Level 3: Deep Investigation</p> <pre><code># Interactive debugging\nimport pdb; pdb.set_trace()\n\n# Performance profiling\nimport cProfile\ncProfile.run('my_function()')\n\n# Memory profiling\nfrom guppy import hpy\nh = hpy()\nprint(h.heap())\n</code></pre> <p>Debugging Tools</p> <p>Built-in Tools</p> <p>Health Check Deep Dive</p> <pre><code># Verbose health check\n./scripts/health-check.sh --verbose\n\n# Specific component checks\n./scripts/health-check.sh --no-security\n./scripts/health-check.sh --no-services\n</code></pre> <p>Configuration Validation</p> <pre><code># Comprehensive config check\npython tools/config-validator.py --env production\n\n# Environment verification\npython -c \"import os; [print(f'{k}: {v}') for k, v in os.environ.items() if 'BLUX' in k]\"\n</code></pre> <p>Audit Analysis</p> <pre><code># Recent activity\npython tools/audit-analyzer.py --last 1h\n\n# Security-focused analysis\npython tools/audit-analyzer.py --type security\n\n# Performance analysis\npython tools/audit-analyzer.py --type performance\n</code></pre> <p>External Tools</p> <p>Network Debugging</p> <pre><code># Check connectivity\nnc -zv localhost 50050\ntelnet localhost 50051\n\n# Network tracing\ntcpdump -i any port 50050\n</code></pre> <p>Process Monitoring</p> <pre><code># Real-time process monitoring\nhtop\niotop\n\n# Open files\nlsof -p $(pgrep blux-lite)\n\n# System calls\nstrace -p $(pgrep blux-lite)\n</code></pre> <p>Common Debugging Scenarios</p> <p>Scenario 1: Service Startup Failure</p> <p>Symptoms: Service crashes immediately on startup</p> <p>Debugging Steps:</p> <ol> <li>Check basic requirements:</li> </ol> <pre><code># Verify dependencies\npython --version\ndocker --version\nnode --version  # if applicable\n\n# Check file permissions\nls -la scripts/\nls -la ~/.config/blux/\n</code></pre> <ol> <li>Examine startup logs:</li> </ol> <pre><code># Run with debug logging\nBLUX_LOG_LEVEL=debug ./scripts/bootstrap.sh\n\n# Check system logs\njournalctl -u blux-lite -f  # systemd\ndocker-compose logs --tail=100 blux-lite\n</code></pre> <ol> <li>Test configuration:</li> </ol> <pre><code># Validate configuration\npython tools/config-validator.py\n\n# Test environment setup\npython -c \"\nimport os\nrequired_vars = ['BLUX_ENV', 'BLUX_AUDIT_PATH']\nfor var in required_vars:\n    print(f'{var}: {os.getenv(var, \\\"MISSING\\\")}')\n\"\n</code></pre> <p>Scenario 2: Inter-Service Communication Issues</p> <p>Symptoms: \"Connection refused\", \"Service unavailable\" errors</p> <p>Debugging Steps:</p> <ol> <li>Verify service discovery:</li> </ol> <pre><code># Check if services are registered\ncurl -s http://localhost:50050/v1/services | jq .\n\n# Test endpoint connectivity\nfor port in 50050 50051 50052 50053; do\n    echo \"Port $port: $(nc -zv localhost $port 2&gt;&amp;1 | grep succeeded)\"\ndone\n</code></pre> <ol> <li>Check service health:</li> </ol> <pre><code># Individual service health\nservices=(\"blux-reg\" \"blux-lite\" \"blux-guard\" \"blux-ca\")\nfor service in \"${services[@]}\"; do\n    echo \"$service: $(curl -s http://localhost:50050/health | jq -r '.status')\"\ndone\n</code></pre> <ol> <li>Network debugging:</li> </ol> <pre><code># Check DNS resolution\nnslookup blux-reg\ndig +short blux-guard\n\n# Check firewall rules\niptables -L -n | grep 5005\n</code></pre> <p>Scenario 3: Performance Degradation</p> <p>Symptoms: Slow response times, high resource usage</p> <p>Debugging Steps:</p> <ol> <li>Identify bottlenecks:</li> </ol> <pre><code># Resource monitoring\ndocker stats --no-stream\nkubectl top pods -n blux\n\n# Process analysis\nps aux --sort=-%cpu | head -10\nps aux --sort=-%mem | head -10\n</code></pre> <ol> <li>Database performance:</li> </ol> <pre><code>-- Check slow queries\nSELECT query, calls, total_time, mean_time\nFROM pg_stat_statements \nORDER BY mean_time DESC \nLIMIT 10;\n\n-- Check table sizes\nSELECT schemaname, tablename, pg_size_pretty(pg_total_relation_size(schemaname||'.'||tablename))\nFROM pg_tables \nWHERE schemaname NOT IN ('pg_catalog', 'information_schema')\nORDER BY pg_total_relation_size(schemaname||'.'||tablename) DESC;\n</code></pre> <ol> <li>Application profiling:</li> </ol> <pre><code># Add performance logging\nimport time\nfrom functools import wraps\n\ndef timer(func):\n    @wraps(func)\n    def wrapper(*args, **kwargs):\n        start = time.perf_counter()\n        result = func(*args, **kwargs)\n        end = time.perf_counter()\n        print(f\"{func.__name__} took {end - start:.4f} seconds\")\n        return result\n    return wrapper\n\n@timer\ndef slow_operation():\n    # Your code here\n    pass\n</code></pre> <p>Scenario 4: Audit Trail Issues</p> <p>Symptoms: Missing audit entries, audit write failures</p> <p>Debugging Steps:</p> <ol> <li>Verify audit configuration:</li> </ol> <pre><code># Check audit path\necho $BLUX_AUDIT_PATH\nls -la $BLUX_AUDIT_PATH\n\n# Test write permissions\ntouch $BLUX_AUDIT_PATH/test.txt &amp;&amp; rm $BLUX_AUDIT_PATH/test.txt\n\n# Check disk space\ndf -h $BLUX_AUDIT_PATH\n</code></pre> <ol> <li>Analyze audit content:</li> </ol> <pre><code># Check recent audit entries\ntail -n 100 $BLUX_AUDIT_PATH/*.jsonl | jq -s '.[-10:]'\n\n# Look for errors in audit\ngrep -r \"ERROR\" $BLUX_AUDIT_PATH/ || echo \"No errors found\"\n\n# Validate audit format\npython -m json.tool $BLUX_AUDIT_PATH/latest.jsonl &gt; /dev/null &amp;&amp; echo \"Valid JSON\"\n</code></pre> <ol> <li>Audit performance:</li> </ol> <pre><code># Monitor audit write performance\ntime curl -X POST http://localhost:50051/v1/tasks \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"type\": \"test\"}'\n\n# Check audit file sizes\nls -lh $BLUX_AUDIT_PATH/*.jsonl\n</code></pre> <p>Advanced Debugging Techniques</p> <p>Distributed Tracing</p> <pre><code># Implement distributed tracing\nfrom opentelemetry import trace\nfrom opentelemetry.sdk.trace import TracerProvider\n\ntracer_provider = TracerProvider()\ntrace.set_tracer_provider(tracer_provider)\n\ndef process_task(task_id):\n    tracer = trace.get_tracer(__name__)\n    with tracer.start_as_current_span(\"process_task\") as span:\n        span.set_attribute(\"task.id\", task_id)\n        # Task processing logic\n        span.add_event(\"task_processing_complete\")\n</code></pre> <p>Memory Debugging</p> <pre><code># Track memory usage\nimport tracemalloc\n\ndef debug_memory():\n    tracemalloc.start()\n\n    # Your code here\n\n    snapshot = tracemalloc.take_snapshot()\n    top_stats = snapshot.statistics('lineno')\n\n    print(\"[ Top 10 memory usage ]\")\n    for stat in top_stats[:10]:\n        print(stat)\n\n    tracemalloc.stop()\n</code></pre> <p>Async/Await Debugging</p> <pre><code># Debug asynchronous code\nimport asyncio\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG)\n\nasync def debug_async_operation():\n    try:\n        result = await some_async_call()\n        return result\n    except Exception as e:\n        logging.error(f\"Async operation failed: {e}\")\n        # Add breakpoint for async debugging\n        import pdb; pdb.set_trace()\n\n# Run with debug event loop\nasyncio.run(debug_async_operation(), debug=True)\n</code></pre> <p>Debugging in Production</p> <p>Safe Production Debugging</p> <ol> <li>Add debug endpoints (behind authentication):</li> </ol> <pre><code>@app.get(\"/debug/memory\")\nasync def debug_memory(auth: Auth = Depends(require_auth)):\n    import gc\n    gc.collect()\n    return {\n        \"memory_usage\": psutil.Process().memory_info().rss,\n        \"objects\": len(gc.get_objects())\n    }\n</code></pre> <ol> <li>Structured logging:</li> </ol> <pre><code>import structlog\n\nlogger = structlog.get_logger()\n\ndef business_operation(user_id, data):\n    logger.info(\"operation_started\", user_id=user_id, data_size=len(data))\n    try:\n        result = process_data(data)\n        logger.info(\"operation_completed\", user_id=user_id, result_size=len(result))\n        return result\n    except Exception as e:\n        logger.error(\"operation_failed\", user_id=user_id, error=str(e))\n        raise\n</code></pre> <ol> <li>Metrics and monitoring:</li> </ol> <pre><code>from prometheus_client import Counter, Histogram\n\nrequests_total = Counter('blux_requests_total', 'Total requests', ['endpoint', 'status'])\nrequest_duration = Histogram('blux_request_duration_seconds', 'Request duration')\n\n@request_duration.time()\ndef handle_request(request):\n    requests_total.labels(endpoint=request.path, status='200').inc()\n    # Request handling logic\n</code></pre> <p>Debugging Workflow</p> <p>Systematic Approach</p> <ol> <li>Observe: Gather information without assumptions</li> <li>Hypothesize: Form theories about root cause</li> <li>Experiment: Test hypotheses systematically</li> <li>Verify: Confirm the solution works</li> <li>Document: Record findings for future reference</li> </ol> <p>Debugging Checklist</p> <p>\u00b7 Reproduce the issue consistently \u00b7 Check recent changes (git log --oneline -10) \u00b7 Verify environment and configuration \u00b7 Examine logs and error messages \u00b7 Isolate the problem component \u00b7 Test potential fixes in isolation \u00b7 Verify the solution doesn't break other functionality \u00b7 Document the root cause and solution</p> <p>Tools and Resources</p> <p>Built-in Debug Scripts</p> <p>\u00b7 ./scripts/health-check.sh - System health verification \u00b7 ./scripts/anchor-list.sh - Development anchor discovery \u00b7 python tools/audit-analyzer.py - Audit trail analysis \u00b7 python tools/config-validator.py - Configuration validation</p> <p>External Tools</p> <p>\u00b7 pdb/ipdb - Python debugger \u00b7 py-spy - Python profiler \u00b7 jq - JSON processor \u00b7 htop - Process monitor \u00b7 tcpdump - Network analysis</p> <p>Documentation</p> <p>\u00b7 Architecture Guide - System design \u00b7 Integration Guide - Service interactions \u00b7 Common Issues - Known problems and solutions</p> <p>Debugging is the art of finding truth in complexity.  (( \u2022 ))</p> <p>Remember: The best debugger is a well-rested mind. Take breaks, step away, and return with fresh perspective.</p>"}]}